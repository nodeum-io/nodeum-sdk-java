/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.CloudBucketSimpleCollection;
import io.nodeum.client.model.CloudConnector;
import io.nodeum.client.model.CloudConnectorCollection;
import io.nodeum.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudConnectorsApi {
    private ApiClient localVarApiClient;

    public CloudConnectorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudConnectorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCloudConnector
     * @param cloudConnectorBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudConnectorCall(CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudConnectorValidateBeforeCall(CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling createCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = createCloudConnectorCall(cloudConnectorBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new cloud connector.
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public CloudConnector createCloudConnector(CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<CloudConnector> localVarResp = createCloudConnectorWithHttpInfo(cloudConnectorBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new cloud connector.
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudConnector> createCloudConnectorWithHttpInfo(CloudConnector cloudConnectorBody) throws ApiException {
        okhttp3.Call localVarCall = createCloudConnectorValidateBeforeCall(cloudConnectorBody, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudConnectorAsync(CloudConnector cloudConnectorBody, final ApiCallback<CloudConnector> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudConnectorValidateBeforeCall(cloudConnectorBody, _callback);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud connector destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyCloudConnectorCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyCloudConnectorValidateBeforeCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling destroyCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = destroyCloudConnectorCall(cloudConnectorId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific cloud connector.
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud connector destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyCloudConnector(String cloudConnectorId) throws ApiException {
        destroyCloudConnectorWithHttpInfo(cloudConnectorId);
    }

    /**
     * Destroys a specific cloud connector.
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud connector destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyCloudConnectorWithHttpInfo(String cloudConnectorId) throws ApiException {
        okhttp3.Call localVarCall = destroyCloudConnectorValidateBeforeCall(cloudConnectorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud connector destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyCloudConnectorAsync(String cloudConnectorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyCloudConnectorValidateBeforeCall(cloudConnectorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCloudConnectors
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud connectors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudConnectorsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (urlProxy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url_proxy", urlProxy));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_key", accessKey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCloudConnectorsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexCloudConnectorsCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, _callback);
        return localVarCall;

    }

    /**
     * Lists all cloud connectors.
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @return CloudConnectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud connectors. </td><td>  -  </td></tr>
     </table>
     */
    public CloudConnectorCollection indexCloudConnectors(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey) throws ApiException {
        ApiResponse<CloudConnectorCollection> localVarResp = indexCloudConnectorsWithHttpInfo(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey);
        return localVarResp.getData();
    }

    /**
     * Lists all cloud connectors.
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @return ApiResponse&lt;CloudConnectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud connectors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudConnectorCollection> indexCloudConnectorsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey) throws ApiException {
        okhttp3.Call localVarCall = indexCloudConnectorsValidateBeforeCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, null);
        Type localVarReturnType = new TypeToken<CloudConnectorCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all cloud connectors. (asynchronously)
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud connectors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudConnectorsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ApiCallback<CloudConnectorCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCloudConnectorsValidateBeforeCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, _callback);
        Type localVarReturnType = new TypeToken<CloudConnectorCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudConnectorCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCloudConnectorValidateBeforeCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling showCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = showCloudConnectorCall(cloudConnectorId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific cloud connector.
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
     </table>
     */
    public CloudConnector showCloudConnector(String cloudConnectorId) throws ApiException {
        ApiResponse<CloudConnector> localVarResp = showCloudConnectorWithHttpInfo(cloudConnectorId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific cloud connector.
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudConnector> showCloudConnectorWithHttpInfo(String cloudConnectorId) throws ApiException {
        okhttp3.Call localVarCall = showCloudConnectorValidateBeforeCall(cloudConnectorId, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudConnectorAsync(String cloudConnectorId, final ApiCallback<CloudConnector> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCloudConnectorValidateBeforeCall(cloudConnectorId, _callback);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCloudConnector
     * @param cloudConnectorBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCloudConnectorCall(CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors/-/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCloudConnectorValidateBeforeCall(CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling testCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = testCloudConnectorCall(cloudConnectorBody, _callback);
        return localVarCall;

    }

    /**
     * Test an unsaved cloud connector.
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus testCloudConnector(CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = testCloudConnectorWithHttpInfo(cloudConnectorBody);
        return localVarResp.getData();
    }

    /**
     * Test an unsaved cloud connector.
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> testCloudConnectorWithHttpInfo(CloudConnector cloudConnectorBody) throws ApiException {
        okhttp3.Call localVarCall = testCloudConnectorValidateBeforeCall(cloudConnectorBody, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test an unsaved cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCloudConnectorAsync(CloudConnector cloudConnectorBody, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCloudConnectorValidateBeforeCall(cloudConnectorBody, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testResultCloudConnector
     * @param jobId ID of active job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultCloudConnectorCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/-/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testResultCloudConnectorValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling testResultCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = testResultCloudConnectorCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Check result of cloud connector test job.
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (required)
     * @return CloudBucketSimpleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucketSimpleCollection testResultCloudConnector(String jobId) throws ApiException {
        ApiResponse<CloudBucketSimpleCollection> localVarResp = testResultCloudConnectorWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Check result of cloud connector test job.
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (required)
     * @return ApiResponse&lt;CloudBucketSimpleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucketSimpleCollection> testResultCloudConnectorWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = testResultCloudConnectorValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check result of cloud connector test job. (asynchronously)
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultCloudConnectorAsync(String jobId, final ApiCallback<CloudBucketSimpleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = testResultCloudConnectorValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudConnectorCall(String cloudConnectorId, CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudConnectorValidateBeforeCall(String cloudConnectorId, CloudConnector cloudConnectorBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling updateCloudConnector(Async)");
        }
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling updateCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = updateCloudConnectorCall(cloudConnectorId, cloudConnectorBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific cloud connector.
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public CloudConnector updateCloudConnector(String cloudConnectorId, CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<CloudConnector> localVarResp = updateCloudConnectorWithHttpInfo(cloudConnectorId, cloudConnectorBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific cloud connector.
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudConnector> updateCloudConnectorWithHttpInfo(String cloudConnectorId, CloudConnector cloudConnectorBody) throws ApiException {
        okhttp3.Call localVarCall = updateCloudConnectorValidateBeforeCall(cloudConnectorId, cloudConnectorBody, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud connector. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudConnectorAsync(String cloudConnectorId, CloudConnector cloudConnectorBody, final ApiCallback<CloudConnector> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudConnectorValidateBeforeCall(cloudConnectorId, cloudConnectorBody, _callback);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
