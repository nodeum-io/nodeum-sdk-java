/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ImportFileCollection;
import io.nodeum.client.model.ImportFileWithPath;
import io.nodeum.client.model.NodeumFileCollection;
import io.nodeum.client.model.NodeumFileWithPath;
import io.nodeum.client.model.OnTapesFile;
import io.nodeum.client.model.OnTapesFileCollection;
import io.nodeum.client.model.TapeCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for filesChildren
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_parent_id}/children"
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenValidateBeforeCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildren(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildren(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenWithHttpInfo(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenWithHttpInfo(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenAsync(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByContainerCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByContainerValidateBeforeCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling filesChildrenByContainer(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByContainerCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByContainer(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByContainerWithHttpInfo(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByContainerWithHttpInfo(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByContainerAsync(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByPoolCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByPoolValidateBeforeCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling filesChildrenByPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByPool(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByPoolCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByPool(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByPoolWithHttpInfo(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByPoolAsync(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskValidateBeforeCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTask(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTask(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskWithHttpInfo(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskWithHttpInfo(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskAsync(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionCall(String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskExecutionValidateBeforeCall(String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTaskExecution(String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskExecutionWithHttpInfo(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionWithHttpInfo(String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionAsync(String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionByTaskCall(String taskId, String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskExecutionByTaskValidateBeforeCall(String taskId, String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTaskExecutionByTask(String taskId, String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionByTaskWithHttpInfo(String taskId, String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionByTaskAsync(String taskId, String taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importFilesChildrenByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importFilesChildrenByPoolCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/import_files/{file_parent_id}/children"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importFilesChildrenByPoolValidateBeforeCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling importFilesChildrenByPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling importFilesChildrenByPool(Async)");
        }
        

        okhttp3.Call localVarCall = importFilesChildrenByPoolCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ImportFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public ImportFileCollection importFilesChildrenByPool(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<ImportFileCollection> localVarResp = importFilesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;ImportFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportFileCollection> importFilesChildrenByPoolWithHttpInfo(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = importFilesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<ImportFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Data Exchange. (asynchronously)
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importFilesChildrenByPoolAsync(String poolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<ImportFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = importFilesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<ImportFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFiles
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesValidateBeforeCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexFilesCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFiles(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesWithHttpInfo(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesWithHttpInfo(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesAsync(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByContainerCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByContainerValidateBeforeCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling indexFilesByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByContainerCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByContainer(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByContainerWithHttpInfo(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByContainerWithHttpInfo(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByContainerAsync(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByPoolCall(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/files"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByPoolValidateBeforeCall(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexFilesByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByPoolCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByPool(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByPoolWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByPoolWithHttpInfo(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByPoolValidateBeforeCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByPoolAsync(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByPoolValidateBeforeCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskValidateBeforeCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTask(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskWithHttpInfo(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskWithHttpInfo(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskAsync(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionCall(String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskExecutionValidateBeforeCall(String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskExecutionCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTaskExecution(String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskExecutionWithHttpInfo(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionWithHttpInfo(String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionAsync(String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionByTaskCall(String taskId, String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskExecutionByTaskValidateBeforeCall(String taskId, String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTaskExecutionByTask(String taskId, String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionByTaskWithHttpInfo(String taskId, String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionByTaskAsync(String taskId, String taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexImportFilesByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexImportFilesByPoolCall(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/import_files"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexImportFilesByPoolValidateBeforeCall(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexImportFilesByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexImportFilesByPoolCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root of tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ImportFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public ImportFileCollection indexImportFilesByPool(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<ImportFileCollection> localVarResp = indexImportFilesByPoolWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root of tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;ImportFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportFileCollection> indexImportFilesByPoolWithHttpInfo(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexImportFilesByPoolValidateBeforeCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<ImportFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root of tape of pools, specific for Data Exchange. (asynchronously)
     * **API Key Scope**: import_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of imported files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexImportFilesByPoolAsync(String poolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<ImportFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexImportFilesByPoolValidateBeforeCall(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<ImportFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexOnTapesFilesByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexOnTapesFilesByPoolCall(String poolId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/on_tapes_files"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexOnTapesFilesByPoolValidateBeforeCall(String poolId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexOnTapesFilesByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexOnTapesFilesByPoolCall(poolId, limit, offset, name, type, size, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root of tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @return OnTapesFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public OnTapesFileCollection indexOnTapesFilesByPool(String poolId, Integer limit, Integer offset, String name, String type, String size) throws ApiException {
        ApiResponse<OnTapesFileCollection> localVarResp = indexOnTapesFilesByPoolWithHttpInfo(poolId, limit, offset, name, type, size);
        return localVarResp.getData();
    }

    /**
     * Lists files on root of tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @return ApiResponse&lt;OnTapesFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnTapesFileCollection> indexOnTapesFilesByPoolWithHttpInfo(String poolId, Integer limit, Integer offset, String name, String type, String size) throws ApiException {
        okhttp3.Call localVarCall = indexOnTapesFilesByPoolValidateBeforeCall(poolId, limit, offset, name, type, size, null);
        Type localVarReturnType = new TypeToken<OnTapesFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root of tape of pools, specific for Active and Offline. (asynchronously)
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexOnTapesFilesByPoolAsync(String poolId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback<OnTapesFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexOnTapesFilesByPoolValidateBeforeCall(poolId, limit, offset, name, type, size, _callback);
        Type localVarReturnType = new TypeToken<OnTapesFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByFileByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByPoolCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/files/{file_id}/tapes"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByFileByPoolValidateBeforeCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexTapesByFileByPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling indexTapesByFileByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByFileByPoolCall(poolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays tapes containing specific file, related to the specific pool.
     * **API Key Scope**: files / tapes
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByFileByPool(String poolId, Integer fileId) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByFileByPoolWithHttpInfo(poolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays tapes containing specific file, related to the specific pool.
     * **API Key Scope**: files / tapes
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByFileByPoolWithHttpInfo(String poolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByFileByPoolValidateBeforeCall(poolId, fileId, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays tapes containing specific file, related to the specific pool. (asynchronously)
     * **API Key Scope**: files / tapes
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByPoolAsync(String poolId, Integer fileId, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByFileByPoolValidateBeforeCall(poolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByFileByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_id}/tapes"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByFileByTaskValidateBeforeCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTapesByFileByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling indexTapesByFileByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByFileByTaskCall(taskId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByFileByTask(String taskId, Integer fileId) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByFileByTaskWithHttpInfo(taskId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByFileByTaskWithHttpInfo(String taskId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByFileByTaskValidateBeforeCall(taskId, fileId, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays tapes containing specific file, related to the specific task. (asynchronously)
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskAsync(String taskId, Integer fileId, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByFileByTaskValidateBeforeCall(taskId, fileId, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByFileByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskExecutionCall(String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_id}/tapes"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByFileByTaskExecutionValidateBeforeCall(String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexTapesByFileByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling indexTapesByFileByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionCall(taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByFileByTaskExecution(String taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByFileByTaskExecutionWithHttpInfo(String taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays tapes containing specific file, related to the specific task. (asynchronously)
     * **API Key Scope**: files / tapes
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskExecutionAsync(String taskExecutionId, Integer fileId, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByFileByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskExecutionByTaskCall(String taskId, String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByFileByTaskExecutionByTaskValidateBeforeCall(String taskId, String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTapesByFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexTapesByFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling indexTapesByFileByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionByTaskCall(taskId, taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByFileByTaskExecutionByTask(String taskId, String taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays tapes containing specific file, related to the specific task.
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByFileByTaskExecutionByTaskWithHttpInfo(String taskId, String taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays tapes containing specific file, related to the specific task. (asynchronously)
     * **API Key Scope**: files / tapes
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByFileByTaskExecutionByTaskAsync(String taskId, String taskExecutionId, Integer fileId, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onTapesFilesChildrenByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onTapesFilesChildrenByPoolCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/on_tapes_files/{file_parent_id}/children"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onTapesFilesChildrenByPoolValidateBeforeCall(String poolId, Integer fileParentId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling onTapesFilesChildrenByPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling onTapesFilesChildrenByPool(Async)");
        }
        

        okhttp3.Call localVarCall = onTapesFilesChildrenByPoolCall(poolId, fileParentId, limit, offset, name, type, size, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @return OnTapesFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public OnTapesFileCollection onTapesFilesChildrenByPool(String poolId, Integer fileParentId, Integer limit, Integer offset, String name, String type, String size) throws ApiException {
        ApiResponse<OnTapesFileCollection> localVarResp = onTapesFilesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, name, type, size);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @return ApiResponse&lt;OnTapesFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnTapesFileCollection> onTapesFilesChildrenByPoolWithHttpInfo(String poolId, Integer fileParentId, Integer limit, Integer offset, String name, String type, String size) throws ApiException {
        okhttp3.Call localVarCall = onTapesFilesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, name, type, size, null);
        Type localVarReturnType = new TypeToken<OnTapesFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder on tape of pools, specific for Active and Offline. (asynchronously)
     * **API Key Scope**: on_tapes_files / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param size Filter on size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onTapesFilesChildrenByPoolAsync(String poolId, Integer fileParentId, Integer limit, Integer offset, String name, String type, String size, final ApiCallback<OnTapesFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = onTapesFilesChildrenByPoolValidateBeforeCall(poolId, fileParentId, limit, offset, name, type, size, _callback);
        Type localVarReturnType = new TypeToken<OnTapesFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFile
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileValidateBeforeCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFile(Async)");
        }
        

        okhttp3.Call localVarCall = showFileCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFile(Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileWithHttpInfo(Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileAsync(Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByContainerCall(String containerId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByContainerValidateBeforeCall(String containerId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showFileByContainer(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByContainerCall(containerId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByContainer(String containerId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByContainerWithHttpInfo(containerId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByContainerWithHttpInfo(String containerId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByContainerValidateBeforeCall(containerId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByContainerAsync(String containerId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByContainerValidateBeforeCall(containerId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByPoolCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/files/{file_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByPoolValidateBeforeCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showFileByPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByPoolCall(poolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByPool(String poolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByPoolWithHttpInfo(poolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByPoolWithHttpInfo(String poolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByPoolValidateBeforeCall(poolId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByPoolAsync(String poolId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByPoolValidateBeforeCall(poolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskValidateBeforeCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTask(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskCall(taskId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTask(String taskId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskWithHttpInfo(taskId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskWithHttpInfo(String taskId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskValidateBeforeCall(taskId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskAsync(String taskId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskValidateBeforeCall(taskId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionCall(String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskExecutionValidateBeforeCall(String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskExecutionCall(taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTaskExecution(String taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionWithHttpInfo(String taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionAsync(String taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionByTaskCall(String taskId, String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskExecutionByTaskValidateBeforeCall(String taskId, String taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskCall(taskId, taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTaskExecutionByTask(String taskId, String taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionByTaskWithHttpInfo(String taskId, String taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionByTaskAsync(String taskId, String taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showImportFileByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific imported file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showImportFileByPoolCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/import_files/{file_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showImportFileByPoolValidateBeforeCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showImportFileByPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showImportFileByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showImportFileByPoolCall(poolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ImportFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific imported file. </td><td>  -  </td></tr>
     </table>
     */
    public ImportFileWithPath showImportFileByPool(String poolId, Integer fileId) throws ApiException {
        ApiResponse<ImportFileWithPath> localVarResp = showImportFileByPoolWithHttpInfo(poolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file on tape of pools, specific for Data Exchange.
     * **API Key Scope**: import_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;ImportFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific imported file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportFileWithPath> showImportFileByPoolWithHttpInfo(String poolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showImportFileByPoolValidateBeforeCall(poolId, fileId, null);
        Type localVarReturnType = new TypeToken<ImportFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file on tape of pools, specific for Data Exchange. (asynchronously)
     * **API Key Scope**: import_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific imported file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showImportFileByPoolAsync(String poolId, Integer fileId, final ApiCallback<ImportFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showImportFileByPoolValidateBeforeCall(poolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<ImportFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showOnTapeFileByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showOnTapeFileByPoolCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/on_tapes_files/{file_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showOnTapeFileByPoolValidateBeforeCall(String poolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showOnTapeFileByPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showOnTapeFileByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showOnTapeFileByPoolCall(poolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return OnTapesFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public OnTapesFile showOnTapeFileByPool(String poolId, Integer fileId) throws ApiException {
        ApiResponse<OnTapesFile> localVarResp = showOnTapeFileByPoolWithHttpInfo(poolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file on tape of pools, specific for Active and Offline.
     * **API Key Scope**: on_tapes_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;OnTapesFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnTapesFile> showOnTapeFileByPoolWithHttpInfo(String poolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showOnTapeFileByPoolValidateBeforeCall(poolId, fileId, null);
        Type localVarReturnType = new TypeToken<OnTapesFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file on tape of pools, specific for Active and Offline. (asynchronously)
     * **API Key Scope**: on_tapes_files / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file on tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showOnTapeFileByPoolAsync(String poolId, Integer fileId, final ApiCallback<OnTapesFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = showOnTapeFileByPoolValidateBeforeCall(poolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<OnTapesFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
