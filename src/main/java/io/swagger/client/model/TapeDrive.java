/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TapeDriveDevice;
import java.io.IOException;

/**
 * TapeDrive
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T09:57:17.206Z")
public class TapeDrive extends TapeDriveDevice {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("tape_library_id")
  private Integer tapeLibraryId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("libso")
  private String libso = null;

  @SerializedName("acs")
  private Integer acs = null;

  @SerializedName("lsm")
  private Integer lsm = null;

  @SerializedName("panel")
  private Integer panel = null;

  @SerializedName("transport")
  private Integer transport = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OFFLINE("offline"),
    
    ONLINE("online");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("full")
  private Integer full = null;

  @SerializedName("mount_count")
  private Integer mountCount = null;

  @SerializedName("use_to")
  private String useTo = null;

  @SerializedName("use_by")
  private String useBy = null;

  @SerializedName("use_file_processed_size")
  private Integer useFileProcessedSize = null;

  @SerializedName("use_file_size_to_process")
  private Integer useFileSizeToProcess = null;

  @SerializedName("use_file_name_processed")
  private String useFileNameProcessed = null;

  @SerializedName("bandwidth")
  private Integer bandwidth = null;

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "1", value = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get tapeLibraryId
   * @return tapeLibraryId
  **/
  @ApiModelProperty(example = "2", value = "")
  public Integer getTapeLibraryId() {
    return tapeLibraryId;
  }

  public TapeDrive name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TapeDrive comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(example = "", value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public TapeDrive libso(String libso) {
    this.libso = libso;
    return this;
  }

   /**
   * Get libso
   * @return libso
  **/
  @ApiModelProperty(example = "drive_lto", value = "")
  public String getLibso() {
    return libso;
  }

  public void setLibso(String libso) {
    this.libso = libso;
  }

  public TapeDrive acs(Integer acs) {
    this.acs = acs;
    return this;
  }

   /**
   * Get acs
   * @return acs
  **/
  @ApiModelProperty(value = "")
  public Integer getAcs() {
    return acs;
  }

  public void setAcs(Integer acs) {
    this.acs = acs;
  }

  public TapeDrive lsm(Integer lsm) {
    this.lsm = lsm;
    return this;
  }

   /**
   * Get lsm
   * @return lsm
  **/
  @ApiModelProperty(value = "")
  public Integer getLsm() {
    return lsm;
  }

  public void setLsm(Integer lsm) {
    this.lsm = lsm;
  }

  public TapeDrive panel(Integer panel) {
    this.panel = panel;
    return this;
  }

   /**
   * Get panel
   * @return panel
  **/
  @ApiModelProperty(value = "")
  public Integer getPanel() {
    return panel;
  }

  public void setPanel(Integer panel) {
    this.panel = panel;
  }

  public TapeDrive transport(Integer transport) {
    this.transport = transport;
    return this;
  }

   /**
   * Get transport
   * @return transport
  **/
  @ApiModelProperty(value = "")
  public Integer getTransport() {
    return transport;
  }

  public void setTransport(Integer transport) {
    this.transport = transport;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(example = "online", value = "")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Get full
   * @return full
  **/
  @ApiModelProperty(value = "")
  public Integer getFull() {
    return full;
  }

   /**
   * Get mountCount
   * @return mountCount
  **/
  @ApiModelProperty(value = "")
  public Integer getMountCount() {
    return mountCount;
  }

   /**
   * Get useTo
   * @return useTo
  **/
  @ApiModelProperty(example = "Idle", value = "")
  public String getUseTo() {
    return useTo;
  }

   /**
   * Get useBy
   * @return useBy
  **/
  @ApiModelProperty(example = "Idle", value = "")
  public String getUseBy() {
    return useBy;
  }

   /**
   * Get useFileProcessedSize
   * @return useFileProcessedSize
  **/
  @ApiModelProperty(value = "")
  public Integer getUseFileProcessedSize() {
    return useFileProcessedSize;
  }

   /**
   * Get useFileSizeToProcess
   * @return useFileSizeToProcess
  **/
  @ApiModelProperty(value = "")
  public Integer getUseFileSizeToProcess() {
    return useFileSizeToProcess;
  }

   /**
   * Get useFileNameProcessed
   * @return useFileNameProcessed
  **/
  @ApiModelProperty(value = "")
  public String getUseFileNameProcessed() {
    return useFileNameProcessed;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @ApiModelProperty(value = "")
  public Integer getBandwidth() {
    return bandwidth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TapeDrive tapeDrive = (TapeDrive) o;
    return Objects.equals(this.id, tapeDrive.id) &&
        Objects.equals(this.tapeLibraryId, tapeDrive.tapeLibraryId) &&
        Objects.equals(this.name, tapeDrive.name) &&
        Objects.equals(this.comment, tapeDrive.comment) &&
        Objects.equals(this.libso, tapeDrive.libso) &&
        Objects.equals(this.acs, tapeDrive.acs) &&
        Objects.equals(this.lsm, tapeDrive.lsm) &&
        Objects.equals(this.panel, tapeDrive.panel) &&
        Objects.equals(this.transport, tapeDrive.transport) &&
        Objects.equals(this.status, tapeDrive.status) &&
        Objects.equals(this.full, tapeDrive.full) &&
        Objects.equals(this.mountCount, tapeDrive.mountCount) &&
        Objects.equals(this.useTo, tapeDrive.useTo) &&
        Objects.equals(this.useBy, tapeDrive.useBy) &&
        Objects.equals(this.useFileProcessedSize, tapeDrive.useFileProcessedSize) &&
        Objects.equals(this.useFileSizeToProcess, tapeDrive.useFileSizeToProcess) &&
        Objects.equals(this.useFileNameProcessed, tapeDrive.useFileNameProcessed) &&
        Objects.equals(this.bandwidth, tapeDrive.bandwidth) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tapeLibraryId, name, comment, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TapeDrive {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tapeLibraryId: ").append(toIndentedString(tapeLibraryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    libso: ").append(toIndentedString(libso)).append("\n");
    sb.append("    acs: ").append(toIndentedString(acs)).append("\n");
    sb.append("    lsm: ").append(toIndentedString(lsm)).append("\n");
    sb.append("    panel: ").append(toIndentedString(panel)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    full: ").append(toIndentedString(full)).append("\n");
    sb.append("    mountCount: ").append(toIndentedString(mountCount)).append("\n");
    sb.append("    useTo: ").append(toIndentedString(useTo)).append("\n");
    sb.append("    useBy: ").append(toIndentedString(useBy)).append("\n");
    sb.append("    useFileProcessedSize: ").append(toIndentedString(useFileProcessedSize)).append("\n");
    sb.append("    useFileSizeToProcess: ").append(toIndentedString(useFileSizeToProcess)).append("\n");
    sb.append("    useFileNameProcessed: ").append(toIndentedString(useFileNameProcessed)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

