/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.CloudBucket;
import io.nodeum.client.model.CloudBucketCollection;
import io.nodeum.client.model.CloudBucketSimpleCollection;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudBucketsApi
 */
@Ignore
public class CloudBucketsApiTest {

    private final CloudBucketsApi api = new CloudBucketsApi();

    
    /**
     * Lists all cloud buckets.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String cloudConnectorId = null;
        String poolId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBuckets(limit, offset, sortBy, id, cloudConnectorId, poolId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Lists all cloud buckets.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String poolId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBucketsByCloudConnector(cloudConnectorId, limit, offset, sortBy, id, poolId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Lists all cloud buckets from pool.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsByPoolTest() throws ApiException {
        String poolId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String cloudConnectorId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBucketsByPool(poolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucket(cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucketByPool(poolId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucket(cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucketByPool(poolId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * **API Key Scope**: cloud_buckets / sync
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncCloudBucketsTest() throws ApiException {
        String cloudConnectorId = null;
        ActiveJobStatus response = api.syncCloudBuckets(cloudConnectorId);

        // TODO: test validations
    }
    
    /**
     * Check result of cloud connector sync job.
     *
     * **API Key Scope**: cloud_buckets / sync
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncResultCloudBucketsTest() throws ApiException {
        String cloudConnectorId = null;
        String jobId = null;
        CloudBucketSimpleCollection response = api.syncResultCloudBuckets(cloudConnectorId, jobId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucket(cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucketByPool(poolId, cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
}
