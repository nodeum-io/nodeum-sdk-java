/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.TaskExecution;
import io.nodeum.client.model.TaskExecutionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskExecutionsApi {
    private ApiClient localVarApiClient;

    public TaskExecutionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskExecutionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for indexTaskExecutions
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param completeList If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param creationDate Filter on creation date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskExecutionsCall(Integer limit, Integer offset, List<String> sortBy, Boolean completeList, String id, String taskId, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String creationDate, String modificationDate, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (completeList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("complete_list", completeList));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (workflowType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_type", workflowType));
        }

        if (workflowAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_action", workflowAction));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_type", sourceType));
        }

        if (destinationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_type", destinationType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (logTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_time", logTime));
        }

        if (jobStarted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_started", jobStarted));
        }

        if (jobFinished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_finished", jobFinished));
        }

        if (creationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation_date", creationDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (toProcessSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_process_size", toProcessSize));
        }

        if (processedSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processed_size", processedSize));
        }

        if (toProcessFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_process_files", toProcessFiles));
        }

        if (processedFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processed_files", processedFiles));
        }

        if (finalizedFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finalized_files", finalizedFiles));
        }

        if (estimationTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("estimation_time", estimationTime));
        }

        if (bandwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bandwidth", bandwidth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTaskExecutionsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, Boolean completeList, String id, String taskId, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String creationDate, String modificationDate, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTaskExecutionsCall(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, _callback);
        return localVarCall;

    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param completeList If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param creationDate Filter on creation date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TaskExecutionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public TaskExecutionCollection indexTaskExecutions(Integer limit, Integer offset, List<String> sortBy, Boolean completeList, String id, String taskId, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String creationDate, String modificationDate, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        ApiResponse<TaskExecutionCollection> localVarResp = indexTaskExecutionsWithHttpInfo(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
        return localVarResp.getData();
    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param completeList If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param creationDate Filter on creation date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TaskExecutionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExecutionCollection> indexTaskExecutionsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, Boolean completeList, String id, String taskId, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String creationDate, String modificationDate, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        okhttp3.Call localVarCall = indexTaskExecutionsValidateBeforeCall(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, null);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all task executions. (asynchronously)
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param completeList If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param creationDate Filter on creation date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskExecutionsAsync(Integer limit, Integer offset, List<String> sortBy, Boolean completeList, String id, String taskId, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String creationDate, String modificationDate, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback<TaskExecutionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTaskExecutionsValidateBeforeCall(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, _callback);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTaskExecutionsByTask
     * @param taskId Filter on task id (optional)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskExecutionsByTaskCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (workflowType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_type", workflowType));
        }

        if (workflowAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_action", workflowAction));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_type", sourceType));
        }

        if (destinationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_type", destinationType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (logTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_time", logTime));
        }

        if (jobStarted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_started", jobStarted));
        }

        if (jobFinished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_finished", jobFinished));
        }

        if (toProcessSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_process_size", toProcessSize));
        }

        if (processedSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processed_size", processedSize));
        }

        if (toProcessFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_process_files", toProcessFiles));
        }

        if (processedFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processed_files", processedFiles));
        }

        if (finalizedFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finalized_files", finalizedFiles));
        }

        if (estimationTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("estimation_time", estimationTime));
        }

        if (bandwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bandwidth", bandwidth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTaskExecutionsByTaskValidateBeforeCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTaskExecutionsByTaskCall(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, _callback);
        return localVarCall;

    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param taskId Filter on task id (optional)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TaskExecutionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public TaskExecutionCollection indexTaskExecutionsByTask(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        ApiResponse<TaskExecutionCollection> localVarResp = indexTaskExecutionsByTaskWithHttpInfo(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
        return localVarResp.getData();
    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param taskId Filter on task id (optional)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TaskExecutionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExecutionCollection> indexTaskExecutionsByTaskWithHttpInfo(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        okhttp3.Call localVarCall = indexTaskExecutionsByTaskValidateBeforeCall(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, null);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all task executions. (asynchronously)
     * **API Key Scope**: task_executions / index
     * @param taskId Filter on task id (optional)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param workflowType Filter on task workflow type (optional)
     * @param workflowAction Filter on task workflow action (optional)
     * @param sourceType Filter on task source type (optional)
     * @param destinationType Filter on task destination type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task executions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskExecutionsByTaskAsync(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String workflowType, String workflowAction, String sourceType, String destinationType, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback<TaskExecutionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTaskExecutionsByTaskValidateBeforeCall(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, _callback);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskExecutionCall(String taskExecutionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskExecutionValidateBeforeCall(String taskExecutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskExecutionCall(taskExecutionId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return TaskExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TaskExecution showTaskExecution(String taskExecutionId) throws ApiException {
        ApiResponse<TaskExecution> localVarResp = showTaskExecutionWithHttpInfo(taskExecutionId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return ApiResponse&lt;TaskExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExecution> showTaskExecutionWithHttpInfo(String taskExecutionId) throws ApiException {
        okhttp3.Call localVarCall = showTaskExecutionValidateBeforeCall(taskExecutionId, null);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific task execution. (asynchronously)
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskExecutionAsync(String taskExecutionId, final ApiCallback<TaskExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskExecutionValidateBeforeCall(taskExecutionId, _callback);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskExecutionByTaskCall(String taskId, String taskExecutionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskExecutionByTaskValidateBeforeCall(String taskId, String taskExecutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskExecutionByTaskCall(taskId, taskExecutionId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return TaskExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TaskExecution showTaskExecutionByTask(String taskId, String taskExecutionId) throws ApiException {
        ApiResponse<TaskExecution> localVarResp = showTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return ApiResponse&lt;TaskExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExecution> showTaskExecutionByTaskWithHttpInfo(String taskId, String taskExecutionId) throws ApiException {
        okhttp3.Call localVarCall = showTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, null);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific task execution. (asynchronously)
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task execution. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskExecutionByTaskAsync(String taskId, String taskExecutionId, final ApiCallback<TaskExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, _callback);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
