/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.Nas;
import io.nodeum.client.model.NasCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasApi {
    private ApiClient localVarApiClient;

    public NasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNas
     * @param nasBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasCall(Nas nasBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasBody;

        // create path and map variables
        String localVarPath = "/nas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNasValidateBeforeCall(Nas nasBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasBody' is set
        if (nasBody == null) {
            throw new ApiException("Missing the required parameter 'nasBody' when calling createNas(Async)");
        }
        

        okhttp3.Call localVarCall = createNasCall(nasBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new NAS.
     * **API Key Scope**: nas / create
     * @param nasBody  (required)
     * @return Nas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Nas createNas(Nas nasBody) throws ApiException {
        ApiResponse<Nas> localVarResp = createNasWithHttpInfo(nasBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new NAS.
     * **API Key Scope**: nas / create
     * @param nasBody  (required)
     * @return ApiResponse&lt;Nas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nas> createNasWithHttpInfo(Nas nasBody) throws ApiException {
        okhttp3.Call localVarCall = createNasValidateBeforeCall(nasBody, null);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new NAS. (asynchronously)
     * **API Key Scope**: nas / create
     * @param nasBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasAsync(Nas nasBody, final ApiCallback<Nas> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNasValidateBeforeCall(nasBody, _callback);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasCall(String nasId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasValidateBeforeCall(String nasId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling destroyNas(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasCall(nasId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS.
     * **API Key Scope**: nas / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNas(String nasId) throws ApiException {
        destroyNasWithHttpInfo(nasId);
    }

    /**
     * Destroys a specific NAS.
     * **API Key Scope**: nas / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasWithHttpInfo(String nasId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasValidateBeforeCall(nasId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS. (asynchronously)
     * **API Key Scope**: nas / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasAsync(String nasId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasValidateBeforeCall(nasId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNas
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param host Filter on host (optional)
     * @param type Filter on type (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String host, String type, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String host, String type, String price, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexNasCall(limit, offset, sortBy, id, name, comment, host, type, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS.
     * **API Key Scope**: nas / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param host Filter on host (optional)
     * @param type Filter on type (optional)
     * @param price Filter on price (optional)
     * @return NasCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS. </td><td>  -  </td></tr>
     </table>
     */
    public NasCollection indexNas(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String host, String type, String price) throws ApiException {
        ApiResponse<NasCollection> localVarResp = indexNasWithHttpInfo(limit, offset, sortBy, id, name, comment, host, type, price);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS.
     * **API Key Scope**: nas / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param host Filter on host (optional)
     * @param type Filter on type (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;NasCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasCollection> indexNasWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String host, String type, String price) throws ApiException {
        okhttp3.Call localVarCall = indexNasValidateBeforeCall(limit, offset, sortBy, id, name, comment, host, type, price, null);
        Type localVarReturnType = new TypeToken<NasCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS. (asynchronously)
     * **API Key Scope**: nas / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param host Filter on host (optional)
     * @param type Filter on type (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String host, String type, String price, final ApiCallback<NasCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasValidateBeforeCall(limit, offset, sortBy, id, name, comment, host, type, price, _callback);
        Type localVarReturnType = new TypeToken<NasCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasCall(String nasId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasValidateBeforeCall(String nasId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling showNas(Async)");
        }
        

        okhttp3.Call localVarCall = showNasCall(nasId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS.
     * **API Key Scope**: nas / show
     * @param nasId Numeric ID or name of NAS. (required)
     * @return Nas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
     </table>
     */
    public Nas showNas(String nasId) throws ApiException {
        ApiResponse<Nas> localVarResp = showNasWithHttpInfo(nasId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS.
     * **API Key Scope**: nas / show
     * @param nasId Numeric ID or name of NAS. (required)
     * @return ApiResponse&lt;Nas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nas> showNasWithHttpInfo(String nasId) throws ApiException {
        okhttp3.Call localVarCall = showNasValidateBeforeCall(nasId, null);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS. (asynchronously)
     * **API Key Scope**: nas / show
     * @param nasId Numeric ID or name of NAS. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasAsync(String nasId, final ApiCallback<Nas> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasValidateBeforeCall(nasId, _callback);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasCall(String nasId, Nas nasBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasValidateBeforeCall(String nasId, Nas nasBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling updateNas(Async)");
        }
        
        // verify the required parameter 'nasBody' is set
        if (nasBody == null) {
            throw new ApiException("Missing the required parameter 'nasBody' when calling updateNas(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasCall(nasId, nasBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS.
     * **API Key Scope**: nas / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasBody  (required)
     * @return Nas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Nas updateNas(String nasId, Nas nasBody) throws ApiException {
        ApiResponse<Nas> localVarResp = updateNasWithHttpInfo(nasId, nasBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS.
     * **API Key Scope**: nas / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasBody  (required)
     * @return ApiResponse&lt;Nas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Nas> updateNasWithHttpInfo(String nasId, Nas nasBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasValidateBeforeCall(nasId, nasBody, null);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS. (asynchronously)
     * **API Key Scope**: nas / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasAsync(String nasId, Nas nasBody, final ApiCallback<Nas> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasValidateBeforeCall(nasId, nasBody, _callback);
        Type localVarReturnType = new TypeToken<Nas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
