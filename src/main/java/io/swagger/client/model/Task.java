/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Task
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T09:57:17.206Z")
public class Task {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("comment")
  private String comment = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EXPORT_ACTIVE_ARCHIVE_COPY("export_active_archive_copy"),
    
    IMPORT_ACTIVE_ARCHIVE_COPY("import_active_archive_copy"),
    
    EXT_TO_CACHE("ext_to_cache"),
    
    CACHE_TO_PRIMARY("cache_to_primary"),
    
    TO_CLOUD_ACTIVE_ARCHIVE_COPY("to_cloud_active_archive_copy"),
    
    FROM_CLOUD_ACTIVE_ARCHIVE_COPY("from_cloud_active_archive_copy"),
    
    TO_NAS_ACTIVE_ARCHIVE_COPY("to_nas_active_archive_copy"),
    
    FROM_NAS_ACTIVE_ARCHIVE_COPY("from_nas_active_archive_copy"),
    
    EXPORT_ACTIVE_ARCHIVE_MOVE("export_active_archive_move"),
    
    FROM_CLOUD_ACTIVE_ARCHIVE_MOVE("from_cloud_active_archive_move"),
    
    FROM_NAS_ACTIVE_ARCHIVE_MOVE("from_nas_active_archive_move"),
    
    TO_CLOUD_ACTIVE_ARCHIVE_MOVE("to_cloud_active_archive_move"),
    
    FROM_CLOUD_TO_CLOUD_ACTIVE_ARCHIVE_MOVE("from_cloud_to_cloud_active_archive_move"),
    
    FROM_CLOUD_TO_NAS_ACTIVE_ARCHIVE_MOVE("from_cloud_to_nas_active_archive_move"),
    
    TO_NAS_ACTIVE_ARCHIVE_MOVE("to_nas_active_archive_move"),
    
    FROM_NAS_TO_NAS_ACTIVE_ARCHIVE_MOVE("from_nas_to_nas_active_archive_move"),
    
    FROM_NAS_TO_CLOUD_ACTIVE_ARCHIVE_MOVE("from_nas_to_cloud_active_archive_move"),
    
    EXT_TO_CACHE_MOVE("ext_to_cache_move"),
    
    EXPORT_OFFLINE_ARCHIVING_COPY("export_offline_archiving_copy"),
    
    IMPORT_OFFLINE_ARCHIVING_COPY("import_offline_archiving_copy"),
    
    TO_CLOUD_OFFLINE_COPY("to_cloud_offline_copy"),
    
    FROM_CLOUD_OFFLINE_COPY("from_cloud_offline_copy"),
    
    TO_NAS_OFFLINE_COPY("to_nas_offline_copy"),
    
    FROM_NAS_OFFLINE_COPY("from_nas_offline_copy"),
    
    FROM_CLOUD_TO_CLOUD_OFFLINE_ARCHIVE_COPY("from_cloud_to_cloud_offline_archive_copy"),
    
    FROM_NAS_TO_NAS_OFFLINE_ARCHIVE_COPY("from_nas_to_nas_offline_archive_copy"),
    
    RELOAD_COPY("reload_copy"),
    
    EXPORT_OFFLINE_ARCHIVING_MOVE("export_offline_archiving_move"),
    
    TO_CLOUD_OFFLINE_MOVE("to_cloud_offline_move"),
    
    TO_NAS_OFFLINE_MOVE("to_nas_offline_move"),
    
    OFFLINE_SCAN_MEDIA("offline_scan_media"),
    
    FROM_NAS_TO_NAS_OFFLINE_ARCHIVE_MOVE("from_nas_to_nas_offline_archive_move"),
    
    FROM_NAS_OFFLINE_ARCHIVE_MOVE("from_nas_offline_archive_move"),
    
    FROM_CLOUD_TO_CLOUD_OFFLINE_ARCHIVE_MOVE("from_cloud_to_cloud_offline_archive_move"),
    
    FROM_CLOUD_OFFLINE_ARCHIVE_MOVE("from_cloud_offline_archive_move"),
    
    RELOAD_MOVE("reload_move"),
    
    EXPORT_DATA_EXCHANGE_COPY("export_data_exchange_copy"),
    
    IMPORT_DATA_EXCHANGE_COPY("import_data_exchange_copy"),
    
    EXPORT_DATA_EXCHANGE_MOVE("export_data_exchange_move"),
    
    IMPORT_SCAN_MEDIA("import_scan_media"),
    
    REHYDRATATION("rehydratation"),
    
    FORMAT("format"),
    
    CHECK_CONSISTENCY("check_consistency"),
    
    MIGRATION_NEW_LTFS_TO_NEW_LTFS("migration_new_ltfs_to_new_ltfs"),
    
    FULL_BACKUP("full_backup"),
    
    INCREMENTAL_BACKUP("incremental_backup"),
    
    DATA_ENRICHMENT_GOOGLE_VISION("data_enrichment_google_vision"),
    
    DATA_ENRICHMENT_DEPTHEN("data_enrichment_depthen");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Gets or Sets workflowType
   */
  @JsonAdapter(WorkflowTypeEnum.Adapter.class)
  public enum WorkflowTypeEnum {
    ACTIVE_ARCHIVE("active_archive"),
    
    OFFLINE_ARCHIVE("offline_archive"),
    
    DATA_EXCHANGE("data_exchange"),
    
    MAINTENANCE("maintenance"),
    
    DATA_ENRICHMENT("data_enrichment");

    private String value;

    WorkflowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowTypeEnum fromValue(String text) {
      for (WorkflowTypeEnum b : WorkflowTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WorkflowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WorkflowTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("workflow_type")
  private WorkflowTypeEnum workflowType = null;

  /**
   * Gets or Sets workflowAction
   */
  @JsonAdapter(WorkflowActionEnum.Adapter.class)
  public enum WorkflowActionEnum {
    COPY("copy"),
    
    MOVE("move"),
    
    SCAN("scan"),
    
    REHYDRATATION("rehydratation"),
    
    FORMAT("format"),
    
    CHECK_CONSISTENCY("check_consistency"),
    
    DUPLICATION("duplication");

    private String value;

    WorkflowActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowActionEnum fromValue(String text) {
      for (WorkflowActionEnum b : WorkflowActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WorkflowActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WorkflowActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("workflow_action")
  private WorkflowActionEnum workflowAction = null;

  @SerializedName("priority")
  private Integer priority = null;

  /**
   * Gets or Sets conflictResolution
   */
  @JsonAdapter(ConflictResolutionEnum.Adapter.class)
  public enum ConflictResolutionEnum {
    RENAME("rename"),
    
    OVERWRITE("overwrite"),
    
    IGNORE("ignore");

    private String value;

    ConflictResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConflictResolutionEnum fromValue(String text) {
      for (ConflictResolutionEnum b : ConflictResolutionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConflictResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConflictResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConflictResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConflictResolutionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("conflict_resolution")
  private ConflictResolutionEnum conflictResolution = null;

  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    NOOP("noop"),
    
    RUN("run"),
    
    PAUSE("pause"),
    
    STOP("stop"),
    
    RESUME("resume");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("activate")
  private Boolean activate = null;

  @SerializedName("creation_date")
  private String creationDate = null;

  @SerializedName("modification_date")
  private String modificationDate = null;

  @SerializedName("creation_username")
  private String creationUsername = null;

  @SerializedName("modification_username")
  private String modificationUsername = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_ACTIVATED("not_activated"),
    
    DONE("done"),
    
    IN_PROGRESS("in_progress"),
    
    ERROR("error"),
    
    PAUSED("paused"),
    
    STOPPED_BY_SYSTEM("stopped_by_system"),
    
    IN_QUEUE("in_queue"),
    
    FINISHED_WITH_WARNINGS("finished_with_warnings"),
    
    CALCULATING("calculating"),
    
    STOPPED_BY_USER("stopped_by_user");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("job_started")
  private String jobStarted = null;

  @SerializedName("job_finished")
  private String jobFinished = null;

  @SerializedName("processed_size")
  private Integer processedSize = null;

  @SerializedName("to_process_size")
  private Integer toProcessSize = null;

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

  public Task name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Task comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public Task type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

   /**
   * Get workflowType
   * @return workflowType
  **/
  @ApiModelProperty(value = "")
  public WorkflowTypeEnum getWorkflowType() {
    return workflowType;
  }

   /**
   * Get workflowAction
   * @return workflowAction
  **/
  @ApiModelProperty(value = "")
  public WorkflowActionEnum getWorkflowAction() {
    return workflowAction;
  }

  public Task priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @ApiModelProperty(value = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public Task conflictResolution(ConflictResolutionEnum conflictResolution) {
    this.conflictResolution = conflictResolution;
    return this;
  }

   /**
   * Get conflictResolution
   * @return conflictResolution
  **/
  @ApiModelProperty(value = "")
  public ConflictResolutionEnum getConflictResolution() {
    return conflictResolution;
  }

  public void setConflictResolution(ConflictResolutionEnum conflictResolution) {
    this.conflictResolution = conflictResolution;
  }

   /**
   * Get action
   * @return action
  **/
  @ApiModelProperty(value = "")
  public ActionEnum getAction() {
    return action;
  }

  public Task activate(Boolean activate) {
    this.activate = activate;
    return this;
  }

   /**
   * Get activate
   * @return activate
  **/
  @ApiModelProperty(value = "")
  public Boolean isActivate() {
    return activate;
  }

  public void setActivate(Boolean activate) {
    this.activate = activate;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @ApiModelProperty(value = "")
  public String getCreationDate() {
    return creationDate;
  }

   /**
   * Get modificationDate
   * @return modificationDate
  **/
  @ApiModelProperty(value = "")
  public String getModificationDate() {
    return modificationDate;
  }

   /**
   * Get creationUsername
   * @return creationUsername
  **/
  @ApiModelProperty(value = "")
  public String getCreationUsername() {
    return creationUsername;
  }

   /**
   * Get modificationUsername
   * @return modificationUsername
  **/
  @ApiModelProperty(value = "")
  public String getModificationUsername() {
    return modificationUsername;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Get jobStarted
   * @return jobStarted
  **/
  @ApiModelProperty(value = "")
  public String getJobStarted() {
    return jobStarted;
  }

   /**
   * Get jobFinished
   * @return jobFinished
  **/
  @ApiModelProperty(value = "")
  public String getJobFinished() {
    return jobFinished;
  }

   /**
   * Get processedSize
   * @return processedSize
  **/
  @ApiModelProperty(value = "")
  public Integer getProcessedSize() {
    return processedSize;
  }

   /**
   * Get toProcessSize
   * @return toProcessSize
  **/
  @ApiModelProperty(value = "")
  public Integer getToProcessSize() {
    return toProcessSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.id, task.id) &&
        Objects.equals(this.name, task.name) &&
        Objects.equals(this.comment, task.comment) &&
        Objects.equals(this.type, task.type) &&
        Objects.equals(this.workflowType, task.workflowType) &&
        Objects.equals(this.workflowAction, task.workflowAction) &&
        Objects.equals(this.priority, task.priority) &&
        Objects.equals(this.conflictResolution, task.conflictResolution) &&
        Objects.equals(this.action, task.action) &&
        Objects.equals(this.activate, task.activate) &&
        Objects.equals(this.creationDate, task.creationDate) &&
        Objects.equals(this.modificationDate, task.modificationDate) &&
        Objects.equals(this.creationUsername, task.creationUsername) &&
        Objects.equals(this.modificationUsername, task.modificationUsername) &&
        Objects.equals(this.status, task.status) &&
        Objects.equals(this.jobStarted, task.jobStarted) &&
        Objects.equals(this.jobFinished, task.jobFinished) &&
        Objects.equals(this.processedSize, task.processedSize) &&
        Objects.equals(this.toProcessSize, task.toProcessSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, comment, type, workflowType, workflowAction, priority, conflictResolution, action, activate, creationDate, modificationDate, creationUsername, modificationUsername, status, jobStarted, jobFinished, processedSize, toProcessSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    workflowAction: ").append(toIndentedString(workflowAction)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    conflictResolution: ").append(toIndentedString(conflictResolution)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    activate: ").append(toIndentedString(activate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    creationUsername: ").append(toIndentedString(creationUsername)).append("\n");
    sb.append("    modificationUsername: ").append(toIndentedString(modificationUsername)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jobStarted: ").append(toIndentedString(jobStarted)).append("\n");
    sb.append("    jobFinished: ").append(toIndentedString(jobFinished)).append("\n");
    sb.append("    processedSize: ").append(toIndentedString(processedSize)).append("\n");
    sb.append("    toProcessSize: ").append(toIndentedString(toProcessSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

