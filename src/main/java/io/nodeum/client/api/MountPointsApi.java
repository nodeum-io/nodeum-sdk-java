/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountPoint;
import io.nodeum.client.model.MountPointCollection;
import io.nodeum.client.model.MountStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MountPointsApi {
    private ApiClient localVarApiClient;

    public MountPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MountPointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMountPoint
     * @param mountPointBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMountPointCall(MountPoint mountPointBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mountPointBody;

        // create path and map variables
        String localVarPath = "/mount_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMountPointValidateBeforeCall(MountPoint mountPointBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointBody' is set
        if (mountPointBody == null) {
            throw new ApiException("Missing the required parameter 'mountPointBody' when calling createMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = createMountPointCall(mountPointBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new mount point.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public MountPoint createMountPoint(MountPoint mountPointBody) throws ApiException {
        ApiResponse<MountPoint> localVarResp = createMountPointWithHttpInfo(mountPointBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new mount point.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountPoint> createMountPointWithHttpInfo(MountPoint mountPointBody) throws ApiException {
        okhttp3.Call localVarCall = createMountPointValidateBeforeCall(mountPointBody, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new mount point. (asynchronously)
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMountPointAsync(MountPoint mountPointBody, final ApiCallback<MountPoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMountPointValidateBeforeCall(mountPointBody, _callback);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Mount point destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyMountPointCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyMountPointValidateBeforeCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling destroyMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = destroyMountPointCall(mountPointId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific mount point.
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Mount point destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyMountPoint(String mountPointId) throws ApiException {
        destroyMountPointWithHttpInfo(mountPointId);
    }

    /**
     * Destroys a specific mount point.
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Mount point destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyMountPointWithHttpInfo(String mountPointId) throws ApiException {
        okhttp3.Call localVarCall = destroyMountPointValidateBeforeCall(mountPointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific mount point. (asynchronously)
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Mount point destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyMountPointAsync(String mountPointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyMountPointValidateBeforeCall(mountPointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexMountPoints
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of mount points. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexMountPointsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (scanInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scan_interval", scanInterval));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexMountPointsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexMountPointsCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all mount points.
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @return MountPointCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of mount points. </td><td>  -  </td></tr>
     </table>
     */
    public MountPointCollection indexMountPoints(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price) throws ApiException {
        ApiResponse<MountPointCollection> localVarResp = indexMountPointsWithHttpInfo(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price);
        return localVarResp.getData();
    }

    /**
     * Lists all mount points.
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;MountPointCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of mount points. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountPointCollection> indexMountPointsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price) throws ApiException {
        okhttp3.Call localVarCall = indexMountPointsValidateBeforeCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, null);
        Type localVarReturnType = new TypeToken<MountPointCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all mount points. (asynchronously)
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of mount points. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexMountPointsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ApiCallback<MountPointCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexMountPointsValidateBeforeCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, _callback);
        Type localVarReturnType = new TypeToken<MountPointCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountMountPointCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}/mount"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountMountPointValidateBeforeCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling mountMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = mountMountPointCall(mountPointId, _callback);
        return localVarCall;

    }

    /**
     * Mount Mount Point.
     * **API Key Scope**: mount_points / mount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountMountPoint(String mountPointId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountMountPointWithHttpInfo(mountPointId);
        return localVarResp.getData();
    }

    /**
     * Mount Mount Point.
     * **API Key Scope**: mount_points / mount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountMountPointWithHttpInfo(String mountPointId) throws ApiException {
        okhttp3.Call localVarCall = mountMountPointValidateBeforeCall(mountPointId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mount Mount Point. (asynchronously)
     * **API Key Scope**: mount_points / mount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountMountPointAsync(String mountPointId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountMountPointValidateBeforeCall(mountPointId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusMountPointCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}/mount"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusMountPointValidateBeforeCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling mountStatusMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusMountPointCall(mountPointId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Mount Point.
     * **API Key Scope**: mount_points / mount_status
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusMountPoint(String mountPointId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusMountPointWithHttpInfo(mountPointId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Mount Point.
     * **API Key Scope**: mount_points / mount_status
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusMountPointWithHttpInfo(String mountPointId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusMountPointValidateBeforeCall(mountPointId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Mount Point. (asynchronously)
     * **API Key Scope**: mount_points / mount_status
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusMountPointAsync(String mountPointId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusMountPointValidateBeforeCall(mountPointId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showMountPointCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showMountPointValidateBeforeCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling showMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = showMountPointCall(mountPointId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific mount point&#x60;.
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
     </table>
     */
    public MountPoint showMountPoint(String mountPointId) throws ApiException {
        ApiResponse<MountPoint> localVarResp = showMountPointWithHttpInfo(mountPointId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific mount point&#x60;.
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountPoint> showMountPointWithHttpInfo(String mountPointId) throws ApiException {
        okhttp3.Call localVarCall = showMountPointValidateBeforeCall(mountPointId, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific mount point&#x60;. (asynchronously)
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showMountPointAsync(String mountPointId, final ApiCallback<MountPoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = showMountPointValidateBeforeCall(mountPointId, _callback);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unmountMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmountMountPointCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}/mount"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unmountMountPointValidateBeforeCall(String mountPointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling unmountMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = unmountMountPointCall(mountPointId, _callback);
        return localVarCall;

    }

    /**
     * Unmount Mount Point.
     * **API Key Scope**: mount_points / unmount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus unmountMountPoint(String mountPointId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = unmountMountPointWithHttpInfo(mountPointId);
        return localVarResp.getData();
    }

    /**
     * Unmount Mount Point.
     * **API Key Scope**: mount_points / unmount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> unmountMountPointWithHttpInfo(String mountPointId) throws ApiException {
        okhttp3.Call localVarCall = unmountMountPointValidateBeforeCall(mountPointId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unmount Mount Point. (asynchronously)
     * **API Key Scope**: mount_points / unmount
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmountMountPointAsync(String mountPointId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unmountMountPointValidateBeforeCall(mountPointId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMountPointCall(String mountPointId, MountPoint mountPointBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mountPointBody;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", localVarApiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMountPointValidateBeforeCall(String mountPointId, MountPoint mountPointBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling updateMountPoint(Async)");
        }
        
        // verify the required parameter 'mountPointBody' is set
        if (mountPointBody == null) {
            throw new ApiException("Missing the required parameter 'mountPointBody' when calling updateMountPoint(Async)");
        }
        

        okhttp3.Call localVarCall = updateMountPointCall(mountPointId, mountPointBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific mount point&#x60;.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public MountPoint updateMountPoint(String mountPointId, MountPoint mountPointBody) throws ApiException {
        ApiResponse<MountPoint> localVarResp = updateMountPointWithHttpInfo(mountPointId, mountPointBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific mount point&#x60;.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountPoint> updateMountPointWithHttpInfo(String mountPointId, MountPoint mountPointBody) throws ApiException {
        okhttp3.Call localVarCall = updateMountPointValidateBeforeCall(mountPointId, mountPointBody, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific mount point&#x60;. (asynchronously)
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific mount point. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMountPointAsync(String mountPointId, MountPoint mountPointBody, final ApiCallback<MountPoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMountPointValidateBeforeCall(mountPointId, mountPointBody, _callback);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
