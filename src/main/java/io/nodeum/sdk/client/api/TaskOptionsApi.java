/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.TaskOption;
import io.nodeum.sdk.client.model.TaskOptionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskOptionsApi {
    private ApiClient localVarApiClient;

    public TaskOptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskOptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTaskOption
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskOptionCall(String taskId, TaskOption taskOptionBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskOptionBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_options"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskOptionValidateBeforeCall(String taskId, TaskOption taskOptionBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskOption(Async)");
        }
        
        // verify the required parameter 'taskOptionBody' is set
        if (taskOptionBody == null) {
            throw new ApiException("Missing the required parameter 'taskOptionBody' when calling createTaskOption(Async)");
        }
        

        okhttp3.Call localVarCall = createTaskOptionCall(taskId, taskOptionBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new task option.
     * **API Key Scope**: task_options / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionBody  (required)
     * @return TaskOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskOption createTaskOption(String taskId, TaskOption taskOptionBody) throws ApiException {
        ApiResponse<TaskOption> localVarResp = createTaskOptionWithHttpInfo(taskId, taskOptionBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new task option.
     * **API Key Scope**: task_options / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionBody  (required)
     * @return ApiResponse&lt;TaskOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskOption> createTaskOptionWithHttpInfo(String taskId, TaskOption taskOptionBody) throws ApiException {
        okhttp3.Call localVarCall = createTaskOptionValidateBeforeCall(taskId, taskOptionBody, null);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task option. (asynchronously)
     * **API Key Scope**: task_options / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskOptionAsync(String taskId, TaskOption taskOptionBody, final ApiCallback<TaskOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskOptionValidateBeforeCall(taskId, taskOptionBody, _callback);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTaskOption
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task option destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskOptionCall(String taskId, Integer taskOptionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_options/{task_option_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_option_id" + "\\}", localVarApiClient.escapeString(taskOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTaskOptionValidateBeforeCall(String taskId, Integer taskOptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTaskOption(Async)");
        }
        
        // verify the required parameter 'taskOptionId' is set
        if (taskOptionId == null) {
            throw new ApiException("Missing the required parameter 'taskOptionId' when calling destroyTaskOption(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTaskOptionCall(taskId, taskOptionId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific task option.
     * **API Key Scope**: task_options / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task option destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTaskOption(String taskId, Integer taskOptionId) throws ApiException {
        destroyTaskOptionWithHttpInfo(taskId, taskOptionId);
    }

    /**
     * Destroys a specific task option.
     * **API Key Scope**: task_options / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task option destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTaskOptionWithHttpInfo(String taskId, Integer taskOptionId) throws ApiException {
        okhttp3.Call localVarCall = destroyTaskOptionValidateBeforeCall(taskId, taskOptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific task option. (asynchronously)
     * **API Key Scope**: task_options / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task option destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskOptionAsync(String taskId, Integer taskOptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTaskOptionValidateBeforeCall(taskId, taskOptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTaskOptions
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param type Filter on type (optional)
     * @param value Filter on value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task options. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskOptionsCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String type, String value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_options"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTaskOptionsValidateBeforeCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String type, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTaskOptions(Async)");
        }
        

        okhttp3.Call localVarCall = indexTaskOptionsCall(taskId, limit, offset, sortBy, id, type, value, _callback);
        return localVarCall;

    }

    /**
     * Lists all task options.
     * **API Key Scope**: task_options / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param type Filter on type (optional)
     * @param value Filter on value (optional)
     * @return TaskOptionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task options. </td><td>  -  </td></tr>
     </table>
     */
    public TaskOptionCollection indexTaskOptions(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String type, String value) throws ApiException {
        ApiResponse<TaskOptionCollection> localVarResp = indexTaskOptionsWithHttpInfo(taskId, limit, offset, sortBy, id, type, value);
        return localVarResp.getData();
    }

    /**
     * Lists all task options.
     * **API Key Scope**: task_options / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param type Filter on type (optional)
     * @param value Filter on value (optional)
     * @return ApiResponse&lt;TaskOptionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task options. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskOptionCollection> indexTaskOptionsWithHttpInfo(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String type, String value) throws ApiException {
        okhttp3.Call localVarCall = indexTaskOptionsValidateBeforeCall(taskId, limit, offset, sortBy, id, type, value, null);
        Type localVarReturnType = new TypeToken<TaskOptionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all task options. (asynchronously)
     * **API Key Scope**: task_options / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param type Filter on type (optional)
     * @param value Filter on value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task options. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskOptionsAsync(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String type, String value, final ApiCallback<TaskOptionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTaskOptionsValidateBeforeCall(taskId, limit, offset, sortBy, id, type, value, _callback);
        Type localVarReturnType = new TypeToken<TaskOptionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTaskOption
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskOptionCall(String taskId, Integer taskOptionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_options/{task_option_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_option_id" + "\\}", localVarApiClient.escapeString(taskOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskOptionValidateBeforeCall(String taskId, Integer taskOptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskOption(Async)");
        }
        
        // verify the required parameter 'taskOptionId' is set
        if (taskOptionId == null) {
            throw new ApiException("Missing the required parameter 'taskOptionId' when calling showTaskOption(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskOptionCall(taskId, taskOptionId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific task option.
     * **API Key Scope**: task_options / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @return TaskOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
     </table>
     */
    public TaskOption showTaskOption(String taskId, Integer taskOptionId) throws ApiException {
        ApiResponse<TaskOption> localVarResp = showTaskOptionWithHttpInfo(taskId, taskOptionId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific task option.
     * **API Key Scope**: task_options / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @return ApiResponse&lt;TaskOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskOption> showTaskOptionWithHttpInfo(String taskId, Integer taskOptionId) throws ApiException {
        okhttp3.Call localVarCall = showTaskOptionValidateBeforeCall(taskId, taskOptionId, null);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific task option. (asynchronously)
     * **API Key Scope**: task_options / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskOptionAsync(String taskId, Integer taskOptionId, final ApiCallback<TaskOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskOptionValidateBeforeCall(taskId, taskOptionId, _callback);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskOption
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param taskOptionBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskOptionCall(String taskId, Integer taskOptionId, TaskOption taskOptionBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskOptionBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_options/{task_option_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_option_id" + "\\}", localVarApiClient.escapeString(taskOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskOptionValidateBeforeCall(String taskId, Integer taskOptionId, TaskOption taskOptionBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskOption(Async)");
        }
        
        // verify the required parameter 'taskOptionId' is set
        if (taskOptionId == null) {
            throw new ApiException("Missing the required parameter 'taskOptionId' when calling updateTaskOption(Async)");
        }
        
        // verify the required parameter 'taskOptionBody' is set
        if (taskOptionBody == null) {
            throw new ApiException("Missing the required parameter 'taskOptionBody' when calling updateTaskOption(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskOptionCall(taskId, taskOptionId, taskOptionBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific task option.
     * **API Key Scope**: task_options / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param taskOptionBody  (required)
     * @return TaskOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskOption updateTaskOption(String taskId, Integer taskOptionId, TaskOption taskOptionBody) throws ApiException {
        ApiResponse<TaskOption> localVarResp = updateTaskOptionWithHttpInfo(taskId, taskOptionId, taskOptionBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific task option.
     * **API Key Scope**: task_options / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param taskOptionBody  (required)
     * @return ApiResponse&lt;TaskOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskOption> updateTaskOptionWithHttpInfo(String taskId, Integer taskOptionId, TaskOption taskOptionBody) throws ApiException {
        okhttp3.Call localVarCall = updateTaskOptionValidateBeforeCall(taskId, taskOptionId, taskOptionBody, null);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific task option. (asynchronously)
     * **API Key Scope**: task_options / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskOptionId Numeric ID of task option. (required)
     * @param taskOptionBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task option. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskOptionAsync(String taskId, Integer taskOptionId, TaskOption taskOptionBody, final ApiCallback<TaskOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskOptionValidateBeforeCall(taskId, taskOptionId, taskOptionBody, _callback);
        Type localVarReturnType = new TypeToken<TaskOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
