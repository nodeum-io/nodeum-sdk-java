/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;
import io.nodeum.client.model.Pool;
import io.nodeum.client.model.PoolCollection;
import io.nodeum.client.model.PoolUp;
import io.nodeum.client.model.PrimaryScan;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoolsApi
 */
@Ignore
public class PoolsApiTest {

    private final PoolsApi api = new PoolsApi();

    
    /**
     * Creates a new pool.
     *
     * **API Key Scope**: pools / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPoolTest() throws ApiException {
        PoolUp poolBody = null;
        Pool response = api.createPool(poolBody);

        // TODO: test validations
    }
    
    /**
     * Set a new primary pool scan option.
     *
     * **API Key Scope**: primary_scans / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPrimaryScanTest() throws ApiException {
        String poolId = null;
        PrimaryScan primaryScanBody = null;
        PrimaryScan response = api.createPrimaryScan(poolId, primaryScanBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific tape pool.
     *
     * **API Key Scope**: pools / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyPoolTest() throws ApiException {
        String poolId = null;
        api.destroyPool(poolId);

        // TODO: test validations
    }
    
    /**
     * Disable the primary pool scan.
     *
     * **API Key Scope**: primary_scans / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyPrimaryScanTest() throws ApiException {
        String poolId = null;
        api.destroyPrimaryScan(poolId);

        // TODO: test validations
    }
    
    /**
     * Lists all pools.
     *
     * **API Key Scope**: pools / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexPoolsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String comment = null;
        String type = null;
        String content = null;
        String primaryId = null;
        PoolCollection response = api.indexPools(limit, offset, sortBy, id, name, comment, type, content, primaryId);

        // TODO: test validations
    }
    
    /**
     * Mount Pool.
     *
     * **API Key Scope**: pools / mount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountPoolTest() throws ApiException {
        String poolId = null;
        MountStatus response = api.mountPool(poolId);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Pool.
     *
     * **API Key Scope**: pools / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusPoolTest() throws ApiException {
        String poolId = null;
        MountStatus response = api.mountStatusPool(poolId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific pool.
     *
     * **API Key Scope**: pools / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showPoolTest() throws ApiException {
        String poolId = null;
        Pool response = api.showPool(poolId);

        // TODO: test validations
    }
    
    /**
     * Displays the primary pool scan status.
     *
     * **API Key Scope**: primary_scans / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showPrimaryScanTest() throws ApiException {
        String poolId = null;
        PrimaryScan response = api.showPrimaryScan(poolId);

        // TODO: test validations
    }
    
    /**
     * Synchronize a primary after a scan (for internal use only).
     *
     * **API Key Scope**: pools / sync_primary
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncPrimaryPoolTest() throws ApiException {
        String poolId = null;
        Integer tx = null;
        api.syncPrimaryPool(poolId, tx);

        // TODO: test validations
    }
    
    /**
     * Unmount Pool.
     *
     * **API Key Scope**: pools / unmount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmountPoolTest() throws ApiException {
        String poolId = null;
        MountStatus response = api.unmountPool(poolId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific pool.
     *
     * **API Key Scope**: pools / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePoolTest() throws ApiException {
        String poolId = null;
        PoolUp poolBody = null;
        Pool response = api.updatePool(poolId, poolBody);

        // TODO: test validations
    }
    
    /**
     * Updates the existing primary pool scan option.
     *
     * **API Key Scope**: primary_scans / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePrimaryScanTest() throws ApiException {
        String poolId = null;
        PrimaryScan primaryScanBody = null;
        PrimaryScan response = api.updatePrimaryScan(poolId, primaryScanBody);

        // TODO: test validations
    }
    
}
