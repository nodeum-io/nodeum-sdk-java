/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.TaskExecution;
import io.nodeum.client.model.TaskExecutionCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskExecutionsApi
 */
@Ignore
public class TaskExecutionsApiTest {

    private final TaskExecutionsApi api = new TaskExecutionsApi();

    
    /**
     * Lists all task executions.
     *
     * **API Key Scope**: task_executions / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTaskExecutionsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        Boolean completeList = null;
        String id = null;
        String taskId = null;
        String name = null;
        String workflowType = null;
        String workflowAction = null;
        String sourceType = null;
        String destinationType = null;
        String status = null;
        String logTime = null;
        String jobStarted = null;
        String jobFinished = null;
        String creationDate = null;
        String modificationDate = null;
        String toProcessSize = null;
        String processedSize = null;
        String toProcessFiles = null;
        String processedFiles = null;
        String finalizedFiles = null;
        String estimationTime = null;
        String bandwidth = null;
        TaskExecutionCollection response = api.indexTaskExecutions(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);

        // TODO: test validations
    }
    
    /**
     * Lists all task executions.
     *
     * **API Key Scope**: task_executions / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTaskExecutionsByTaskTest() throws ApiException {
        String taskId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String workflowType = null;
        String workflowAction = null;
        String sourceType = null;
        String destinationType = null;
        String status = null;
        String logTime = null;
        String jobStarted = null;
        String jobFinished = null;
        String toProcessSize = null;
        String processedSize = null;
        String toProcessFiles = null;
        String processedFiles = null;
        String finalizedFiles = null;
        String estimationTime = null;
        String bandwidth = null;
        TaskExecutionCollection response = api.indexTaskExecutionsByTask(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);

        // TODO: test validations
    }
    
    /**
     * Displays a specific task execution.
     *
     * **API Key Scope**: task_executions / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTaskExecutionTest() throws ApiException {
        String taskExecutionId = null;
        TaskExecution response = api.showTaskExecution(taskExecutionId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific task execution.
     *
     * **API Key Scope**: task_executions / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTaskExecutionByTaskTest() throws ApiException {
        String taskId = null;
        String taskExecutionId = null;
        TaskExecution response = api.showTaskExecutionByTask(taskId, taskExecutionId);

        // TODO: test validations
    }
    
}
