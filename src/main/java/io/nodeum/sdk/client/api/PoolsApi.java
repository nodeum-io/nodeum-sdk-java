/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.MountStatus;
import io.nodeum.sdk.client.model.Pool;
import io.nodeum.sdk.client.model.PoolCollection;
import io.nodeum.sdk.client.model.PoolUp;
import io.nodeum.sdk.client.model.PrimaryScan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoolsApi {
    private ApiClient localVarApiClient;

    public PoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createPool
     * @param poolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPoolCall(PoolUp poolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = poolBody;

        // create path and map variables
        String localVarPath = "/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPoolValidateBeforeCall(PoolUp poolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolBody' is set
        if (poolBody == null) {
            throw new ApiException("Missing the required parameter 'poolBody' when calling createPool(Async)");
        }
        

        okhttp3.Call localVarCall = createPoolCall(poolBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new pool.
     * **API Key Scope**: pools / create
     * @param poolBody  (required)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Pool createPool(PoolUp poolBody) throws ApiException {
        ApiResponse<Pool> localVarResp = createPoolWithHttpInfo(poolBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new pool.
     * **API Key Scope**: pools / create
     * @param poolBody  (required)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> createPoolWithHttpInfo(PoolUp poolBody) throws ApiException {
        okhttp3.Call localVarCall = createPoolValidateBeforeCall(poolBody, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new pool. (asynchronously)
     * **API Key Scope**: pools / create
     * @param poolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPoolAsync(PoolUp poolBody, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPoolValidateBeforeCall(poolBody, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPrimaryScan
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrimaryScanCall(String poolId, PrimaryScan primaryScanBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = primaryScanBody;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/primary_scan"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPrimaryScanValidateBeforeCall(String poolId, PrimaryScan primaryScanBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling createPrimaryScan(Async)");
        }
        
        // verify the required parameter 'primaryScanBody' is set
        if (primaryScanBody == null) {
            throw new ApiException("Missing the required parameter 'primaryScanBody' when calling createPrimaryScan(Async)");
        }
        

        okhttp3.Call localVarCall = createPrimaryScanCall(poolId, primaryScanBody, _callback);
        return localVarCall;

    }

    /**
     * Set a new primary pool scan option.
     * **API Key Scope**: primary_scans / create
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @return PrimaryScan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public PrimaryScan createPrimaryScan(String poolId, PrimaryScan primaryScanBody) throws ApiException {
        ApiResponse<PrimaryScan> localVarResp = createPrimaryScanWithHttpInfo(poolId, primaryScanBody);
        return localVarResp.getData();
    }

    /**
     * Set a new primary pool scan option.
     * **API Key Scope**: primary_scans / create
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @return ApiResponse&lt;PrimaryScan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrimaryScan> createPrimaryScanWithHttpInfo(String poolId, PrimaryScan primaryScanBody) throws ApiException {
        okhttp3.Call localVarCall = createPrimaryScanValidateBeforeCall(poolId, primaryScanBody, null);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a new primary pool scan option. (asynchronously)
     * **API Key Scope**: primary_scans / create
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPrimaryScanAsync(String poolId, PrimaryScan primaryScanBody, final ApiCallback<PrimaryScan> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPrimaryScanValidateBeforeCall(poolId, primaryScanBody, _callback);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyPoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyPoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling destroyPool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyPoolCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific tape pool.
     * **API Key Scope**: pools / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyPool(String poolId) throws ApiException {
        destroyPoolWithHttpInfo(poolId);
    }

    /**
     * Destroys a specific tape pool.
     * **API Key Scope**: pools / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyPoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = destroyPoolValidateBeforeCall(poolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific tape pool. (asynchronously)
     * **API Key Scope**: pools / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyPoolAsync(String poolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyPoolValidateBeforeCall(poolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyPrimaryScan
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Primary pool scan disabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyPrimaryScanCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/primary_scan"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyPrimaryScanValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling destroyPrimaryScan(Async)");
        }
        

        okhttp3.Call localVarCall = destroyPrimaryScanCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Disable the primary pool scan.
     * **API Key Scope**: primary_scans / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Primary pool scan disabled. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyPrimaryScan(String poolId) throws ApiException {
        destroyPrimaryScanWithHttpInfo(poolId);
    }

    /**
     * Disable the primary pool scan.
     * **API Key Scope**: primary_scans / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Primary pool scan disabled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyPrimaryScanWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = destroyPrimaryScanValidateBeforeCall(poolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable the primary pool scan. (asynchronously)
     * **API Key Scope**: primary_scans / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Primary pool scan disabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyPrimaryScanAsync(String poolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyPrimaryScanValidateBeforeCall(poolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexPools
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param content Filter on content (optional)
     * @param primaryId Filter on primary id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexPoolsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String content, String primaryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (primaryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_id", primaryId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexPoolsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String content, String primaryId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexPoolsCall(limit, offset, sortBy, id, name, comment, type, content, primaryId, _callback);
        return localVarCall;

    }

    /**
     * Lists all pools.
     * **API Key Scope**: pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param content Filter on content (optional)
     * @param primaryId Filter on primary id (optional)
     * @return PoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pools. </td><td>  -  </td></tr>
     </table>
     */
    public PoolCollection indexPools(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String content, String primaryId) throws ApiException {
        ApiResponse<PoolCollection> localVarResp = indexPoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type, content, primaryId);
        return localVarResp.getData();
    }

    /**
     * Lists all pools.
     * **API Key Scope**: pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param content Filter on content (optional)
     * @param primaryId Filter on primary id (optional)
     * @return ApiResponse&lt;PoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pools. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PoolCollection> indexPoolsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String content, String primaryId) throws ApiException {
        okhttp3.Call localVarCall = indexPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, content, primaryId, null);
        Type localVarReturnType = new TypeToken<PoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all pools. (asynchronously)
     * **API Key Scope**: pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param content Filter on content (optional)
     * @param primaryId Filter on primary id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexPoolsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String content, String primaryId, final ApiCallback<PoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, content, primaryId, _callback);
        Type localVarReturnType = new TypeToken<PoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountPoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/mount"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountPoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling mountPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountPoolCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Mount Pool.
     * **API Key Scope**: pools / mount
     * @param poolId Numeric ID, or name of pool. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountPool(String poolId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountPoolWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Mount Pool.
     * **API Key Scope**: pools / mount
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountPoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = mountPoolValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mount Pool. (asynchronously)
     * **API Key Scope**: pools / mount
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountPoolAsync(String poolId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountPoolValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusPoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/mount"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusPoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling mountStatusPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusPoolCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Pool.
     * **API Key Scope**: pools / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusPool(String poolId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusPoolWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Pool.
     * **API Key Scope**: pools / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusPoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusPoolValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Pool. (asynchronously)
     * **API Key Scope**: pools / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusPoolAsync(String poolId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusPoolValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showPoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showPool(Async)");
        }
        

        okhttp3.Call localVarCall = showPoolCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific pool.
     * **API Key Scope**: pools / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
     </table>
     */
    public Pool showPool(String poolId) throws ApiException {
        ApiResponse<Pool> localVarResp = showPoolWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific pool.
     * **API Key Scope**: pools / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> showPoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = showPoolValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific pool. (asynchronously)
     * **API Key Scope**: pools / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPoolAsync(String poolId, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = showPoolValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showPrimaryScan
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPrimaryScanCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/primary_scan"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showPrimaryScanValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showPrimaryScan(Async)");
        }
        

        okhttp3.Call localVarCall = showPrimaryScanCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Displays the primary pool scan status.
     * **API Key Scope**: primary_scans / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @return PrimaryScan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
     </table>
     */
    public PrimaryScan showPrimaryScan(String poolId) throws ApiException {
        ApiResponse<PrimaryScan> localVarResp = showPrimaryScanWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Displays the primary pool scan status.
     * **API Key Scope**: primary_scans / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;PrimaryScan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrimaryScan> showPrimaryScanWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = showPrimaryScanValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays the primary pool scan status. (asynchronously)
     * **API Key Scope**: primary_scans / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPrimaryScanAsync(String poolId, final ApiCallback<PrimaryScan> _callback) throws ApiException {

        okhttp3.Call localVarCall = showPrimaryScanValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncPrimaryPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tx New transaction number. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Synchronization triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncPrimaryPoolCall(String poolId, Integer tx, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/sync"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx", tx));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncPrimaryPoolValidateBeforeCall(String poolId, Integer tx, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling syncPrimaryPool(Async)");
        }
        
        // verify the required parameter 'tx' is set
        if (tx == null) {
            throw new ApiException("Missing the required parameter 'tx' when calling syncPrimaryPool(Async)");
        }
        

        okhttp3.Call localVarCall = syncPrimaryPoolCall(poolId, tx, _callback);
        return localVarCall;

    }

    /**
     * Synchronize a primary after a scan (for internal use only).
     * **API Key Scope**: pools / sync_primary
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tx New transaction number. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Synchronization triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void syncPrimaryPool(String poolId, Integer tx) throws ApiException {
        syncPrimaryPoolWithHttpInfo(poolId, tx);
    }

    /**
     * Synchronize a primary after a scan (for internal use only).
     * **API Key Scope**: pools / sync_primary
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tx New transaction number. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Synchronization triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> syncPrimaryPoolWithHttpInfo(String poolId, Integer tx) throws ApiException {
        okhttp3.Call localVarCall = syncPrimaryPoolValidateBeforeCall(poolId, tx, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Synchronize a primary after a scan (for internal use only). (asynchronously)
     * **API Key Scope**: pools / sync_primary
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tx New transaction number. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Synchronization triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncPrimaryPoolAsync(String poolId, Integer tx, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncPrimaryPoolValidateBeforeCall(poolId, tx, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unmountPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmountPoolCall(String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/mount"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unmountPoolValidateBeforeCall(String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling unmountPool(Async)");
        }
        

        okhttp3.Call localVarCall = unmountPoolCall(poolId, _callback);
        return localVarCall;

    }

    /**
     * Unmount Pool.
     * **API Key Scope**: pools / unmount
     * @param poolId Numeric ID, or name of pool. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus unmountPool(String poolId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = unmountPoolWithHttpInfo(poolId);
        return localVarResp.getData();
    }

    /**
     * Unmount Pool.
     * **API Key Scope**: pools / unmount
     * @param poolId Numeric ID, or name of pool. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> unmountPoolWithHttpInfo(String poolId) throws ApiException {
        okhttp3.Call localVarCall = unmountPoolValidateBeforeCall(poolId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unmount Pool. (asynchronously)
     * **API Key Scope**: pools / unmount
     * @param poolId Numeric ID, or name of pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmountPoolAsync(String poolId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unmountPoolValidateBeforeCall(poolId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param poolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePoolCall(String poolId, PoolUp poolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = poolBody;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePoolValidateBeforeCall(String poolId, PoolUp poolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updatePool(Async)");
        }
        
        // verify the required parameter 'poolBody' is set
        if (poolBody == null) {
            throw new ApiException("Missing the required parameter 'poolBody' when calling updatePool(Async)");
        }
        

        okhttp3.Call localVarCall = updatePoolCall(poolId, poolBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific pool.
     * **API Key Scope**: pools / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param poolBody  (required)
     * @return Pool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Pool updatePool(String poolId, PoolUp poolBody) throws ApiException {
        ApiResponse<Pool> localVarResp = updatePoolWithHttpInfo(poolId, poolBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific pool.
     * **API Key Scope**: pools / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param poolBody  (required)
     * @return ApiResponse&lt;Pool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pool> updatePoolWithHttpInfo(String poolId, PoolUp poolBody) throws ApiException {
        okhttp3.Call localVarCall = updatePoolValidateBeforeCall(poolId, poolBody, null);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific pool. (asynchronously)
     * **API Key Scope**: pools / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param poolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePoolAsync(String poolId, PoolUp poolBody, final ApiCallback<Pool> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePoolValidateBeforeCall(poolId, poolBody, _callback);
        Type localVarReturnType = new TypeToken<Pool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePrimaryScan
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePrimaryScanCall(String poolId, PrimaryScan primaryScanBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = primaryScanBody;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/primary_scan"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePrimaryScanValidateBeforeCall(String poolId, PrimaryScan primaryScanBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updatePrimaryScan(Async)");
        }
        
        // verify the required parameter 'primaryScanBody' is set
        if (primaryScanBody == null) {
            throw new ApiException("Missing the required parameter 'primaryScanBody' when calling updatePrimaryScan(Async)");
        }
        

        okhttp3.Call localVarCall = updatePrimaryScanCall(poolId, primaryScanBody, _callback);
        return localVarCall;

    }

    /**
     * Updates the existing primary pool scan option.
     * **API Key Scope**: primary_scans / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @return PrimaryScan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public PrimaryScan updatePrimaryScan(String poolId, PrimaryScan primaryScanBody) throws ApiException {
        ApiResponse<PrimaryScan> localVarResp = updatePrimaryScanWithHttpInfo(poolId, primaryScanBody);
        return localVarResp.getData();
    }

    /**
     * Updates the existing primary pool scan option.
     * **API Key Scope**: primary_scans / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @return ApiResponse&lt;PrimaryScan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrimaryScan> updatePrimaryScanWithHttpInfo(String poolId, PrimaryScan primaryScanBody) throws ApiException {
        okhttp3.Call localVarCall = updatePrimaryScanValidateBeforeCall(poolId, primaryScanBody, null);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the existing primary pool scan option. (asynchronously)
     * **API Key Scope**: primary_scans / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param primaryScanBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The primary pool scan status. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePrimaryScanAsync(String poolId, PrimaryScan primaryScanBody, final ApiCallback<PrimaryScan> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePrimaryScanValidateBeforeCall(poolId, primaryScanBody, _callback);
        Type localVarReturnType = new TypeToken<PrimaryScan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
