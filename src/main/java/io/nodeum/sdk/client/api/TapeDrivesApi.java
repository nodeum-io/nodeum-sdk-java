/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.ActiveJobStatus;
import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.TapeDrive;
import io.nodeum.sdk.client.model.TapeDriveCollection;
import io.nodeum.sdk.client.model.TapeDriveDeviceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapeDrivesApi {
    private ApiClient localVarApiClient;

    public TapeDrivesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapeDrivesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapeDriveByTapeLibraryCall(String tapeLibraryId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling createTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling createTapeDriveByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = createTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new tape drive.
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDrive createTapeDriveByTapeLibrary(String tapeLibraryId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> localVarResp = createTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new tape drive.
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDrive> createTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, TapeDrive tapeDriveBody) throws ApiException {
        okhttp3.Call localVarCall = createTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveBody, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapeDriveByTapeLibraryAsync(String tapeLibraryId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveBody, _callback);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeDriveCall(String tapeDriveId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTapeDriveValidateBeforeCall(String tapeDriveId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling destroyTapeDrive(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTapeDriveCall(tapeDriveId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTapeDrive(String tapeDriveId) throws ApiException {
        destroyTapeDriveWithHttpInfo(tapeDriveId);
    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTapeDriveWithHttpInfo(String tapeDriveId) throws ApiException {
        okhttp3.Call localVarCall = destroyTapeDriveValidateBeforeCall(tapeDriveId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeDriveAsync(String tapeDriveId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTapeDriveValidateBeforeCall(tapeDriveId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling destroyTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling destroyTapeDriveByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId) throws ApiException {
        destroyTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId) throws ApiException {
        okhttp3.Call localVarCall = destroyTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape drive destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapeDriveDevices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDriveDevicesCall(String tapeLibraryId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/-/devices"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeDriveDevicesValidateBeforeCall(String tapeLibraryId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapeDriveDevices(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling indexTapeDriveDevices(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapeDriveDevicesCall(tapeLibraryId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Lists tape drives devices.
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (required)
     * @return TapeDriveDeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDriveDeviceCollection indexTapeDriveDevices(String tapeLibraryId, String jobId) throws ApiException {
        ApiResponse<TapeDriveDeviceCollection> localVarResp = indexTapeDriveDevicesWithHttpInfo(tapeLibraryId, jobId);
        return localVarResp.getData();
    }

    /**
     * Lists tape drives devices.
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (required)
     * @return ApiResponse&lt;TapeDriveDeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDriveDeviceCollection> indexTapeDriveDevicesWithHttpInfo(String tapeLibraryId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = indexTapeDriveDevicesValidateBeforeCall(tapeLibraryId, jobId, null);
        Type localVarReturnType = new TypeToken<TapeDriveDeviceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists tape drives devices. (asynchronously)
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDriveDevicesAsync(String tapeLibraryId, String jobId, final ApiCallback<TapeDriveDeviceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeDriveDevicesValidateBeforeCall(tapeLibraryId, jobId, _callback);
        Type localVarReturnType = new TypeToken<TapeDriveDeviceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapeDrives
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDrivesCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tapeLibraryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tape_library_id", tapeLibraryId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (scsiAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scsi_address", scsiAddress));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (firmware != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firmware", firmware));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (sgdevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sgdevice", sgdevice));
        }

        if (libso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libso", libso));
        }

        if (acs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acs", acs));
        }

        if (lsm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lsm", lsm));
        }

        if (panel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("panel", panel));
        }

        if (transport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transport", transport));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (mountCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mount_count", mountCount));
        }

        if (useTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_to", useTo));
        }

        if (useBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_by", useBy));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        if (useFileProcessedSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_processed_size", useFileProcessedSize));
        }

        if (useFileSizeToProcess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_size_to_process", useFileSizeToProcess));
        }

        if (useFileNameProcessed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_name_processed", useFileNameProcessed));
        }

        if (bandwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bandwidth", bandwidth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeDrivesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTapeDrivesCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, _callback);
        return localVarCall;

    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TapeDriveCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDriveCollection indexTapeDrives(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        ApiResponse<TapeDriveCollection> localVarResp = indexTapeDrivesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
        return localVarResp.getData();
    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TapeDriveCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDriveCollection> indexTapeDrivesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        okhttp3.Call localVarCall = indexTapeDrivesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, null);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tape drives. (asynchronously)
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDrivesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback<TapeDriveCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeDrivesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, _callback);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapeDrivesByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDrivesByTapeLibraryCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (scsiAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scsi_address", scsiAddress));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (firmware != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firmware", firmware));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (sgdevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sgdevice", sgdevice));
        }

        if (libso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libso", libso));
        }

        if (acs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acs", acs));
        }

        if (lsm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lsm", lsm));
        }

        if (panel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("panel", panel));
        }

        if (transport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transport", transport));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (mountCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mount_count", mountCount));
        }

        if (useTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_to", useTo));
        }

        if (useBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_by", useBy));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        if (useFileProcessedSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_processed_size", useFileProcessedSize));
        }

        if (useFileSizeToProcess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_size_to_process", useFileSizeToProcess));
        }

        if (useFileNameProcessed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_file_name_processed", useFileNameProcessed));
        }

        if (bandwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bandwidth", bandwidth));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeDrivesByTapeLibraryValidateBeforeCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapeDrivesByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapeDrivesByTapeLibraryCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, _callback);
        return localVarCall;

    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TapeDriveCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDriveCollection indexTapeDrivesByTapeLibrary(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        ApiResponse<TapeDriveCollection> localVarResp = indexTapeDrivesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
        return localVarResp.getData();
    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TapeDriveCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDriveCollection> indexTapeDrivesByTapeLibraryWithHttpInfo(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        okhttp3.Call localVarCall = indexTapeDrivesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, null);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tape drives. (asynchronously)
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param barcode Filter on barcode (optional)
     * @param taskId Filter on task id (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape drives. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeDrivesByTapeLibraryAsync(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String barcode, String taskId, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback<TapeDriveCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeDrivesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, _callback);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeDriveCall(String tapeDriveId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeDriveValidateBeforeCall(String tapeDriveId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling showTapeDrive(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeDriveCall(tapeDriveId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDrive showTapeDrive(String tapeDriveId) throws ApiException {
        ApiResponse<TapeDrive> localVarResp = showTapeDriveWithHttpInfo(tapeDriveId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDrive> showTapeDriveWithHttpInfo(String tapeDriveId) throws ApiException {
        okhttp3.Call localVarCall = showTapeDriveValidateBeforeCall(tapeDriveId, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeDriveAsync(String tapeDriveId, final ApiCallback<TapeDrive> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeDriveValidateBeforeCall(tapeDriveId, _callback);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling showTapeDriveByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDrive showTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId) throws ApiException {
        ApiResponse<TapeDrive> localVarResp = showTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDrive> showTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId) throws ApiException {
        okhttp3.Call localVarCall = showTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, final ApiCallback<TapeDrive> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, _callback);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeDriveCall(String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTapeDriveValidateBeforeCall(String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling updateTapeDrive(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling updateTapeDrive(Async)");
        }
        

        okhttp3.Call localVarCall = updateTapeDriveCall(tapeDriveId, tapeDriveBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDrive updateTapeDrive(String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> localVarResp = updateTapeDriveWithHttpInfo(tapeDriveId, tapeDriveBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDrive> updateTapeDriveWithHttpInfo(String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        okhttp3.Call localVarCall = updateTapeDriveValidateBeforeCall(tapeDriveId, tapeDriveBody, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeDriveAsync(String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTapeDriveValidateBeforeCall(tapeDriveId, tapeDriveBody, _callback);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", localVarApiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = updateTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, tapeDriveBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapeDrive updateTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> localVarResp = updateTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId, tapeDriveBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeDrive> updateTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        okhttp3.Call localVarCall = updateTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, tapeDriveBody, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape drive. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, tapeDriveBody, _callback);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
