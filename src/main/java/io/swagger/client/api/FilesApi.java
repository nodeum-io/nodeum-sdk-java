/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.NodeumFileCollection;
import io.swagger.client.model.NodeumFileWithPath;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient apiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for filesChildren
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_parent_id}/children"
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenValidateBeforeCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildren(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenWithHttpInfo(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenWithHttpInfo(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenAsync(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByCloudPoolCall(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", apiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByCloudPoolValidateBeforeCall(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling filesChildrenByCloudPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByCloudPoolCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByCloudPool(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByCloudPoolWithHttpInfo(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByCloudPoolWithHttpInfo(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByCloudPoolValidateBeforeCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByCloudPoolAsync(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByCloudPoolValidateBeforeCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByContainerCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByContainerValidateBeforeCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling filesChildrenByContainer(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByContainerCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByContainer(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByContainerWithHttpInfo(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByContainerWithHttpInfo(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByContainerAsync(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByNasPoolCall(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByNasPoolValidateBeforeCall(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling filesChildrenByNasPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByNasPoolCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByNasPool(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByNasPoolWithHttpInfo(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByNasPoolWithHttpInfo(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByNasPoolValidateBeforeCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByNasPoolAsync(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByNasPoolValidateBeforeCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTapePoolCall(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", apiClient.escapeString(tapePoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByTapePoolValidateBeforeCall(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling filesChildrenByTapePool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTapePool(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByTapePoolCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByTapePool(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByTapePoolWithHttpInfo(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTapePoolWithHttpInfo(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByTapePoolValidateBeforeCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTapePoolAsync(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByTapePoolValidateBeforeCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByTaskValidateBeforeCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByTaskCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByTask(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByTaskWithHttpInfo(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskWithHttpInfo(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskAsync(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskExecutionCall(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecution(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByTaskExecution(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByTaskExecutionWithHttpInfo(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskExecutionAsync(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for filesChildrenByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", apiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call filesChildrenByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionByTaskCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection filesChildrenByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = filesChildrenByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call filesChildrenByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFiles
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesValidateBeforeCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexFilesCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFiles(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesWithHttpInfo(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesWithHttpInfo(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesAsync(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByCloudPoolCall(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", apiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByCloudPoolValidateBeforeCall(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling indexFilesByCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByCloudPoolCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByCloudPool(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByCloudPoolWithHttpInfo(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByCloudPoolWithHttpInfo(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByCloudPoolAsync(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByContainerCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByContainerValidateBeforeCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling indexFilesByContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByContainerCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByContainer(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByContainerWithHttpInfo(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByContainerWithHttpInfo(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByContainerAsync(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByNasPoolCall(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByNasPoolValidateBeforeCall(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling indexFilesByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByNasPoolCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByNasPool(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByNasPoolWithHttpInfo(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByNasPoolWithHttpInfo(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByNasPoolAsync(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTapePoolCall(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", apiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByTapePoolValidateBeforeCall(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling indexFilesByTapePool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByTapePoolCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByTapePool(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByTapePoolWithHttpInfo(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTapePoolWithHttpInfo(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTapePoolAsync(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByTaskValidateBeforeCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByTaskCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByTask(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByTaskWithHttpInfo(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskWithHttpInfo(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskAsync(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskExecutionCall(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecution(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByTaskExecutionCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByTaskExecution(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByTaskExecutionWithHttpInfo(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskExecutionAsync(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexFilesByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (fileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (permission != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("permission", permission));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (changeDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("change_date", changeDate));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (accessDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_date", accessDate));
        if (gid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gid", gid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexFilesByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = indexFilesByTaskExecutionByTaskCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileCollection indexFilesByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> resp = indexFilesByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return resp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        com.squareup.okhttp.Call call = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexFilesByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFile
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileCall(Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileValidateBeforeCall(Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFile(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileCall(fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFile(Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileWithHttpInfo(fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileWithHttpInfo(Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileValidateBeforeCall(fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileAsync(Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileValidateBeforeCall(fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByCloudPoolCall(String cloudPoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", apiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByCloudPoolValidateBeforeCall(String cloudPoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling showFileByCloudPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByCloudPoolCall(cloudPoolId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByCloudPool(String cloudPoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByCloudPoolWithHttpInfo(cloudPoolId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByCloudPoolWithHttpInfo(String cloudPoolId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByCloudPoolValidateBeforeCall(cloudPoolId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByCloudPoolAsync(String cloudPoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByCloudPoolValidateBeforeCall(cloudPoolId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByContainerCall(String containerId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByContainerValidateBeforeCall(String containerId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showFileByContainer(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByContainerCall(containerId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByContainer(String containerId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByContainerWithHttpInfo(containerId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByContainerWithHttpInfo(String containerId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByContainerValidateBeforeCall(containerId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByContainerAsync(String containerId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByContainerValidateBeforeCall(containerId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByNasPoolCall(String nasPoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByNasPoolValidateBeforeCall(String nasPoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showFileByNasPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByNasPoolCall(nasPoolId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByNasPool(String nasPoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByNasPoolWithHttpInfo(nasPoolId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByNasPoolWithHttpInfo(String nasPoolId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByNasPoolValidateBeforeCall(nasPoolId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByNasPoolAsync(String nasPoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByNasPoolValidateBeforeCall(nasPoolId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByTapePoolCall(String tapePoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", apiClient.escapeString(tapePoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByTapePoolValidateBeforeCall(String tapePoolId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling showFileByTapePool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTapePool(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByTapePoolCall(tapePoolId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByTapePool(String tapePoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByTapePoolWithHttpInfo(tapePoolId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByTapePoolWithHttpInfo(String tapePoolId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByTapePoolValidateBeforeCall(tapePoolId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByTapePoolAsync(String tapePoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByTapePoolValidateBeforeCall(tapePoolId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskCall(String taskId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByTaskValidateBeforeCall(String taskId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByTaskCall(taskId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByTask(String taskId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByTaskWithHttpInfo(taskId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskWithHttpInfo(String taskId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByTaskValidateBeforeCall(taskId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskAsync(String taskId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByTaskValidateBeforeCall(taskId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskExecutionCall(Long taskExecutionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecution(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByTaskExecutionCall(taskExecutionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByTaskExecution(Long taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskExecutionAsync(Long taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showFileByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showFileByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecutionByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = showFileByTaskExecutionByTaskCall(taskId, taskExecutionId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeumFileWithPath showFileByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> resp = showFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
        return resp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer fileId) throws ApiException {
        com.squareup.okhttp.Call call = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, null, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showFileByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
