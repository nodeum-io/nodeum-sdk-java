/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.CloudBucketSimpleCollection;
import io.nodeum.client.model.CloudConnector;
import io.nodeum.client.model.CloudConnectorCollection;
import io.nodeum.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudConnectorsApi
 */
@Ignore
public class CloudConnectorsApiTest {

    private final CloudConnectorsApi api = new CloudConnectorsApi();

    
    /**
     * Creates a new cloud connector.
     *
     * **API Key Scope**: cloud_connectors / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCloudConnectorTest() throws ApiException {
        CloudConnector cloudConnectorBody = null;
        CloudConnector response = api.createCloudConnector(cloudConnectorBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific cloud connector.
     *
     * **API Key Scope**: cloud_connectors / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        api.destroyCloudConnector(cloudConnectorId);

        // TODO: test validations
    }
    
    /**
     * Lists all cloud connectors.
     *
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudConnectorsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String url = null;
        String urlProxy = null;
        String provider = null;
        String region = null;
        String accessKey = null;
        CloudConnectorCollection response = api.indexCloudConnectors(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud connector.
     *
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        CloudConnector response = api.showCloudConnector(cloudConnectorId);

        // TODO: test validations
    }
    
    /**
     * Test an unsaved cloud connector.
     *
     * **API Key Scope**: cloud_connectors / test
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testCloudConnectorTest() throws ApiException {
        CloudConnector cloudConnectorBody = null;
        ActiveJobStatus response = api.testCloudConnector(cloudConnectorBody);

        // TODO: test validations
    }
    
    /**
     * Check result of cloud connector test job.
     *
     * **API Key Scope**: cloud_connectors / test
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testResultCloudConnectorTest() throws ApiException {
        String jobId = null;
        CloudBucketSimpleCollection response = api.testResultCloudConnector(jobId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud connector.
     *
     * **API Key Scope**: cloud_connectors / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        CloudConnector cloudConnectorBody = null;
        CloudConnector response = api.updateCloudConnector(cloudConnectorId, cloudConnectorBody);

        // TODO: test validations
    }
    
}
