/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.Task;
import io.swagger.client.model.TaskCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Ignore
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    
    /**
     * Creates a new task.
     *
     * **API Key Scope**: tasks / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        Task taskBody = null;
        Task response = api.createTask(taskBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific task.
     *
     * **API Key Scope**: tasks / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyTaskTest() throws ApiException {
        String taskId = null;
        api.destroyTask(taskId);

        // TODO: test validations
    }
    
    /**
     * Lists all tasks.
     *
     * **API Key Scope**: tasks / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTasksTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String comment = null;
        String type = null;
        String priority = null;
        String conflictResolution = null;
        String action = null;
        String activate = null;
        String creationDate = null;
        String creationUsername = null;
        String modificationDate = null;
        String modificationUsername = null;
        String jobStarted = null;
        String jobFinished = null;
        String status = null;
        String processedSize = null;
        String toProcessSize = null;
        TaskCollection response = api.indexTasks(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize);

        // TODO: test validations
    }
    
    /**
     * Displays a specific task.
     *
     * **API Key Scope**: tasks / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTaskTest() throws ApiException {
        String taskId = null;
        Task response = api.showTask(taskId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific task.
     *
     * **API Key Scope**: tasks / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String taskId = null;
        Task taskBody = null;
        Task response = api.updateTask(taskId, taskBody);

        // TODO: test validations
    }
    
}
