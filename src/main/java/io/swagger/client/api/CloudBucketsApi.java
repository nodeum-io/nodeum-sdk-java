/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.CloudBucket;
import io.swagger.client.model.CloudBucketCollection;
import io.swagger.client.model.CloudBucketSimpleCollection;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudBucketsApi {
    private ApiClient apiClient;

    public CloudBucketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudBucketsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for indexCloudBuckets
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsCall(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (cloudConnectorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cloud_connector_id", cloudConnectorId));
        if (cloudPoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cloud_pool_id", cloudPoolId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexCloudBucketsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexCloudBucketsCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucketCollection indexCloudBuckets(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> resp = indexCloudBucketsWithHttpInfo(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price);
        return resp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price) throws ApiException {
        com.squareup.okhttp.Call call = indexCloudBucketsValidateBeforeCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, null, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ApiCallback<CloudBucketCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexCloudBucketsValidateBeforeCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexCloudBucketsByCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsByCloudConnectorCall(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (cloudPoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cloud_pool_id", cloudPoolId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexCloudBucketsByCloudConnectorValidateBeforeCall(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling indexCloudBucketsByCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = indexCloudBucketsByCloudConnectorCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucketCollection indexCloudBucketsByCloudConnector(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> resp = indexCloudBucketsByCloudConnectorWithHttpInfo(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price);
        return resp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsByCloudConnectorWithHttpInfo(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price) throws ApiException {
        com.squareup.okhttp.Call call = indexCloudBucketsByCloudConnectorValidateBeforeCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, null, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsByCloudConnectorAsync(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ApiCallback<CloudBucketCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexCloudBucketsByCloudConnectorValidateBeforeCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexCloudBucketsByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsByCloudPoolCall(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/cloud_buckets"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", apiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (cloudConnectorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cloud_connector_id", cloudConnectorId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexCloudBucketsByCloudPoolValidateBeforeCall(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling indexCloudBucketsByCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexCloudBucketsByCloudPoolCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucketCollection indexCloudBucketsByCloudPool(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> resp = indexCloudBucketsByCloudPoolWithHttpInfo(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);
        return resp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsByCloudPoolWithHttpInfo(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price) throws ApiException {
        com.squareup.okhttp.Call call = indexCloudBucketsByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, null, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexCloudBucketsByCloudPoolAsync(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ApiCallback<CloudBucketCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexCloudBucketsByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showCloudBucket
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketCall(String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", apiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showCloudBucketValidateBeforeCall(String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucket(Async)");
        }
        

        com.squareup.okhttp.Call call = showCloudBucketCall(cloudBucketId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucket showCloudBucket(String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> resp = showCloudBucketWithHttpInfo(cloudBucketId);
        return resp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucket> showCloudBucketWithHttpInfo(String cloudBucketId) throws ApiException {
        com.squareup.okhttp.Call call = showCloudBucketValidateBeforeCall(cloudBucketId, null, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketAsync(String cloudBucketId, final ApiCallback<CloudBucket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showCloudBucketValidateBeforeCall(cloudBucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showCloudBucketByCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketByCloudConnectorCall(String cloudConnectorId, String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", apiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showCloudBucketByCloudConnectorValidateBeforeCall(String cloudConnectorId, String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling showCloudBucketByCloudConnector(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucketByCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = showCloudBucketByCloudConnectorCall(cloudConnectorId, cloudBucketId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucket showCloudBucketByCloudConnector(String cloudConnectorId, String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> resp = showCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId);
        return resp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucket> showCloudBucketByCloudConnectorWithHttpInfo(String cloudConnectorId, String cloudBucketId) throws ApiException {
        com.squareup.okhttp.Call call = showCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, null, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketByCloudConnectorAsync(String cloudConnectorId, String cloudBucketId, final ApiCallback<CloudBucket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showCloudBucketByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketByCloudPoolCall(String cloudPoolId, String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", apiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", apiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showCloudBucketByCloudPoolValidateBeforeCall(String cloudPoolId, String cloudBucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling showCloudBucketByCloudPool(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucketByCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = showCloudBucketByCloudPoolCall(cloudPoolId, cloudBucketId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucket showCloudBucketByCloudPool(String cloudPoolId, String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> resp = showCloudBucketByCloudPoolWithHttpInfo(cloudPoolId, cloudBucketId);
        return resp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucket> showCloudBucketByCloudPoolWithHttpInfo(String cloudPoolId, String cloudBucketId) throws ApiException {
        com.squareup.okhttp.Call call = showCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, null, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showCloudBucketByCloudPoolAsync(String cloudPoolId, String cloudBucketId, final ApiCallback<CloudBucket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncCloudBuckets
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncCloudBucketsCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncCloudBucketsValidateBeforeCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling syncCloudBuckets(Async)");
        }
        

        com.squareup.okhttp.Call call = syncCloudBucketsCall(cloudConnectorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActiveJobStatus syncCloudBuckets(String cloudConnectorId) throws ApiException {
        ApiResponse<ActiveJobStatus> resp = syncCloudBucketsWithHttpInfo(cloudConnectorId);
        return resp.getData();
    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActiveJobStatus> syncCloudBucketsWithHttpInfo(String cloudConnectorId) throws ApiException {
        com.squareup.okhttp.Call call = syncCloudBucketsValidateBeforeCall(cloudConnectorId, null, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent. (asynchronously)
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncCloudBucketsAsync(String cloudConnectorId, final ApiCallback<ActiveJobStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncCloudBucketsValidateBeforeCall(cloudConnectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for syncResultCloudBuckets
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncResultCloudBucketsCall(String cloudConnectorId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncResultCloudBucketsValidateBeforeCall(String cloudConnectorId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling syncResultCloudBuckets(Async)");
        }
        

        com.squareup.okhttp.Call call = syncResultCloudBucketsCall(cloudConnectorId, jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check result of cloud connector sync job.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @return CloudBucketSimpleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucketSimpleCollection syncResultCloudBuckets(String cloudConnectorId, String jobId) throws ApiException {
        ApiResponse<CloudBucketSimpleCollection> resp = syncResultCloudBucketsWithHttpInfo(cloudConnectorId, jobId);
        return resp.getData();
    }

    /**
     * Check result of cloud connector sync job.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;CloudBucketSimpleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucketSimpleCollection> syncResultCloudBucketsWithHttpInfo(String cloudConnectorId, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = syncResultCloudBucketsValidateBeforeCall(cloudConnectorId, jobId, null, null);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check result of cloud connector sync job. (asynchronously)
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncResultCloudBucketsAsync(String cloudConnectorId, String jobId, final ApiCallback<CloudBucketSimpleCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncResultCloudBucketsValidateBeforeCall(cloudConnectorId, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
