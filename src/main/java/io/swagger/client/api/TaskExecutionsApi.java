/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.TaskExecution;
import io.swagger.client.model.TaskExecutionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskExecutionsApi {
    private ApiClient apiClient;

    public TaskExecutionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskExecutionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for indexTaskExecutions
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTaskExecutionsCall(Integer limit, Integer offset, List<String> sortBy, String id, String taskId, String name, String type, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("task_id", taskId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (logTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("log_time", logTime));
        if (jobStarted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_started", jobStarted));
        if (jobFinished != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_finished", jobFinished));
        if (toProcessSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_process_size", toProcessSize));
        if (processedSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processed_size", processedSize));
        if (toProcessFiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_process_files", toProcessFiles));
        if (processedFiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processed_files", processedFiles));
        if (finalizedFiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("finalized_files", finalizedFiles));
        if (estimationTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("estimation_time", estimationTime));
        if (bandwidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bandwidth", bandwidth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTaskExecutionsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String taskId, String name, String type, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTaskExecutionsCall(limit, offset, sortBy, id, taskId, name, type, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TaskExecutionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskExecutionCollection indexTaskExecutions(Integer limit, Integer offset, List<String> sortBy, String id, String taskId, String name, String type, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        ApiResponse<TaskExecutionCollection> resp = indexTaskExecutionsWithHttpInfo(limit, offset, sortBy, id, taskId, name, type, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
        return resp.getData();
    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TaskExecutionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskExecutionCollection> indexTaskExecutionsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String taskId, String name, String type, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth) throws ApiException {
        com.squareup.okhttp.Call call = indexTaskExecutionsValidateBeforeCall(limit, offset, sortBy, id, taskId, name, type, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, null, null);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all task executions. (asynchronously)
     * **API Key Scope**: task_executions / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param taskId Filter on task id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param status Filter on status (optional)
     * @param logTime Filter on log time (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessFiles Filter on to process files (optional)
     * @param processedFiles Filter on processed files (optional)
     * @param finalizedFiles Filter on finalized files (optional)
     * @param estimationTime Filter on estimation time (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTaskExecutionsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String taskId, String name, String type, String status, String logTime, String jobStarted, String jobFinished, String toProcessSize, String processedSize, String toProcessFiles, String processedFiles, String finalizedFiles, String estimationTime, String bandwidth, final ApiCallback<TaskExecutionCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTaskExecutionsValidateBeforeCall(limit, offset, sortBy, id, taskId, name, type, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTaskExecutionsByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTaskExecutionsByTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTaskExecutionsByTaskValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTaskExecutionsByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTaskExecutionsByTaskCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return TaskExecutionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskExecutionCollection indexTaskExecutionsByTask(String taskId) throws ApiException {
        ApiResponse<TaskExecutionCollection> resp = indexTaskExecutionsByTaskWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Lists all task executions.
     * **API Key Scope**: task_executions / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;TaskExecutionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskExecutionCollection> indexTaskExecutionsByTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = indexTaskExecutionsByTaskValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all task executions. (asynchronously)
     * **API Key Scope**: task_executions / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTaskExecutionsByTaskAsync(String taskId, final ApiCallback<TaskExecutionCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTaskExecutionsByTaskValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskExecutionCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTaskExecutionCall(Long taskExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}"
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTaskExecutionValidateBeforeCall(Long taskExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showTaskExecution(Async)");
        }
        

        com.squareup.okhttp.Call call = showTaskExecutionCall(taskExecutionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return TaskExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskExecution showTaskExecution(Long taskExecutionId) throws ApiException {
        ApiResponse<TaskExecution> resp = showTaskExecutionWithHttpInfo(taskExecutionId);
        return resp.getData();
    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return ApiResponse&lt;TaskExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskExecution> showTaskExecutionWithHttpInfo(Long taskExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = showTaskExecutionValidateBeforeCall(taskExecutionId, null, null);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific task execution. (asynchronously)
     * **API Key Scope**: task_executions / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTaskExecutionAsync(Long taskExecutionId, final ApiCallback<TaskExecution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTaskExecutionValidateBeforeCall(taskExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTaskExecutionByTaskCall(String taskId, Long taskExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", apiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showTaskExecutionByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = showTaskExecutionByTaskCall(taskId, taskExecutionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return TaskExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskExecution showTaskExecutionByTask(String taskId, Long taskExecutionId) throws ApiException {
        ApiResponse<TaskExecution> resp = showTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId);
        return resp.getData();
    }

    /**
     * Displays a specific task execution.
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @return ApiResponse&lt;TaskExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskExecution> showTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = showTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, null, null);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific task execution. (asynchronously)
     * **API Key Scope**: task_executions / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, final ApiCallback<TaskExecution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskExecution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
