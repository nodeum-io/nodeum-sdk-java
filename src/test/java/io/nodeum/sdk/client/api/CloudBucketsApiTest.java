/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.model.ActiveJobStatus;
import io.nodeum.sdk.client.model.CloudBucket;
import io.nodeum.sdk.client.model.CloudBucketCollection;
import io.nodeum.sdk.client.model.CloudBucketSimpleCollection;
import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.MountStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudBucketsApi
 */
@Ignore
public class CloudBucketsApiTest {

    private final CloudBucketsApi api = new CloudBucketsApi();

    
    /**
     * Lists all cloud buckets.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String cloudConnectorId = null;
        String poolId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBuckets(limit, offset, sortBy, id, cloudConnectorId, poolId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Lists all cloud buckets.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String poolId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBucketsByCloudConnector(cloudConnectorId, limit, offset, sortBy, id, poolId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Lists all cloud buckets from pool.
     *
     * **API Key Scope**: cloud_buckets / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexCloudBucketsByPoolTest() throws ApiException {
        String poolId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String cloudConnectorId = null;
        String name = null;
        String location = null;
        String price = null;
        CloudBucketCollection response = api.indexCloudBucketsByPool(poolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucket(cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Get mount status of Cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / mount_status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mountStatusCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        MountStatus response = api.mountStatusCloudBucketByPool(poolId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucket(cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        CloudBucket response = api.showCloudBucketByPool(poolId, cloudBucketId);

        // TODO: test validations
    }
    
    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     *
     * **API Key Scope**: cloud_buckets / sync
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncCloudBucketsTest() throws ApiException {
        String cloudConnectorId = null;
        ActiveJobStatus response = api.syncCloudBuckets(cloudConnectorId);

        // TODO: test validations
    }
    
    /**
     * Check result of cloud connector sync job.
     *
     * **API Key Scope**: cloud_buckets / sync
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncResultCloudBucketsTest() throws ApiException {
        String cloudConnectorId = null;
        String jobId = null;
        CloudBucketSimpleCollection response = api.syncResultCloudBuckets(cloudConnectorId, jobId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketTest() throws ApiException {
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucket(cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketByCloudConnectorTest() throws ApiException {
        String cloudConnectorId = null;
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucketByCloudConnector(cloudConnectorId, cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific cloud bucket.
     *
     * **API Key Scope**: cloud_buckets / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCloudBucketByPoolTest() throws ApiException {
        String poolId = null;
        String cloudBucketId = null;
        CloudBucket cloudBucketBody = null;
        CloudBucket response = api.updateCloudBucketByPool(poolId, cloudBucketId, cloudBucketBody);

        // TODO: test validations
    }
    
}
