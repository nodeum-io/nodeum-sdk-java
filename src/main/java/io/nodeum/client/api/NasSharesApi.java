/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;
import io.nodeum.client.model.NasShare;
import io.nodeum.client.model.NasShareCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasSharesApi {
    private ApiClient localVarApiClient;

    public NasSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasSharesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasShareByNasCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNasShareByNasValidateBeforeCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling createNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling createNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = createNasShareByNasCall(nasId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare createNasShareByNas(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = createNasShareByNasWithHttpInfo(nasId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> createNasShareByNasWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasShareByNasAsync(String nasId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShare
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareValidateBeforeCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShare(String nasShareId) throws ApiException {
        destroyNasShareWithHttpInfo(nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareWithHttpInfo(String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareValidateBeforeCall(nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareAsync(String nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareValidateBeforeCall(nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareByNasValidateBeforeCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling destroyNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShareByNas(String nasId, String nasShareId) throws ApiException {
        destroyNasShareByNasWithHttpInfo(nasId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareByNasWithHttpInfo(String nasId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasAsync(String nasId, String nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShareByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByPoolCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareByPoolValidateBeforeCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling destroyNasShareByPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByPool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareByPoolCall(poolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShareByPool(String poolId, String nasShareId) throws ApiException {
        destroyNasShareByPoolWithHttpInfo(poolId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareByPoolWithHttpInfo(String poolId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareByPoolValidateBeforeCall(poolId, nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByPoolAsync(String poolId, String nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareByPoolValidateBeforeCall(poolId, nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasShares
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (nasId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_id", nasId));
        }

        if (poolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool_id", poolId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, String poolId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexNasSharesCall(limit, offset, sortBy, id, name, path, options, username, nasId, poolId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param poolId Filter on a pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasShares(Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, String poolId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesWithHttpInfo(limit, offset, sortBy, id, name, path, options, username, nasId, poolId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param poolId Filter on a pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, String poolId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, name, path, options, username, nasId, poolId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, String poolId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, name, path, options, username, nasId, poolId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasSharesByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (poolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool_id", poolId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesByNasValidateBeforeCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling indexNasSharesByNas(Async)");
        }
        

        okhttp3.Call localVarCall = indexNasSharesByNasCall(nasId, limit, offset, sortBy, id, name, path, options, username, poolId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param poolId Filter on a pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasSharesByNas(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String poolId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesByNasWithHttpInfo(nasId, limit, offset, sortBy, id, name, path, options, username, poolId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param poolId Filter on a pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesByNasWithHttpInfo(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String poolId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, name, path, options, username, poolId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasAsync(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String poolId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, name, path, options, username, poolId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasSharesByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByPoolCall(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/nas_shares"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (nasId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_id", nasId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesByPoolValidateBeforeCall(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexNasSharesByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexNasSharesByPoolCall(poolId, limit, offset, sortBy, id, name, path, options, username, nasId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares from pool.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasSharesByPool(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesByPoolWithHttpInfo(poolId, limit, offset, sortBy, id, name, path, options, username, nasId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares from pool.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesByPoolWithHttpInfo(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesByPoolValidateBeforeCall(poolId, limit, offset, sortBy, id, name, path, options, username, nasId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares from pool. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByPoolAsync(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String path, String options, String username, String nasId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesByPoolValidateBeforeCall(poolId, limit, offset, sortBy, id, name, path, options, username, nasId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShare
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareValidateBeforeCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShare(String nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareWithHttpInfo(nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareWithHttpInfo(String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareValidateBeforeCall(nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareAsync(String nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareValidateBeforeCall(nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareByNasValidateBeforeCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling mountStatusNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShareByNas(String nasId, String nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareByNasWithHttpInfo(nasId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareByNasWithHttpInfo(String nasId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasAsync(String nasId, String nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShareByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByPoolCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareByPoolValidateBeforeCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling mountStatusNasShareByPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareByPoolCall(poolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShareByPool(String poolId, String nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareByPoolWithHttpInfo(poolId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareByPoolWithHttpInfo(String poolId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareByPoolValidateBeforeCall(poolId, nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByPoolAsync(String poolId, String nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareByPoolValidateBeforeCall(poolId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasShare
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasShareValidateBeforeCall(String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = showNasShareCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasShare(String nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasShareWithHttpInfo(nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasShareWithHttpInfo(String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasShareValidateBeforeCall(nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareAsync(String nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasShareValidateBeforeCall(nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByNasCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasShareByNasValidateBeforeCall(String nasId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling showNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = showNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasShareByNas(String nasId, String nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasShareByNasWithHttpInfo(nasId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasShareByNasWithHttpInfo(String nasId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByNasAsync(String nasId, String nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasShareByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByPoolCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasShareByPoolValidateBeforeCall(String poolId, String nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showNasShareByPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShareByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showNasShareByPoolCall(poolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasShareByPool(String poolId, String nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasShareByPoolWithHttpInfo(poolId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasShareByPoolWithHttpInfo(String poolId, String nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasShareByPoolValidateBeforeCall(poolId, nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByPoolAsync(String poolId, String nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasShareByPoolValidateBeforeCall(poolId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testNasShareCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testNasShareValidateBeforeCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling testNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = testNasShareCall(nasId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus testNasShare(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = testNasShareWithHttpInfo(nasId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> testNasShareWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = testNasShareValidateBeforeCall(nasId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test an unsaved NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testNasShareAsync(String nasId, NasShare nasShareBody, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = testNasShareValidateBeforeCall(nasId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testResultNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultNasShareCall(String nasId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testResultNasShareValidateBeforeCall(String nasId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testResultNasShare(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling testResultNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = testResultNasShareCall(nasId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus testResultNasShare(String nasId, String jobId) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = testResultNasShareWithHttpInfo(nasId, jobId);
        return localVarResp.getData();
    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> testResultNasShareWithHttpInfo(String nasId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = testResultNasShareValidateBeforeCall(nasId, jobId, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check result of a NAS Share test job. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultNasShareAsync(String nasId, String jobId, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = testResultNasShareValidateBeforeCall(nasId, jobId, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShare
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareCall(String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareValidateBeforeCall(String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareCall(nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShare(String nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareWithHttpInfo(nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareWithHttpInfo(String nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareAsync(String nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasCall(String nasId, String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareByNasValidateBeforeCall(String nasId, String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareByNasCall(nasId, nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShareByNas(String nasId, String nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareByNasWithHttpInfo(nasId, nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareByNasWithHttpInfo(String nasId, String nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasAsync(String nasId, String nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShareByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByPoolCall(String poolId, String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareByPoolValidateBeforeCall(String poolId, String nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling updateNasShareByPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByPool(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByPool(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareByPoolCall(poolId, nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShareByPool(String poolId, String nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareByPoolWithHttpInfo(poolId, nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareByPoolWithHttpInfo(String poolId, String nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareByPoolValidateBeforeCall(poolId, nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param poolId Numeric ID, or name of pool. (required)
     * @param nasShareId Numeric ID or name of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByPoolAsync(String poolId, String nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareByPoolValidateBeforeCall(poolId, nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
