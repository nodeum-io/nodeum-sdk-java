/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.Container;
import io.nodeum.client.model.ContainerCollection;
import io.nodeum.client.model.ContainerPrivilege;
import io.nodeum.client.model.ContainerPrivilegeCollection;
import io.nodeum.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContainersApi
 */
@Ignore
public class ContainersApiTest {

    private final ContainersApi api = new ContainersApi();

    
    /**
     * Creates a new container.
     *
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContainerTest() throws ApiException {
        Container containerBody = null;
        Container response = api.createContainer(containerBody);

        // TODO: test validations
    }
    
    /**
     * Creates a new privilege on the container.
     *
     * **API Key Scope**: container_privileges / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContainerPrivilegeTest() throws ApiException {
        String containerId = null;
        ContainerPrivilege containerPrivilegeBody = null;
        ContainerPrivilege response = api.createContainerPrivilege(containerId, containerPrivilegeBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific container.
     *
     * **API Key Scope**: containers / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyContainerTest() throws ApiException {
        String containerId = null;
        api.destroyContainer(containerId);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific privilege.
     *
     * **API Key Scope**: container_privileges / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyContainerPrivilegeTest() throws ApiException {
        String containerId = null;
        Integer containerPrivilegeId = null;
        api.destroyContainerPrivilege(containerId, containerPrivilegeId);

        // TODO: test validations
    }
    
    /**
     * Lists all privilege on the container.
     *
     * **API Key Scope**: container_privileges / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexContainerPrivilegesTest() throws ApiException {
        String containerId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String privilege = null;
        String type = null;
        ContainerPrivilegeCollection response = api.indexContainerPrivileges(containerId, limit, offset, sortBy, id, name, privilege, type);

        // TODO: test validations
    }
    
    /**
     * Lists all containers.
     *
     * **API Key Scope**: containers / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexContainersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String comment = null;
        String quotaTotalSize = null;
        String quotaOnCache = null;
        String statTotalFiles = null;
        String statTotalSize = null;
        String statSizeOnCache = null;
        String guestRight = null;
        String lastUpdate = null;
        ContainerCollection response = api.indexContainers(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);

        // TODO: test validations
    }
    
    /**
     * Displays a specific container.
     *
     * **API Key Scope**: containers / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showContainerTest() throws ApiException {
        String containerId = null;
        Container response = api.showContainer(containerId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific privilege.
     *
     * **API Key Scope**: container_privileges / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showContainerPrivilegeTest() throws ApiException {
        String containerId = null;
        Integer containerPrivilegeId = null;
        ContainerPrivilege response = api.showContainerPrivilege(containerId, containerPrivilegeId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific container.
     *
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContainerTest() throws ApiException {
        String containerId = null;
        Container containerBody = null;
        Container response = api.updateContainer(containerId, containerBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific privilege.
     *
     * **API Key Scope**: container_privileges / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContainerPrivilegeTest() throws ApiException {
        String containerId = null;
        Integer containerPrivilegeId = null;
        ContainerPrivilege containerPrivilegeBody = null;
        ContainerPrivilege response = api.updateContainerPrivilege(containerId, containerPrivilegeId, containerPrivilegeBody);

        // TODO: test validations
    }
    
}
