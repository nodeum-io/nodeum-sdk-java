/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.TaskMetadatum;
import io.swagger.client.model.TaskMetadatumCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskMetadataApi {
    private ApiClient apiClient;

    public TaskMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskMetadataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTaskMetadatum
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskMetadatumCall(String taskId, TaskMetadatum taskMetadatumBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskMetadatumBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_metadata"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskMetadatumValidateBeforeCall(String taskId, TaskMetadatum taskMetadatumBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskMetadatum(Async)");
        }
        
        // verify the required parameter 'taskMetadatumBody' is set
        if (taskMetadatumBody == null) {
            throw new ApiException("Missing the required parameter 'taskMetadatumBody' when calling createTaskMetadatum(Async)");
        }
        

        com.squareup.okhttp.Call call = createTaskMetadatumCall(taskId, taskMetadatumBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new task metadatum.
     * **API Key Scope**: task_metadata / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumBody  (required)
     * @return TaskMetadatum
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskMetadatum createTaskMetadatum(String taskId, TaskMetadatum taskMetadatumBody) throws ApiException {
        ApiResponse<TaskMetadatum> resp = createTaskMetadatumWithHttpInfo(taskId, taskMetadatumBody);
        return resp.getData();
    }

    /**
     * Creates a new task metadatum.
     * **API Key Scope**: task_metadata / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumBody  (required)
     * @return ApiResponse&lt;TaskMetadatum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskMetadatum> createTaskMetadatumWithHttpInfo(String taskId, TaskMetadatum taskMetadatumBody) throws ApiException {
        com.squareup.okhttp.Call call = createTaskMetadatumValidateBeforeCall(taskId, taskMetadatumBody, null, null);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new task metadatum. (asynchronously)
     * **API Key Scope**: task_metadata / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskMetadatumAsync(String taskId, TaskMetadatum taskMetadatumBody, final ApiCallback<TaskMetadatum> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskMetadatumValidateBeforeCall(taskId, taskMetadatumBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyTaskMetadatum
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyTaskMetadatumCall(String taskId, Integer taskMetadatumId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_metadata/{task_metadatum_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_metadatum_id" + "\\}", apiClient.escapeString(taskMetadatumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyTaskMetadatumValidateBeforeCall(String taskId, Integer taskMetadatumId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTaskMetadatum(Async)");
        }
        
        // verify the required parameter 'taskMetadatumId' is set
        if (taskMetadatumId == null) {
            throw new ApiException("Missing the required parameter 'taskMetadatumId' when calling destroyTaskMetadatum(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyTaskMetadatumCall(taskId, taskMetadatumId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific task metadatum.
     * **API Key Scope**: task_metadata / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyTaskMetadatum(String taskId, Integer taskMetadatumId) throws ApiException {
        destroyTaskMetadatumWithHttpInfo(taskId, taskMetadatumId);
    }

    /**
     * Destroys a specific task metadatum.
     * **API Key Scope**: task_metadata / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyTaskMetadatumWithHttpInfo(String taskId, Integer taskMetadatumId) throws ApiException {
        com.squareup.okhttp.Call call = destroyTaskMetadatumValidateBeforeCall(taskId, taskMetadatumId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific task metadatum. (asynchronously)
     * **API Key Scope**: task_metadata / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyTaskMetadatumAsync(String taskId, Integer taskMetadatumId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyTaskMetadatumValidateBeforeCall(taskId, taskMetadatumId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexTaskMetadata
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param key Filter on key (optional)
     * @param value Filter on value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTaskMetadataCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String key, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_metadata"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTaskMetadataValidateBeforeCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String key, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTaskMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTaskMetadataCall(taskId, limit, offset, sortBy, id, key, value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all task metadata.
     * **API Key Scope**: task_metadata / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param key Filter on key (optional)
     * @param value Filter on value (optional)
     * @return TaskMetadatumCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskMetadatumCollection indexTaskMetadata(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String key, String value) throws ApiException {
        ApiResponse<TaskMetadatumCollection> resp = indexTaskMetadataWithHttpInfo(taskId, limit, offset, sortBy, id, key, value);
        return resp.getData();
    }

    /**
     * Lists all task metadata.
     * **API Key Scope**: task_metadata / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param key Filter on key (optional)
     * @param value Filter on value (optional)
     * @return ApiResponse&lt;TaskMetadatumCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskMetadatumCollection> indexTaskMetadataWithHttpInfo(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String key, String value) throws ApiException {
        com.squareup.okhttp.Call call = indexTaskMetadataValidateBeforeCall(taskId, limit, offset, sortBy, id, key, value, null, null);
        Type localVarReturnType = new TypeToken<TaskMetadatumCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all task metadata. (asynchronously)
     * **API Key Scope**: task_metadata / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param key Filter on key (optional)
     * @param value Filter on value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTaskMetadataAsync(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String key, String value, final ApiCallback<TaskMetadatumCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTaskMetadataValidateBeforeCall(taskId, limit, offset, sortBy, id, key, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskMetadatumCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTaskMetadat
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTaskMetadatCall(String taskId, Integer taskMetadatumId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_metadata/{task_metadatum_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_metadatum_id" + "\\}", apiClient.escapeString(taskMetadatumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTaskMetadatValidateBeforeCall(String taskId, Integer taskMetadatumId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskMetadat(Async)");
        }
        
        // verify the required parameter 'taskMetadatumId' is set
        if (taskMetadatumId == null) {
            throw new ApiException("Missing the required parameter 'taskMetadatumId' when calling showTaskMetadat(Async)");
        }
        

        com.squareup.okhttp.Call call = showTaskMetadatCall(taskId, taskMetadatumId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific task metadatum.
     * **API Key Scope**: task_metadata / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @return TaskMetadatum
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskMetadatum showTaskMetadat(String taskId, Integer taskMetadatumId) throws ApiException {
        ApiResponse<TaskMetadatum> resp = showTaskMetadatWithHttpInfo(taskId, taskMetadatumId);
        return resp.getData();
    }

    /**
     * Displays a specific task metadatum.
     * **API Key Scope**: task_metadata / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @return ApiResponse&lt;TaskMetadatum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskMetadatum> showTaskMetadatWithHttpInfo(String taskId, Integer taskMetadatumId) throws ApiException {
        com.squareup.okhttp.Call call = showTaskMetadatValidateBeforeCall(taskId, taskMetadatumId, null, null);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific task metadatum. (asynchronously)
     * **API Key Scope**: task_metadata / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTaskMetadatAsync(String taskId, Integer taskMetadatumId, final ApiCallback<TaskMetadatum> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTaskMetadatValidateBeforeCall(taskId, taskMetadatumId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaskMetadatum
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param taskMetadatumBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaskMetadatumCall(String taskId, Integer taskMetadatumId, TaskMetadatum taskMetadatumBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskMetadatumBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_metadata/{task_metadatum_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_metadatum_id" + "\\}", apiClient.escapeString(taskMetadatumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskMetadatumValidateBeforeCall(String taskId, Integer taskMetadatumId, TaskMetadatum taskMetadatumBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskMetadatum(Async)");
        }
        
        // verify the required parameter 'taskMetadatumId' is set
        if (taskMetadatumId == null) {
            throw new ApiException("Missing the required parameter 'taskMetadatumId' when calling updateTaskMetadatum(Async)");
        }
        
        // verify the required parameter 'taskMetadatumBody' is set
        if (taskMetadatumBody == null) {
            throw new ApiException("Missing the required parameter 'taskMetadatumBody' when calling updateTaskMetadatum(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaskMetadatumCall(taskId, taskMetadatumId, taskMetadatumBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific task metadatum.
     * **API Key Scope**: task_metadata / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param taskMetadatumBody  (required)
     * @return TaskMetadatum
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskMetadatum updateTaskMetadatum(String taskId, Integer taskMetadatumId, TaskMetadatum taskMetadatumBody) throws ApiException {
        ApiResponse<TaskMetadatum> resp = updateTaskMetadatumWithHttpInfo(taskId, taskMetadatumId, taskMetadatumBody);
        return resp.getData();
    }

    /**
     * Updates a specific task metadatum.
     * **API Key Scope**: task_metadata / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param taskMetadatumBody  (required)
     * @return ApiResponse&lt;TaskMetadatum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskMetadatum> updateTaskMetadatumWithHttpInfo(String taskId, Integer taskMetadatumId, TaskMetadatum taskMetadatumBody) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskMetadatumValidateBeforeCall(taskId, taskMetadatumId, taskMetadatumBody, null, null);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific task metadatum. (asynchronously)
     * **API Key Scope**: task_metadata / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskMetadatumId Numeric ID of task metadatum. (required)
     * @param taskMetadatumBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskMetadatumAsync(String taskId, Integer taskMetadatumId, TaskMetadatum taskMetadatumBody, final ApiCallback<TaskMetadatum> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskMetadatumValidateBeforeCall(taskId, taskMetadatumId, taskMetadatumBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskMetadatum>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
