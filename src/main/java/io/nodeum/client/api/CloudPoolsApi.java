/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.CloudPool;
import io.nodeum.client.model.CloudPoolCollection;
import io.nodeum.client.model.CloudPoolUp;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudPoolsApi {
    private ApiClient localVarApiClient;

    public CloudPoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudPoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCloudPool
     * @param cloudPoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudPoolCall(CloudPoolUp cloudPoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloudPoolBody;

        // create path and map variables
        String localVarPath = "/cloud_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudPoolValidateBeforeCall(CloudPoolUp cloudPoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolBody' is set
        if (cloudPoolBody == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolBody' when calling createCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = createCloudPoolCall(cloudPoolBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new cloud pool.
     * **API Key Scope**: cloud_pools / create
     * @param cloudPoolBody  (required)
     * @return CloudPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public CloudPool createCloudPool(CloudPoolUp cloudPoolBody) throws ApiException {
        ApiResponse<CloudPool> localVarResp = createCloudPoolWithHttpInfo(cloudPoolBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new cloud pool.
     * **API Key Scope**: cloud_pools / create
     * @param cloudPoolBody  (required)
     * @return ApiResponse&lt;CloudPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudPool> createCloudPoolWithHttpInfo(CloudPoolUp cloudPoolBody) throws ApiException {
        okhttp3.Call localVarCall = createCloudPoolValidateBeforeCall(cloudPoolBody, null);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new cloud pool. (asynchronously)
     * **API Key Scope**: cloud_pools / create
     * @param cloudPoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudPoolAsync(CloudPoolUp cloudPoolBody, final ApiCallback<CloudPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudPoolValidateBeforeCall(cloudPoolBody, _callback);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyCloudPoolCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyCloudPoolValidateBeforeCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling destroyCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyCloudPoolCall(cloudPoolId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific cloud pool.
     * **API Key Scope**: cloud_pools / destroy
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyCloudPool(String cloudPoolId) throws ApiException {
        destroyCloudPoolWithHttpInfo(cloudPoolId);
    }

    /**
     * Destroys a specific cloud pool.
     * **API Key Scope**: cloud_pools / destroy
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyCloudPoolWithHttpInfo(String cloudPoolId) throws ApiException {
        okhttp3.Call localVarCall = destroyCloudPoolValidateBeforeCall(cloudPoolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific cloud pool. (asynchronously)
     * **API Key Scope**: cloud_pools / destroy
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cloud pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyCloudPoolAsync(String cloudPoolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyCloudPoolValidateBeforeCall(cloudPoolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCloudPools
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudPoolsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCloudPoolsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexCloudPoolsCall(limit, offset, sortBy, id, name, comment, type, _callback);
        return localVarCall;

    }

    /**
     * Lists all cloud pools.
     * **API Key Scope**: cloud_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return CloudPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud pools. </td><td>  -  </td></tr>
     </table>
     */
    public CloudPoolCollection indexCloudPools(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        ApiResponse<CloudPoolCollection> localVarResp = indexCloudPoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type);
        return localVarResp.getData();
    }

    /**
     * Lists all cloud pools.
     * **API Key Scope**: cloud_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;CloudPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud pools. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudPoolCollection> indexCloudPoolsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        okhttp3.Call localVarCall = indexCloudPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, null);
        Type localVarReturnType = new TypeToken<CloudPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all cloud pools. (asynchronously)
     * **API Key Scope**: cloud_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudPoolsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback<CloudPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCloudPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, _callback);
        Type localVarReturnType = new TypeToken<CloudPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudPoolCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/mount"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusCloudPoolValidateBeforeCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling mountStatusCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusCloudPoolCall(cloudPoolId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Cloud pool.
     * **API Key Scope**: cloud_pools / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusCloudPool(String cloudPoolId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusCloudPoolWithHttpInfo(cloudPoolId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Cloud pool.
     * **API Key Scope**: cloud_pools / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusCloudPoolWithHttpInfo(String cloudPoolId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusCloudPoolValidateBeforeCall(cloudPoolId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Cloud pool. (asynchronously)
     * **API Key Scope**: cloud_pools / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudPoolAsync(String cloudPoolId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusCloudPoolValidateBeforeCall(cloudPoolId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudPoolCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCloudPoolValidateBeforeCall(String cloudPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling showCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = showCloudPoolCall(cloudPoolId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific cloud pool.
     * **API Key Scope**: cloud_pools / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @return CloudPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
     </table>
     */
    public CloudPool showCloudPool(String cloudPoolId) throws ApiException {
        ApiResponse<CloudPool> localVarResp = showCloudPoolWithHttpInfo(cloudPoolId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific cloud pool.
     * **API Key Scope**: cloud_pools / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @return ApiResponse&lt;CloudPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudPool> showCloudPoolWithHttpInfo(String cloudPoolId) throws ApiException {
        okhttp3.Call localVarCall = showCloudPoolValidateBeforeCall(cloudPoolId, null);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific cloud pool. (asynchronously)
     * **API Key Scope**: cloud_pools / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudPoolAsync(String cloudPoolId, final ApiCallback<CloudPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCloudPoolValidateBeforeCall(cloudPoolId, _callback);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudPoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudPoolCall(String cloudPoolId, CloudPoolUp cloudPoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloudPoolBody;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudPoolValidateBeforeCall(String cloudPoolId, CloudPoolUp cloudPoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling updateCloudPool(Async)");
        }
        
        // verify the required parameter 'cloudPoolBody' is set
        if (cloudPoolBody == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolBody' when calling updateCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = updateCloudPoolCall(cloudPoolId, cloudPoolBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific cloud pool.
     * **API Key Scope**: cloud_pools / update
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudPoolBody  (required)
     * @return CloudPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public CloudPool updateCloudPool(String cloudPoolId, CloudPoolUp cloudPoolBody) throws ApiException {
        ApiResponse<CloudPool> localVarResp = updateCloudPoolWithHttpInfo(cloudPoolId, cloudPoolBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific cloud pool.
     * **API Key Scope**: cloud_pools / update
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudPoolBody  (required)
     * @return ApiResponse&lt;CloudPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudPool> updateCloudPoolWithHttpInfo(String cloudPoolId, CloudPoolUp cloudPoolBody) throws ApiException {
        okhttp3.Call localVarCall = updateCloudPoolValidateBeforeCall(cloudPoolId, cloudPoolBody, null);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific cloud pool. (asynchronously)
     * **API Key Scope**: cloud_pools / update
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudPoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudPoolAsync(String cloudPoolId, CloudPoolUp cloudPoolBody, final ApiCallback<CloudPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudPoolValidateBeforeCall(cloudPoolId, cloudPoolBody, _callback);
        Type localVarReturnType = new TypeToken<CloudPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
