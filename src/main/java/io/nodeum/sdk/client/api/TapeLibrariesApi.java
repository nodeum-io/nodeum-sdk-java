/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.ActiveJobStatus;
import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.TapeLibrary;
import io.nodeum.sdk.client.model.TapeLibraryCollection;
import io.nodeum.sdk.client.model.TapeLibraryDeviceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapeLibrariesApi {
    private ApiClient localVarApiClient;

    public TapeLibrariesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapeLibrariesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTapeLibrary
     * @param tapeLibraryBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapeLibraryCall(TapeLibrary tapeLibraryBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapeLibraryBody;

        // create path and map variables
        String localVarPath = "/tape_libraries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTapeLibraryValidateBeforeCall(TapeLibrary tapeLibraryBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryBody' is set
        if (tapeLibraryBody == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryBody' when calling createTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = createTapeLibraryCall(tapeLibraryBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new tape library.
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapeLibrary createTapeLibrary(TapeLibrary tapeLibraryBody) throws ApiException {
        ApiResponse<TapeLibrary> localVarResp = createTapeLibraryWithHttpInfo(tapeLibraryBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new tape library.
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeLibrary> createTapeLibraryWithHttpInfo(TapeLibrary tapeLibraryBody) throws ApiException {
        okhttp3.Call localVarCall = createTapeLibraryValidateBeforeCall(tapeLibraryBody, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapeLibraryAsync(TapeLibrary tapeLibraryBody, final ApiCallback<TapeLibrary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTapeLibraryValidateBeforeCall(tapeLibraryBody, _callback);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape library destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeLibraryCall(String tapeLibraryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTapeLibraryValidateBeforeCall(String tapeLibraryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling destroyTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTapeLibraryCall(tapeLibraryId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific tape library.
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape library destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTapeLibrary(String tapeLibraryId) throws ApiException {
        destroyTapeLibraryWithHttpInfo(tapeLibraryId);
    }

    /**
     * Destroys a specific tape library.
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape library destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTapeLibraryWithHttpInfo(String tapeLibraryId) throws ApiException {
        okhttp3.Call localVarCall = destroyTapeLibraryValidateBeforeCall(tapeLibraryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape library destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapeLibraryAsync(String tapeLibraryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTapeLibraryValidateBeforeCall(tapeLibraryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapeLibraries
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeLibrariesCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (protocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protocol", protocol));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (firmware != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firmware", firmware));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (libso != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libso", libso));
        }

        if (acs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acs", acs));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (storageSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storage_slots", storageSlots));
        }

        if (storageSlotsAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storage_slots_address", storageSlotsAddress));
        }

        if (ioSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("io_slots", ioSlots));
        }

        if (ioSlotsAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("io_slots_address", ioSlotsAddress));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeLibrariesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTapeLibrariesCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all tape libraries.
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @return TapeLibraryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries. </td><td>  -  </td></tr>
     </table>
     */
    public TapeLibraryCollection indexTapeLibraries(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price) throws ApiException {
        ApiResponse<TapeLibraryCollection> localVarResp = indexTapeLibrariesWithHttpInfo(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price);
        return localVarResp.getData();
    }

    /**
     * Lists all tape libraries.
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;TapeLibraryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeLibraryCollection> indexTapeLibrariesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price) throws ApiException {
        okhttp3.Call localVarCall = indexTapeLibrariesValidateBeforeCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, null);
        Type localVarReturnType = new TypeToken<TapeLibraryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tape libraries. (asynchronously)
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeLibrariesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ApiCallback<TapeLibraryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeLibrariesValidateBeforeCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, _callback);
        Type localVarReturnType = new TypeToken<TapeLibraryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapeLibraryDevices
     * @param jobId ID of active job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeLibraryDevicesCall(String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/-/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeLibraryDevicesValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling indexTapeLibraryDevices(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapeLibraryDevicesCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Lists tape libraries devices.
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (required)
     * @return TapeLibraryDeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public TapeLibraryDeviceCollection indexTapeLibraryDevices(String jobId) throws ApiException {
        ApiResponse<TapeLibraryDeviceCollection> localVarResp = indexTapeLibraryDevicesWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Lists tape libraries devices.
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (required)
     * @return ApiResponse&lt;TapeLibraryDeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeLibraryDeviceCollection> indexTapeLibraryDevicesWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = indexTapeLibraryDevicesValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<TapeLibraryDeviceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists tape libraries devices. (asynchronously)
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape libraries devices. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeLibraryDevicesAsync(String jobId, final ApiCallback<TapeLibraryDeviceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeLibraryDevicesValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<TapeLibraryDeviceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeLibraryCall(String tapeLibraryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeLibraryValidateBeforeCall(String tapeLibraryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeLibraryCall(tapeLibraryId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape library.
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
     </table>
     */
    public TapeLibrary showTapeLibrary(String tapeLibraryId) throws ApiException {
        ApiResponse<TapeLibrary> localVarResp = showTapeLibraryWithHttpInfo(tapeLibraryId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape library.
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeLibrary> showTapeLibraryWithHttpInfo(String tapeLibraryId) throws ApiException {
        okhttp3.Call localVarCall = showTapeLibraryValidateBeforeCall(tapeLibraryId, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeLibraryAsync(String tapeLibraryId, final ApiCallback<TapeLibrary> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeLibraryValidateBeforeCall(tapeLibraryId, _callback);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeLibraryCall(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapeLibraryBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTapeLibraryValidateBeforeCall(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling updateTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeLibraryBody' is set
        if (tapeLibraryBody == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryBody' when calling updateTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = updateTapeLibraryCall(tapeLibraryId, tapeLibraryBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific tape library.
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapeLibrary updateTapeLibrary(String tapeLibraryId, TapeLibrary tapeLibraryBody) throws ApiException {
        ApiResponse<TapeLibrary> localVarResp = updateTapeLibraryWithHttpInfo(tapeLibraryId, tapeLibraryBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific tape library.
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeLibrary> updateTapeLibraryWithHttpInfo(String tapeLibraryId, TapeLibrary tapeLibraryBody) throws ApiException {
        okhttp3.Call localVarCall = updateTapeLibraryValidateBeforeCall(tapeLibraryId, tapeLibraryBody, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape library. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapeLibraryAsync(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ApiCallback<TapeLibrary> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTapeLibraryValidateBeforeCall(tapeLibraryId, tapeLibraryBody, _callback);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
