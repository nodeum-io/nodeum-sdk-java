/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.NodeumFileCollection;
import io.nodeum.client.model.NodeumFileWithPath;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for filesChildren
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_parent_id}/children"
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenValidateBeforeCall(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildren(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildren(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenWithHttpInfo(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenWithHttpInfo(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenAsync(Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenValidateBeforeCall(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByCloudPoolCall(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByCloudPoolValidateBeforeCall(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling filesChildrenByCloudPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByCloudPoolCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByCloudPool(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByCloudPoolWithHttpInfo(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByCloudPoolWithHttpInfo(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByCloudPoolValidateBeforeCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByCloudPoolAsync(String cloudPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByCloudPoolValidateBeforeCall(cloudPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByContainerCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByContainerValidateBeforeCall(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling filesChildrenByContainer(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByContainerCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByContainer(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByContainerWithHttpInfo(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByContainerWithHttpInfo(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByContainerAsync(String containerId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByContainerValidateBeforeCall(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByNasPoolCall(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByNasPoolValidateBeforeCall(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling filesChildrenByNasPool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByNasPoolCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByNasPool(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByNasPoolWithHttpInfo(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByNasPoolWithHttpInfo(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByNasPoolValidateBeforeCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByNasPoolAsync(String nasPoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByNasPoolValidateBeforeCall(nasPoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTapePoolCall(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTapePoolValidateBeforeCall(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling filesChildrenByTapePool(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTapePoolCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTapePool(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTapePoolWithHttpInfo(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTapePoolWithHttpInfo(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTapePoolValidateBeforeCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTapePoolAsync(String tapePoolId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTapePoolValidateBeforeCall(tapePoolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskValidateBeforeCall(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTask(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTask(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskWithHttpInfo(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskWithHttpInfo(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskAsync(String taskId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskValidateBeforeCall(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionCall(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTaskExecution(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskExecutionWithHttpInfo(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionAsync(Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionValidateBeforeCall(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesChildrenByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_parent_id" + "\\}", localVarApiClient.escapeString(fileParentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesChildrenByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileParentId' is set
        if (fileParentId == null) {
            throw new ApiException("Missing the required parameter 'fileParentId' when calling filesChildrenByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection filesChildrenByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = filesChildrenByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files under a specific folder.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> filesChildrenByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files under a specific folder. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileParentId Numeric ID of parent folder. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filesChildrenByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer fileParentId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesChildrenByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFiles
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesValidateBeforeCall(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexFilesCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFiles(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesWithHttpInfo(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesWithHttpInfo(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesAsync(Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesValidateBeforeCall(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByCloudPoolCall(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByCloudPoolValidateBeforeCall(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling indexFilesByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByCloudPoolCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByCloudPool(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByCloudPoolWithHttpInfo(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByCloudPoolWithHttpInfo(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByCloudPoolAsync(String cloudPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByContainerCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByContainerValidateBeforeCall(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling indexFilesByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByContainerCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByContainer(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByContainerWithHttpInfo(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByContainerWithHttpInfo(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByContainerAsync(String containerId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByContainerValidateBeforeCall(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByNasPoolCall(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByNasPoolValidateBeforeCall(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling indexFilesByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByNasPoolCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByNasPool(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByNasPoolWithHttpInfo(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByNasPoolWithHttpInfo(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByNasPoolAsync(String nasPoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTapePoolCall(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTapePoolValidateBeforeCall(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling indexFilesByTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTapePoolCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTapePool(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTapePoolWithHttpInfo(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTapePoolWithHttpInfo(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTapePoolAsync(String tapePoolId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskValidateBeforeCall(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTask(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskWithHttpInfo(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskWithHttpInfo(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskAsync(String taskId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskValidateBeforeCall(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionCall(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskExecutionCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTaskExecution(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskExecutionWithHttpInfo(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionAsync(Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskExecutionValidateBeforeCall(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexFilesByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (changeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_date", changeDate));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (accessDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_date", accessDate));
        }

        if (gid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid", gid));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexFilesByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling indexFilesByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        return localVarCall;

    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return NodeumFileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileCollection indexFilesByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        ApiResponse<NodeumFileCollection> localVarResp = indexFilesByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
        return localVarResp.getData();
    }

    /**
     * Lists files on root.
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @return ApiResponse&lt;NodeumFileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileCollection> indexFilesByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid) throws ApiException {
        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, null);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists files on root. (asynchronously)
     * **API Key Scope**: files / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param fileId Filter on file id (optional)
     * @param name Filter on name (optional)
     * @param type Filter on type (optional)
     * @param permission Filter on permission (optional)
     * @param size Filter on size (optional)
     * @param changeDate Filter on change date (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param accessDate Filter on access date (optional)
     * @param gid Filter on gid (optional)
     * @param uid Filter on uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexFilesByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer limit, Integer offset, String fileId, String name, String type, String permission, String size, String changeDate, String modificationDate, String accessDate, String gid, String uid, final ApiCallback<NodeumFileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexFilesByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFile
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileValidateBeforeCall(Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFile(Async)");
        }
        

        okhttp3.Call localVarCall = showFileCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFile(Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileWithHttpInfo(Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileAsync(Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByCloudPoolCall(String cloudPoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByCloudPoolValidateBeforeCall(String cloudPoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling showFileByCloudPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByCloudPoolCall(cloudPoolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByCloudPool(String cloudPoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByCloudPoolWithHttpInfo(cloudPoolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByCloudPoolWithHttpInfo(String cloudPoolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByCloudPoolValidateBeforeCall(cloudPoolId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByCloudPoolAsync(String cloudPoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByCloudPoolValidateBeforeCall(cloudPoolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByContainerCall(String containerId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/files/{file_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByContainerValidateBeforeCall(String containerId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showFileByContainer(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByContainer(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByContainerCall(containerId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByContainer(String containerId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByContainerWithHttpInfo(containerId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByContainerWithHttpInfo(String containerId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByContainerValidateBeforeCall(containerId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param containerId Numeric ID or name of container. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByContainerAsync(String containerId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByContainerValidateBeforeCall(containerId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByNasPoolCall(String nasPoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByNasPoolValidateBeforeCall(String nasPoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showFileByNasPool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByNasPoolCall(nasPoolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByNasPool(String nasPoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByNasPoolWithHttpInfo(nasPoolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByNasPoolWithHttpInfo(String nasPoolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByNasPoolValidateBeforeCall(nasPoolId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByNasPoolAsync(String nasPoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByNasPoolValidateBeforeCall(nasPoolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTapePoolCall(String tapePoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/files/{file_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTapePoolValidateBeforeCall(String tapePoolId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling showFileByTapePool(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTapePoolCall(tapePoolId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTapePool(String tapePoolId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTapePoolWithHttpInfo(tapePoolId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTapePoolWithHttpInfo(String tapePoolId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTapePoolValidateBeforeCall(tapePoolId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTapePoolAsync(String tapePoolId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTapePoolValidateBeforeCall(tapePoolId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskValidateBeforeCall(String taskId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTask(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskCall(taskId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTask(String taskId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskWithHttpInfo(taskId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskWithHttpInfo(String taskId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskValidateBeforeCall(taskId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskAsync(String taskId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskValidateBeforeCall(taskId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTaskExecution
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionCall(Long taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskExecutionValidateBeforeCall(Long taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecution(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecution(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskExecutionCall(taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTaskExecution(Long taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionWithHttpInfo(Long taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionAsync(Long taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskExecutionValidateBeforeCall(taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showFileByTaskExecutionByTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionByTaskCall(String taskId, Long taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_execution_id" + "\\}", localVarApiClient.escapeString(taskExecutionId.toString()))
            .replaceAll("\\{" + "file_id" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showFileByTaskExecutionByTaskValidateBeforeCall(String taskId, Long taskExecutionId, Integer fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'taskExecutionId' is set
        if (taskExecutionId == null) {
            throw new ApiException("Missing the required parameter 'taskExecutionId' when calling showFileByTaskExecutionByTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling showFileByTaskExecutionByTask(Async)");
        }
        

        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskCall(taskId, taskExecutionId, fileId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return NodeumFileWithPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public NodeumFileWithPath showFileByTaskExecutionByTask(String taskId, Long taskExecutionId, Integer fileId) throws ApiException {
        ApiResponse<NodeumFileWithPath> localVarResp = showFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific file.
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @return ApiResponse&lt;NodeumFileWithPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeumFileWithPath> showFileByTaskExecutionByTaskWithHttpInfo(String taskId, Long taskExecutionId, Integer fileId) throws ApiException {
        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, null);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific file. (asynchronously)
     * **API Key Scope**: files / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskExecutionId Numeric ID of task execution. (required)
     * @param fileId Numeric ID of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showFileByTaskExecutionByTaskAsync(String taskId, Long taskExecutionId, Integer fileId, final ApiCallback<NodeumFileWithPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = showFileByTaskExecutionByTaskValidateBeforeCall(taskId, taskExecutionId, fileId, _callback);
        Type localVarReturnType = new TypeToken<NodeumFileWithPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
