/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for TaskExecution
 */
public class TaskExecutionTest {
    private final TaskExecution model = new TaskExecution();

    /**
     * Model tests for TaskExecution
     */
    @Test
    public void testTaskExecution() {
        // TODO: test TaskExecution
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'taskId'
     */
    @Test
    public void taskIdTest() {
        // TODO: test taskId
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'workflowType'
     */
    @Test
    public void workflowTypeTest() {
        // TODO: test workflowType
    }

    /**
     * Test the property 'workflowAction'
     */
    @Test
    public void workflowActionTest() {
        // TODO: test workflowAction
    }

    /**
     * Test the property 'sourceType'
     */
    @Test
    public void sourceTypeTest() {
        // TODO: test sourceType
    }

    /**
     * Test the property 'destinationType'
     */
    @Test
    public void destinationTypeTest() {
        // TODO: test destinationType
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'logTime'
     */
    @Test
    public void logTimeTest() {
        // TODO: test logTime
    }

    /**
     * Test the property 'jobStarted'
     */
    @Test
    public void jobStartedTest() {
        // TODO: test jobStarted
    }

    /**
     * Test the property 'jobFinished'
     */
    @Test
    public void jobFinishedTest() {
        // TODO: test jobFinished
    }

    /**
     * Test the property 'toProcessSize'
     */
    @Test
    public void toProcessSizeTest() {
        // TODO: test toProcessSize
    }

    /**
     * Test the property 'processedSize'
     */
    @Test
    public void processedSizeTest() {
        // TODO: test processedSize
    }

    /**
     * Test the property 'toProcessFiles'
     */
    @Test
    public void toProcessFilesTest() {
        // TODO: test toProcessFiles
    }

    /**
     * Test the property 'processedFiles'
     */
    @Test
    public void processedFilesTest() {
        // TODO: test processedFiles
    }

    /**
     * Test the property 'finalizedFiles'
     */
    @Test
    public void finalizedFilesTest() {
        // TODO: test finalizedFiles
    }

    /**
     * Test the property 'estimationTime'
     */
    @Test
    public void estimationTimeTest() {
        // TODO: test estimationTime
    }

    /**
     * Test the property 'bandwidth'
     */
    @Test
    public void bandwidthTest() {
        // TODO: test bandwidth
    }

}
