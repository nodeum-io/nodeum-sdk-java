/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.Container;
import io.nodeum.sdk.client.model.ContainerCollection;
import io.nodeum.sdk.client.model.ContainerPrivilege;
import io.nodeum.sdk.client.model.ContainerPrivilegeCollection;
import io.nodeum.sdk.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContainersApi {
    private ApiClient localVarApiClient;

    public ContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createContainer
     * @param containerBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContainerCall(Container containerBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = containerBody;

        // create path and map variables
        String localVarPath = "/containers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContainerValidateBeforeCall(Container containerBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerBody' is set
        if (containerBody == null) {
            throw new ApiException("Missing the required parameter 'containerBody' when calling createContainer(Async)");
        }
        

        okhttp3.Call localVarCall = createContainerCall(containerBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Container createContainer(Container containerBody) throws ApiException {
        ApiResponse<Container> localVarResp = createContainerWithHttpInfo(containerBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Container> createContainerWithHttpInfo(Container containerBody) throws ApiException {
        okhttp3.Call localVarCall = createContainerValidateBeforeCall(containerBody, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new container. (asynchronously)
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContainerAsync(Container containerBody, final ApiCallback<Container> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContainerValidateBeforeCall(containerBody, _callback);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContainerPrivilegeCall(String containerId, ContainerPrivilege containerPrivilegeBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = containerPrivilegeBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContainerPrivilegeValidateBeforeCall(String containerId, ContainerPrivilege containerPrivilegeBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeBody' is set
        if (containerPrivilegeBody == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeBody' when calling createContainerPrivilege(Async)");
        }
        

        okhttp3.Call localVarCall = createContainerPrivilegeCall(containerId, containerPrivilegeBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new privilege on the container.
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerPrivilege createContainerPrivilege(String containerId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        ApiResponse<ContainerPrivilege> localVarResp = createContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new privilege on the container.
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerPrivilege> createContainerPrivilegeWithHttpInfo(String containerId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        okhttp3.Call localVarCall = createContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeBody, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new privilege on the container. (asynchronously)
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContainerPrivilegeAsync(String containerId, ContainerPrivilege containerPrivilegeBody, final ApiCallback<ContainerPrivilege> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeBody, _callback);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyContainerCall(String containerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyContainerValidateBeforeCall(String containerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling destroyContainer(Async)");
        }
        

        okhttp3.Call localVarCall = destroyContainerCall(containerId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific container.
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyContainer(String containerId) throws ApiException {
        destroyContainerWithHttpInfo(containerId);
    }

    /**
     * Destroys a specific container.
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyContainerWithHttpInfo(String containerId) throws ApiException {
        okhttp3.Call localVarCall = destroyContainerValidateBeforeCall(containerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific container. (asynchronously)
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyContainerAsync(String containerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyContainerValidateBeforeCall(containerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container privilege destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", localVarApiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling destroyContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling destroyContainerPrivilege(Async)");
        }
        

        okhttp3.Call localVarCall = destroyContainerPrivilegeCall(containerId, containerPrivilegeId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific privilege.
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container privilege destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyContainerPrivilege(String containerId, Integer containerPrivilegeId) throws ApiException {
        destroyContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
    }

    /**
     * Destroys a specific privilege.
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container privilege destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId) throws ApiException {
        okhttp3.Call localVarCall = destroyContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Container privilege destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexContainerPrivileges
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of container privileges. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexContainerPrivilegesCall(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (privilege != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privilege", privilege));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexContainerPrivilegesValidateBeforeCall(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling indexContainerPrivileges(Async)");
        }
        

        okhttp3.Call localVarCall = indexContainerPrivilegesCall(containerId, limit, offset, sortBy, id, name, privilege, type, _callback);
        return localVarCall;

    }

    /**
     * Lists all privilege on the container.
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @return ContainerPrivilegeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of container privileges. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerPrivilegeCollection indexContainerPrivileges(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type) throws ApiException {
        ApiResponse<ContainerPrivilegeCollection> localVarResp = indexContainerPrivilegesWithHttpInfo(containerId, limit, offset, sortBy, id, name, privilege, type);
        return localVarResp.getData();
    }

    /**
     * Lists all privilege on the container.
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;ContainerPrivilegeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of container privileges. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerPrivilegeCollection> indexContainerPrivilegesWithHttpInfo(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type) throws ApiException {
        okhttp3.Call localVarCall = indexContainerPrivilegesValidateBeforeCall(containerId, limit, offset, sortBy, id, name, privilege, type, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilegeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all privilege on the container. (asynchronously)
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of container privileges. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexContainerPrivilegesAsync(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ApiCallback<ContainerPrivilegeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexContainerPrivilegesValidateBeforeCall(containerId, limit, offset, sortBy, id, name, privilege, type, _callback);
        Type localVarReturnType = new TypeToken<ContainerPrivilegeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexContainers
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of containers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexContainersCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (quotaTotalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quota_total_size", quotaTotalSize));
        }

        if (quotaOnCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quota_on_cache", quotaOnCache));
        }

        if (statTotalFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat_total_files", statTotalFiles));
        }

        if (statTotalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat_total_size", statTotalSize));
        }

        if (statSizeOnCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stat_size_on_cache", statSizeOnCache));
        }

        if (guestRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guest_right", guestRight));
        }

        if (lastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update", lastUpdate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexContainersValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexContainersCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, _callback);
        return localVarCall;

    }

    /**
     * Lists all containers.
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @return ContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of containers. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerCollection indexContainers(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate) throws ApiException {
        ApiResponse<ContainerCollection> localVarResp = indexContainersWithHttpInfo(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);
        return localVarResp.getData();
    }

    /**
     * Lists all containers.
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @return ApiResponse&lt;ContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of containers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerCollection> indexContainersWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate) throws ApiException {
        okhttp3.Call localVarCall = indexContainersValidateBeforeCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, null);
        Type localVarReturnType = new TypeToken<ContainerCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all containers. (asynchronously)
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of containers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexContainersAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ApiCallback<ContainerCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexContainersValidateBeforeCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, _callback);
        Type localVarReturnType = new TypeToken<ContainerCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showContainerCall(String containerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showContainerValidateBeforeCall(String containerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showContainer(Async)");
        }
        

        okhttp3.Call localVarCall = showContainerCall(containerId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific container.
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
     </table>
     */
    public Container showContainer(String containerId) throws ApiException {
        ApiResponse<Container> localVarResp = showContainerWithHttpInfo(containerId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific container.
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Container> showContainerWithHttpInfo(String containerId) throws ApiException {
        okhttp3.Call localVarCall = showContainerValidateBeforeCall(containerId, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific container. (asynchronously)
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showContainerAsync(String containerId, final ApiCallback<Container> _callback) throws ApiException {

        okhttp3.Call localVarCall = showContainerValidateBeforeCall(containerId, _callback);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", localVarApiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling showContainerPrivilege(Async)");
        }
        

        okhttp3.Call localVarCall = showContainerPrivilegeCall(containerId, containerPrivilegeId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific privilege.
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerPrivilege showContainerPrivilege(String containerId, Integer containerPrivilegeId) throws ApiException {
        ApiResponse<ContainerPrivilege> localVarResp = showContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific privilege.
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerPrivilege> showContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId) throws ApiException {
        okhttp3.Call localVarCall = showContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, final ApiCallback<ContainerPrivilege> _callback) throws ApiException {

        okhttp3.Call localVarCall = showContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, _callback);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerCall(String containerId, Container containerBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = containerBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContainerValidateBeforeCall(String containerId, Container containerBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainer(Async)");
        }
        
        // verify the required parameter 'containerBody' is set
        if (containerBody == null) {
            throw new ApiException("Missing the required parameter 'containerBody' when calling updateContainer(Async)");
        }
        

        okhttp3.Call localVarCall = updateContainerCall(containerId, containerBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Container updateContainer(String containerId, Container containerBody) throws ApiException {
        ApiResponse<Container> localVarResp = updateContainerWithHttpInfo(containerId, containerBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Container> updateContainerWithHttpInfo(String containerId, Container containerBody) throws ApiException {
        okhttp3.Call localVarCall = updateContainerValidateBeforeCall(containerId, containerBody, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific container. (asynchronously)
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerAsync(String containerId, Container containerBody, final ApiCallback<Container> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContainerValidateBeforeCall(containerId, containerBody, _callback);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = containerPrivilegeBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", localVarApiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", localVarApiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling updateContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeBody' is set
        if (containerPrivilegeBody == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeBody' when calling updateContainerPrivilege(Async)");
        }
        

        okhttp3.Call localVarCall = updateContainerPrivilegeCall(containerId, containerPrivilegeId, containerPrivilegeBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific privilege.
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerPrivilege updateContainerPrivilege(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        ApiResponse<ContainerPrivilege> localVarResp = updateContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId, containerPrivilegeBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific privilege.
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerPrivilege> updateContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        okhttp3.Call localVarCall = updateContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, containerPrivilegeBody, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific container privilege. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ApiCallback<ContainerPrivilege> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, containerPrivilegeBody, _callback);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
