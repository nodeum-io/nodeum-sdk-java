/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.TaskSchedule;
import io.nodeum.client.model.TaskScheduleCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskSchedulesApi
 */
@Ignore
public class TaskSchedulesApiTest {

    private final TaskSchedulesApi api = new TaskSchedulesApi();

    
    /**
     * Creates a new task schedule. Only one should be created.
     *
     * **API Key Scope**: task_schedules / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskScheduleTest() throws ApiException {
        String taskId = null;
        TaskSchedule taskScheduleBody = null;
        TaskSchedule response = api.createTaskSchedule(taskId, taskScheduleBody);

        // TODO: test validations
    }
    
    /**
     * Destroys the task schedule.
     *
     * **API Key Scope**: task_schedules / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyTaskScheduleTest() throws ApiException {
        String taskId = null;
        api.destroyTaskSchedule(taskId);

        // TODO: test validations
    }
    
    /**
     * Lists all task schedules.
     *
     * **API Key Scope**: task_schedules / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTaskSchedulesTest() throws ApiException {
        Boolean withNext = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String rrule = null;
        String done = null;
        String taskId = null;
        TaskScheduleCollection response = api.indexTaskSchedules(withNext, limit, offset, sortBy, id, rrule, done, taskId);

        // TODO: test validations
    }
    
    /**
     * Displays the task schedule.
     *
     * **API Key Scope**: task_schedules / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTaskScheduleTest() throws ApiException {
        String taskId = null;
        TaskSchedule response = api.showTaskSchedule(taskId);

        // TODO: test validations
    }
    
    /**
     * Updates the existing task schedule.
     *
     * **API Key Scope**: task_schedules / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskScheduleTest() throws ApiException {
        String taskId = null;
        TaskSchedule taskScheduleBody = null;
        TaskSchedule response = api.updateTaskSchedule(taskId, taskScheduleBody);

        // TODO: test validations
    }
    
}
