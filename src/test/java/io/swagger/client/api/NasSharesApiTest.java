/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.Error;
import io.swagger.client.model.NasShare;
import io.swagger.client.model.NasShareCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NasSharesApi
 */
@Ignore
public class NasSharesApiTest {

    private final NasSharesApi api = new NasSharesApi();

    
    /**
     * Creates a new NAS share.
     *
     * **API Key Scope**: nas_shares / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNasShareByNasTest() throws ApiException {
        String nasId = null;
        NasShare nasShareBody = null;
        NasShare response = api.createNasShareByNas(nasId, nasShareBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific NAS share.
     *
     * **API Key Scope**: nas_shares / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyNasShareTest() throws ApiException {
        Integer nasShareId = null;
        api.destroyNasShare(nasShareId);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific NAS share.
     *
     * **API Key Scope**: nas_shares / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyNasShareByNasTest() throws ApiException {
        String nasId = null;
        Integer nasShareId = null;
        api.destroyNasShareByNas(nasId, nasShareId);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific NAS share.
     *
     * **API Key Scope**: nas_shares / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyNasShareByNasPoolTest() throws ApiException {
        String nasPoolId = null;
        Integer nasShareId = null;
        api.destroyNasShareByNasPool(nasPoolId, nasShareId);

        // TODO: test validations
    }
    
    /**
     * Lists all NAS shares.
     *
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexNasSharesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String path = null;
        String options = null;
        String username = null;
        String nasId = null;
        String nasPoolId = null;
        NasShareCollection response = api.indexNasShares(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId);

        // TODO: test validations
    }
    
    /**
     * Lists all NAS shares.
     *
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexNasSharesByNasTest() throws ApiException {
        String nasId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String path = null;
        String options = null;
        String username = null;
        String nasPoolId = null;
        NasShareCollection response = api.indexNasSharesByNas(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId);

        // TODO: test validations
    }
    
    /**
     * Lists all NAS shares.
     *
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexNasSharesByNasPoolTest() throws ApiException {
        String nasPoolId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String path = null;
        String options = null;
        String username = null;
        String nasId = null;
        NasShareCollection response = api.indexNasSharesByNasPool(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific NAS share.
     *
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showNasShareByNasTest() throws ApiException {
        String nasId = null;
        Integer nasShareId = null;
        NasShare response = api.showNasShareByNas(nasId, nasShareId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific NAS share.
     *
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showNasSharesTest() throws ApiException {
        Integer nasShareId = null;
        NasShare response = api.showNasShares(nasShareId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific NAS share.
     *
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showNasSharesByNasPoolTest() throws ApiException {
        String nasPoolId = null;
        Integer nasShareId = null;
        NasShare response = api.showNasSharesByNasPool(nasPoolId, nasShareId);

        // TODO: test validations
    }
    
    /**
     * Test an unsaved NAS Share.
     *
     * **API Key Scope**: nas_shares / test
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testNasShareTest() throws ApiException {
        String nasId = null;
        NasShare nasShareBody = null;
        ActiveJobStatus response = api.testNasShare(nasId, nasShareBody);

        // TODO: test validations
    }
    
    /**
     * Check result of a NAS Share test job.
     *
     * **API Key Scope**: nas_shares / test
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testResultNasShareTest() throws ApiException {
        String nasId = null;
        String jobId = null;
        ActiveJobStatus response = api.testResultNasShare(nasId, jobId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific NAS share.
     *
     * **API Key Scope**: nas_shares / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNasShareTest() throws ApiException {
        Integer nasShareId = null;
        NasShare nasShareBody = null;
        NasShare response = api.updateNasShare(nasShareId, nasShareBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific NAS share.
     *
     * **API Key Scope**: nas_shares / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNasShareByNasTest() throws ApiException {
        String nasId = null;
        Integer nasShareId = null;
        NasShare nasShareBody = null;
        NasShare response = api.updateNasShareByNas(nasId, nasShareId, nasShareBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific NAS share.
     *
     * **API Key Scope**: nas_shares / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNasShareByNasPoolTest() throws ApiException {
        String nasPoolId = null;
        Integer nasShareId = null;
        NasShare nasShareBody = null;
        NasShare response = api.updateNasShareByNasPool(nasPoolId, nasShareId, nasShareBody);

        // TODO: test validations
    }
    
}
