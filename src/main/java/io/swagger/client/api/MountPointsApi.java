/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.MountPoint;
import io.swagger.client.model.MountPointCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MountPointsApi {
    private ApiClient apiClient;

    public MountPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MountPointsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createMountPoint
     * @param mountPointBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMountPointCall(MountPoint mountPointBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mountPointBody;

        // create path and map variables
        String localVarPath = "/mount_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMountPointValidateBeforeCall(MountPoint mountPointBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mountPointBody' is set
        if (mountPointBody == null) {
            throw new ApiException("Missing the required parameter 'mountPointBody' when calling createMountPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = createMountPointCall(mountPointBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new mount point.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MountPoint createMountPoint(MountPoint mountPointBody) throws ApiException {
        ApiResponse<MountPoint> resp = createMountPointWithHttpInfo(mountPointBody);
        return resp.getData();
    }

    /**
     * Creates a new mount point.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MountPoint> createMountPointWithHttpInfo(MountPoint mountPointBody) throws ApiException {
        com.squareup.okhttp.Call call = createMountPointValidateBeforeCall(mountPointBody, null, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new mount point. (asynchronously)
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     * @param mountPointBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMountPointAsync(MountPoint mountPointBody, final ApiCallback<MountPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMountPointValidateBeforeCall(mountPointBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyMountPointCall(String mountPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", apiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyMountPointValidateBeforeCall(String mountPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling destroyMountPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyMountPointCall(mountPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific mount point.
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyMountPoint(String mountPointId) throws ApiException {
        destroyMountPointWithHttpInfo(mountPointId);
    }

    /**
     * Destroys a specific mount point.
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyMountPointWithHttpInfo(String mountPointId) throws ApiException {
        com.squareup.okhttp.Call call = destroyMountPointValidateBeforeCall(mountPointId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific mount point. (asynchronously)
     * **API Key Scope**: mount_points / destroy
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyMountPointAsync(String mountPointId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyMountPointValidateBeforeCall(mountPointId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexMountPoints
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexMountPointsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (target != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target", target));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (scanInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scan_interval", scanInterval));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexMountPointsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexMountPointsCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all mount points.
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @return MountPointCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MountPointCollection indexMountPoints(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price) throws ApiException {
        ApiResponse<MountPointCollection> resp = indexMountPointsWithHttpInfo(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price);
        return resp.getData();
    }

    /**
     * Lists all mount points.
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;MountPointCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MountPointCollection> indexMountPointsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price) throws ApiException {
        com.squareup.okhttp.Call call = indexMountPointsValidateBeforeCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, null, null);
        Type localVarReturnType = new TypeToken<MountPointCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all mount points. (asynchronously)
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param target Filter on mount point target (optional)
     * @param type Filter on type (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param comment Filter on comment (optional)
     * @param scanInterval Filter on mount point scan interval (optional)
     * @param price Filter on price (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexMountPointsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String target, String type, String options, String username, String comment, String scanInterval, String price, final ApiCallback<MountPointCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexMountPointsValidateBeforeCall(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MountPointCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showMountPointCall(String mountPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", apiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showMountPointValidateBeforeCall(String mountPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling showMountPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = showMountPointCall(mountPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific mount point&#x60;.
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MountPoint showMountPoint(String mountPointId) throws ApiException {
        ApiResponse<MountPoint> resp = showMountPointWithHttpInfo(mountPointId);
        return resp.getData();
    }

    /**
     * Displays a specific mount point&#x60;.
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MountPoint> showMountPointWithHttpInfo(String mountPointId) throws ApiException {
        com.squareup.okhttp.Call call = showMountPointValidateBeforeCall(mountPointId, null, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific mount point&#x60;. (asynchronously)
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showMountPointAsync(String mountPointId, final ApiCallback<MountPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showMountPointValidateBeforeCall(mountPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMountPoint
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMountPointCall(String mountPointId, MountPoint mountPointBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mountPointBody;

        // create path and map variables
        String localVarPath = "/mount_points/{mount_point_id}"
            .replaceAll("\\{" + "mount_point_id" + "\\}", apiClient.escapeString(mountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMountPointValidateBeforeCall(String mountPointId, MountPoint mountPointBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mountPointId' is set
        if (mountPointId == null) {
            throw new ApiException("Missing the required parameter 'mountPointId' when calling updateMountPoint(Async)");
        }
        
        // verify the required parameter 'mountPointBody' is set
        if (mountPointBody == null) {
            throw new ApiException("Missing the required parameter 'mountPointBody' when calling updateMountPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMountPointCall(mountPointId, mountPointBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific mount point&#x60;.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @return MountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MountPoint updateMountPoint(String mountPointId, MountPoint mountPointBody) throws ApiException {
        ApiResponse<MountPoint> resp = updateMountPointWithHttpInfo(mountPointId, mountPointBody);
        return resp.getData();
    }

    /**
     * Updates a specific mount point&#x60;.
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @return ApiResponse&lt;MountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MountPoint> updateMountPointWithHttpInfo(String mountPointId, MountPoint mountPointBody) throws ApiException {
        com.squareup.okhttp.Call call = updateMountPointValidateBeforeCall(mountPointId, mountPointBody, null, null);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific mount point&#x60;. (asynchronously)
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     * @param mountPointId Numeric ID or name of mount point. (required)
     * @param mountPointBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMountPointAsync(String mountPointId, MountPoint mountPointBody, final ApiCallback<MountPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMountPointValidateBeforeCall(mountPointId, mountPointBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MountPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
