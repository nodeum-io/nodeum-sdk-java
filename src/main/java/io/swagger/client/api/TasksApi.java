/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Task;
import io.swagger.client.model.TaskCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient apiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTask
     * @param taskBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTaskCall(Task taskBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskBody;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskValidateBeforeCall(Task taskBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskBody' is set
        if (taskBody == null) {
            throw new ApiException("Missing the required parameter 'taskBody' when calling createTask(Async)");
        }
        

        com.squareup.okhttp.Call call = createTaskCall(taskBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new task.
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task createTask(Task taskBody) throws ApiException {
        ApiResponse<Task> resp = createTaskWithHttpInfo(taskBody);
        return resp.getData();
    }

    /**
     * Creates a new task.
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> createTaskWithHttpInfo(Task taskBody) throws ApiException {
        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(taskBody, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new task. (asynchronously)
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskAsync(Task taskBody, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(taskBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyTaskValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTask(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyTaskCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific task.
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyTask(String taskId) throws ApiException {
        destroyTaskWithHttpInfo(taskId);
    }

    /**
     * Destroys a specific task.
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = destroyTaskValidateBeforeCall(taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific task. (asynchronously)
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyTaskAsync(String taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyTaskValidateBeforeCall(taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexTasks
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTasksCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (priority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
        if (conflictResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("conflict_resolution", conflictResolution));
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if (activate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activate", activate));
        if (creationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation_date", creationDate));
        if (creationUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creation_username", creationUsername));
        if (modificationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_date", modificationDate));
        if (modificationUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modification_username", modificationUsername));
        if (jobStarted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_started", jobStarted));
        if (jobFinished != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_finished", jobFinished));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (processedSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processed_size", processedSize));
        if (toProcessSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_process_size", toProcessSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTasksValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTasksCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tasks.
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @return TaskCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskCollection indexTasks(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize) throws ApiException {
        ApiResponse<TaskCollection> resp = indexTasksWithHttpInfo(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize);
        return resp.getData();
    }

    /**
     * Lists all tasks.
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @return ApiResponse&lt;TaskCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskCollection> indexTasksWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize) throws ApiException {
        com.squareup.okhttp.Call call = indexTasksValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, null, null);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tasks. (asynchronously)
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTasksAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ApiCallback<TaskCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTasksValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTaskValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTask(Async)");
        }
        

        com.squareup.okhttp.Call call = showTaskCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific task.
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task showTask(String taskId) throws ApiException {
        ApiResponse<Task> resp = showTaskWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Displays a specific task.
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> showTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = showTaskValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific task. (asynchronously)
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTaskAsync(String taskId, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTaskValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaskCall(String taskId, Task taskBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskValidateBeforeCall(String taskId, Task taskBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskBody' is set
        if (taskBody == null) {
            throw new ApiException("Missing the required parameter 'taskBody' when calling updateTask(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaskCall(taskId, taskBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific task.
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task updateTask(String taskId, Task taskBody) throws ApiException {
        ApiResponse<Task> resp = updateTaskWithHttpInfo(taskId, taskBody);
        return resp.getData();
    }

    /**
     * Updates a specific task.
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> updateTaskWithHttpInfo(String taskId, Task taskBody) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskValidateBeforeCall(taskId, taskBody, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific task. (asynchronously)
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(String taskId, Task taskBody, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskValidateBeforeCall(taskId, taskBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
