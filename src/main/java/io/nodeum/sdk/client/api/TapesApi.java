/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.MountStatus;
import io.nodeum.sdk.client.model.Tape;
import io.nodeum.sdk.client.model.TapeCollection;
import io.nodeum.sdk.client.model.TapeStat;
import io.nodeum.sdk.client.model.TapeStatCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapesApi {
    private ApiClient localVarApiClient;

    public TapesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for indexTapeStats
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape statistics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeStatsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapeStatsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTapeStatsCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * List all tape statistics.
     * **API Key Scope**: tape_stats / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @return TapeStatCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape statistics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TapeStatCollection indexTapeStats(Integer limit, Integer offset) throws ApiException {
        ApiResponse<TapeStatCollection> localVarResp = indexTapeStatsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List all tape statistics.
     * **API Key Scope**: tape_stats / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @return ApiResponse&lt;TapeStatCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape statistics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeStatCollection> indexTapeStatsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = indexTapeStatsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<TapeStatCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all tape statistics. (asynchronously)
     * **API Key Scope**: tape_stats / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape statistics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapeStatsAsync(Integer limit, Integer offset, final ApiCallback<TapeStatCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapeStatsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TapeStatCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapes
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tapeLibraryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tape_library_id", tapeLibraryId));
        }

        if (poolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool_id", poolId));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (locked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locked", locked));
        }

        if (scratch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scratch", scratch));
        }

        if (cleaning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cleaning", cleaning));
        }

        if (writeProtect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write_protect", writeProtect));
        }

        if (mounted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounted", mounted));
        }

        if (ejected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ejected", ejected));
        }

        if (known != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("known", known));
        }

        if (mountCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mount_count", mountCount));
        }

        if (dateIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_in", dateIn));
        }

        if (dateMove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_move", dateMove));
        }

        if (free != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("free", free));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (lastSizeUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_size_update", lastSizeUpdate));
        }

        if (lastMaintenance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_maintenance", lastMaintenance));
        }

        if (lastRepack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_repack", lastRepack));
        }

        if (repackStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repack_status", repackStatus));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (forceImportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_import_type", forceImportType));
        }

        if (needToCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("need_to_check", needToCheck));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTapesCall(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        return localVarCall;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapes(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return localVarResp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        okhttp3.Call localVarCall = indexTapesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByPoolCall(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/tapes"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tapeLibraryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tape_library_id", tapeLibraryId));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (locked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locked", locked));
        }

        if (scratch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scratch", scratch));
        }

        if (cleaning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cleaning", cleaning));
        }

        if (writeProtect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write_protect", writeProtect));
        }

        if (mounted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounted", mounted));
        }

        if (ejected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ejected", ejected));
        }

        if (known != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("known", known));
        }

        if (mountCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mount_count", mountCount));
        }

        if (dateIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_in", dateIn));
        }

        if (dateMove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_move", dateMove));
        }

        if (free != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("free", free));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (lastSizeUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_size_update", lastSizeUpdate));
        }

        if (lastMaintenance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_maintenance", lastMaintenance));
        }

        if (lastRepack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_repack", lastRepack));
        }

        if (repackStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repack_status", repackStatus));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (forceImportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_import_type", forceImportType));
        }

        if (needToCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("need_to_check", needToCheck));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByPoolValidateBeforeCall(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling indexTapesByPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByPoolCall(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        return localVarCall;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByPool(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByPoolWithHttpInfo(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return localVarResp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByPoolWithHttpInfo(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByPoolValidateBeforeCall(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param poolId Numeric ID, or name of pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByPoolAsync(String poolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByPoolValidateBeforeCall(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapesByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByTapeLibraryCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (poolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool_id", poolId));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (locked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locked", locked));
        }

        if (scratch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scratch", scratch));
        }

        if (cleaning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cleaning", cleaning));
        }

        if (writeProtect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write_protect", writeProtect));
        }

        if (mounted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounted", mounted));
        }

        if (ejected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ejected", ejected));
        }

        if (known != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("known", known));
        }

        if (mountCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mount_count", mountCount));
        }

        if (dateIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_in", dateIn));
        }

        if (dateMove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_move", dateMove));
        }

        if (free != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("free", free));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (lastSizeUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_size_update", lastSizeUpdate));
        }

        if (lastMaintenance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_maintenance", lastMaintenance));
        }

        if (lastRepack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_repack", lastRepack));
        }

        if (repackStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repack_status", repackStatus));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (forceImportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_import_type", forceImportType));
        }

        if (needToCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("need_to_check", needToCheck));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapesByTapeLibraryValidateBeforeCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapesByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = indexTapesByTapeLibraryCall(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        return localVarCall;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public TapeCollection indexTapesByTapeLibrary(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> localVarResp = indexTapesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return localVarResp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeCollection> indexTapesByTapeLibraryWithHttpInfo(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        okhttp3.Call localVarCall = indexTapesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tapes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapesByTapeLibraryAsync(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String poolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, _callback);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusTape
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeCall(String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes/{tape_id}/mount"
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusTapeValidateBeforeCall(String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling mountStatusTape(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusTapeCall(tapeId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusTape(String tapeId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusTapeWithHttpInfo(tapeId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusTapeWithHttpInfo(String tapeId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusTapeValidateBeforeCall(tapeId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Tape. (asynchronously)
     * **API Key Scope**: tapes / mount_status
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeAsync(String tapeId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusTapeValidateBeforeCall(tapeId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusTapeByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeByPoolCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/tapes/{tape_id}/mount"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusTapeByPoolValidateBeforeCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling mountStatusTapeByPool(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling mountStatusTapeByPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusTapeByPoolCall(poolId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusTapeByPool(String poolId, String tapeId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusTapeByPoolWithHttpInfo(poolId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusTapeByPoolWithHttpInfo(String poolId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusTapeByPoolValidateBeforeCall(poolId, tapeId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Tape. (asynchronously)
     * **API Key Scope**: tapes / mount_status
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeByPoolAsync(String poolId, String tapeId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusTapeByPoolValidateBeforeCall(poolId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusTapeByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeByTapeLibraryCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusTapeByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling mountStatusTapeByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling mountStatusTapeByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusTapeByTapeLibraryCall(tapeLibraryId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusTapeByTapeLibrary(String tapeLibraryId, String tapeId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusTapeByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Tape.
     * **API Key Scope**: tapes / mount_status
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusTapeByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Tape. (asynchronously)
     * **API Key Scope**: tapes / mount_status
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusTapeByTapeLibraryAsync(String tapeLibraryId, String tapeId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTape
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeCall(String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes/{tape_id}"
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeValidateBeforeCall(String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTape(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeCall(tapeId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public Tape showTape(String tapeId) throws ApiException {
        ApiResponse<Tape> localVarResp = showTapeWithHttpInfo(tapeId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tape> showTapeWithHttpInfo(String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeValidateBeforeCall(tapeId, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeAsync(String tapeId, final ApiCallback<Tape> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeValidateBeforeCall(tapeId, _callback);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeByPoolCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/tapes/{tape_id}"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeByPoolValidateBeforeCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showTapeByPool(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeByPoolCall(poolId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public Tape showTapeByPool(String poolId, String tapeId) throws ApiException {
        ApiResponse<Tape> localVarResp = showTapeByPoolWithHttpInfo(poolId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tape> showTapeByPoolWithHttpInfo(String poolId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeByPoolValidateBeforeCall(poolId, tapeId, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeByPoolAsync(String poolId, String tapeId, final ApiCallback<Tape> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeByPoolValidateBeforeCall(poolId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeByTapeLibraryCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes/{tape_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeByTapeLibraryCall(tapeLibraryId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public Tape showTapeByTapeLibrary(String tapeLibraryId, String tapeId) throws ApiException {
        ApiResponse<Tape> localVarResp = showTapeByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tape> showTapeByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeByTapeLibraryAsync(String tapeLibraryId, String tapeId, final ApiCallback<Tape> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeStat
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatCall(String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes/{tape_id}/tape_stat"
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeStatValidateBeforeCall(String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeStat(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeStatCall(tapeId, _callback);
        return localVarCall;

    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return TapeStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TapeStat showTapeStat(String tapeId) throws ApiException {
        ApiResponse<TapeStat> localVarResp = showTapeStatWithHttpInfo(tapeId);
        return localVarResp.getData();
    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;TapeStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeStat> showTapeStatWithHttpInfo(String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeStatValidateBeforeCall(tapeId, null);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display statistic for a specific tape. (asynchronously)
     * **API Key Scope**: tape_stats / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatAsync(String tapeId, final ApiCallback<TapeStat> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeStatValidateBeforeCall(tapeId, _callback);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeStatByPool
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatByPoolCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{pool_id}/tapes/{tape_id}/tape_stat"
            .replaceAll("\\{" + "pool_id" + "\\}", localVarApiClient.escapeString(poolId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeStatByPoolValidateBeforeCall(String poolId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling showTapeStatByPool(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeStatByPool(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeStatByPoolCall(poolId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return TapeStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TapeStat showTapeStatByPool(String poolId, String tapeId) throws ApiException {
        ApiResponse<TapeStat> localVarResp = showTapeStatByPoolWithHttpInfo(poolId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;TapeStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeStat> showTapeStatByPoolWithHttpInfo(String poolId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeStatByPoolValidateBeforeCall(poolId, tapeId, null);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display statistic for a specific tape. (asynchronously)
     * **API Key Scope**: tape_stats / show
     * @param poolId Numeric ID, or name of pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatByPoolAsync(String poolId, String tapeId, final ApiCallback<TapeStat> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeStatByPoolValidateBeforeCall(poolId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapeStatByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatByTapeLibraryCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat"
            .replaceAll("\\{" + "tape_library_id" + "\\}", localVarApiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", localVarApiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapeStatByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeStatByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeStatByTapeLibrary(Async)");
        }
        

        okhttp3.Call localVarCall = showTapeStatByTapeLibraryCall(tapeLibraryId, tapeId, _callback);
        return localVarCall;

    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return TapeStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public TapeStat showTapeStatByTapeLibrary(String tapeLibraryId, String tapeId) throws ApiException {
        ApiResponse<TapeStat> localVarResp = showTapeStatByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
        return localVarResp.getData();
    }

    /**
     * Display statistic for a specific tape.
     * **API Key Scope**: tape_stats / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;TapeStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapeStat> showTapeStatByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeId) throws ApiException {
        okhttp3.Call localVarCall = showTapeStatByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, null);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display statistic for a specific tape. (asynchronously)
     * **API Key Scope**: tape_stats / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape statistic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapeStatByTapeLibraryAsync(String tapeLibraryId, String tapeId, final ApiCallback<TapeStat> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapeStatByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, _callback);
        Type localVarReturnType = new TypeToken<TapeStat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
