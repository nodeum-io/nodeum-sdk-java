/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.Error;
import io.swagger.client.model.TapeDrive;
import io.swagger.client.model.TapeDriveCollection;
import io.swagger.client.model.TapeDriveDeviceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapeDrivesApi {
    private ApiClient apiClient;

    public TapeDrivesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapeDrivesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTapeDriveByTapeLibraryCall(String tapeLibraryId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling createTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling createTapeDriveByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = createTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new tape drive.
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDrive createTapeDriveByTapeLibrary(String tapeLibraryId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> resp = createTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveBody);
        return resp.getData();
    }

    /**
     * Creates a new tape drive.
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDrive> createTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, TapeDrive tapeDriveBody) throws ApiException {
        com.squareup.okhttp.Call call = createTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveBody, null, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / create
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTapeDriveByTapeLibraryAsync(String tapeLibraryId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyTapeDriveCall(String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyTapeDriveValidateBeforeCall(String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling destroyTapeDrive(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyTapeDriveCall(tapeDriveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyTapeDrive(String tapeDriveId) throws ApiException {
        destroyTapeDriveWithHttpInfo(tapeDriveId);
    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyTapeDriveWithHttpInfo(String tapeDriveId) throws ApiException {
        com.squareup.okhttp.Call call = destroyTapeDriveValidateBeforeCall(tapeDriveId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / destroy
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyTapeDriveAsync(String tapeDriveId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyTapeDriveValidateBeforeCall(tapeDriveId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for destroyTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling destroyTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling destroyTapeDriveByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId) throws ApiException {
        destroyTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
    }

    /**
     * Destroys a specific tape drive.
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId) throws ApiException {
        com.squareup.okhttp.Call call = destroyTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexTapeDriveDevices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapeDriveDevicesCall(String tapeLibraryId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/-/devices"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapeDriveDevicesValidateBeforeCall(String tapeLibraryId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapeDriveDevices(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTapeDriveDevicesCall(tapeLibraryId, jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists tape drives devices.
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (optional)
     * @return TapeDriveDeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDriveDeviceCollection indexTapeDriveDevices(String tapeLibraryId, String jobId) throws ApiException {
        ApiResponse<TapeDriveDeviceCollection> resp = indexTapeDriveDevicesWithHttpInfo(tapeLibraryId, jobId);
        return resp.getData();
    }

    /**
     * Lists tape drives devices.
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;TapeDriveDeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDriveDeviceCollection> indexTapeDriveDevicesWithHttpInfo(String tapeLibraryId, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = indexTapeDriveDevicesValidateBeforeCall(tapeLibraryId, jobId, null, null);
        Type localVarReturnType = new TypeToken<TapeDriveDeviceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists tape drives devices. (asynchronously)
     * **API Key Scope**: tape_drives / devices
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param jobId ID of active job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapeDriveDevicesAsync(String tapeLibraryId, String jobId, final ApiCallback<TapeDriveDeviceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapeDriveDevicesValidateBeforeCall(tapeLibraryId, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDriveDeviceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTapeDrives
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapeDrivesCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (tapeLibraryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tape_library_id", tapeLibraryId));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (scsiAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scsi_address", scsiAddress));
        if (vendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor", vendor));
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product", product));
        if (firmware != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("firmware", firmware));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (sgdevice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sgdevice", sgdevice));
        if (libso != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("libso", libso));
        if (acs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acs", acs));
        if (lsm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lsm", lsm));
        if (panel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("panel", panel));
        if (transport != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport", transport));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (full != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("full", full));
        if (mountCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mount_count", mountCount));
        if (useTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_to", useTo));
        if (useBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_by", useBy));
        if (useFileProcessedSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_processed_size", useFileProcessedSize));
        if (useFileSizeToProcess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_size_to_process", useFileSizeToProcess));
        if (useFileNameProcessed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_name_processed", useFileNameProcessed));
        if (bandwidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bandwidth", bandwidth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapeDrivesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTapeDrivesCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TapeDriveCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDriveCollection indexTapeDrives(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        ApiResponse<TapeDriveCollection> resp = indexTapeDrivesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
        return resp.getData();
    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TapeDriveCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDriveCollection> indexTapeDrivesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        com.squareup.okhttp.Call call = indexTapeDrivesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, null, null);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tape drives. (asynchronously)
     * **API Key Scope**: tape_drives / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapeDrivesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback<TapeDriveCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapeDrivesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTapeDrivesByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapeDrivesByTapeLibraryCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (scsiAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scsi_address", scsiAddress));
        if (vendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor", vendor));
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product", product));
        if (firmware != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("firmware", firmware));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (sgdevice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sgdevice", sgdevice));
        if (libso != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("libso", libso));
        if (acs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acs", acs));
        if (lsm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lsm", lsm));
        if (panel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("panel", panel));
        if (transport != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transport", transport));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (full != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("full", full));
        if (mountCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mount_count", mountCount));
        if (useTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_to", useTo));
        if (useBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_by", useBy));
        if (useFileProcessedSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_processed_size", useFileProcessedSize));
        if (useFileSizeToProcess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_size_to_process", useFileSizeToProcess));
        if (useFileNameProcessed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("use_file_name_processed", useFileNameProcessed));
        if (bandwidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bandwidth", bandwidth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapeDrivesByTapeLibraryValidateBeforeCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapeDrivesByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTapeDrivesByTapeLibraryCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return TapeDriveCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDriveCollection indexTapeDrivesByTapeLibrary(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        ApiResponse<TapeDriveCollection> resp = indexTapeDrivesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
        return resp.getData();
    }

    /**
     * Lists all tape drives.
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @return ApiResponse&lt;TapeDriveCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDriveCollection> indexTapeDrivesByTapeLibraryWithHttpInfo(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth) throws ApiException {
        com.squareup.okhttp.Call call = indexTapeDrivesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, null, null);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tape drives. (asynchronously)
     * **API Key Scope**: tape_drives / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param scsiAddress Filter on scsi address (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param sgdevice Filter on sgdevice (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param lsm Filter on lsm (optional)
     * @param panel Filter on panel (optional)
     * @param transport Filter on transport (optional)
     * @param status Filter on status (optional)
     * @param full Filter on full (optional)
     * @param mountCount Filter on mount count (optional)
     * @param useTo Filter on use to (optional)
     * @param useBy Filter on use by (optional)
     * @param useFileProcessedSize Filter on use file processed size (optional)
     * @param useFileSizeToProcess Filter on use file size to process (optional)
     * @param useFileNameProcessed Filter on use file name processed (optional)
     * @param bandwidth Filter on bandwidth (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapeDrivesByTapeLibraryAsync(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String scsiAddress, String vendor, String product, String firmware, String device, String sgdevice, String libso, String acs, String lsm, String panel, String transport, String status, String full, String mountCount, String useTo, String useBy, String useFileProcessedSize, String useFileSizeToProcess, String useFileNameProcessed, String bandwidth, final ApiCallback<TapeDriveCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapeDrivesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDriveCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeDriveCall(String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeDriveValidateBeforeCall(String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling showTapeDrive(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeDriveCall(tapeDriveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDrive showTapeDrive(String tapeDriveId) throws ApiException {
        ApiResponse<TapeDrive> resp = showTapeDriveWithHttpInfo(tapeDriveId);
        return resp.getData();
    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDrive> showTapeDriveWithHttpInfo(String tapeDriveId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeDriveValidateBeforeCall(tapeDriveId, null, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / show
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeDriveAsync(String tapeDriveId, final ApiCallback<TapeDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeDriveValidateBeforeCall(tapeDriveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling showTapeDriveByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDrive showTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId) throws ApiException {
        ApiResponse<TapeDrive> resp = showTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
        return resp.getData();
    }

    /**
     * Displays a specific tape drive.
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDrive> showTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, null, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, final ApiCallback<TapeDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTapeDrive
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTapeDriveCall(String tapeDriveId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTapeDriveValidateBeforeCall(String tapeDriveId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling updateTapeDrive(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling updateTapeDrive(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTapeDriveCall(tapeDriveId, tapeDriveBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDrive updateTapeDrive(String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> resp = updateTapeDriveWithHttpInfo(tapeDriveId, tapeDriveBody);
        return resp.getData();
    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDrive> updateTapeDriveWithHttpInfo(String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        com.squareup.okhttp.Call call = updateTapeDriveValidateBeforeCall(tapeDriveId, tapeDriveBody, null, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / update
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTapeDriveAsync(String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTapeDriveValidateBeforeCall(tapeDriveId, tapeDriveBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTapeDriveByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTapeDriveByTapeLibraryCall(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tapeDriveBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_drive_id" + "\\}", apiClient.escapeString(tapeDriveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTapeDriveByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveId' is set
        if (tapeDriveId == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveId' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeDriveBody' is set
        if (tapeDriveBody == null) {
            throw new ApiException("Missing the required parameter 'tapeDriveBody' when calling updateTapeDriveByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTapeDriveByTapeLibraryCall(tapeLibraryId, tapeDriveId, tapeDriveBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return TapeDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeDrive updateTapeDriveByTapeLibrary(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        ApiResponse<TapeDrive> resp = updateTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId, tapeDriveBody);
        return resp.getData();
    }

    /**
     * Updates a specific tape drive.
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @return ApiResponse&lt;TapeDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeDrive> updateTapeDriveByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody) throws ApiException {
        com.squareup.okhttp.Call call = updateTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, tapeDriveBody, null, null);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific tape drive. (asynchronously)
     * **API Key Scope**: tape_drives / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeDriveId Numeric ID, serial, or name of tape drive. (required)
     * @param tapeDriveBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTapeDriveByTapeLibraryAsync(String tapeLibraryId, String tapeDriveId, TapeDrive tapeDriveBody, final ApiCallback<TapeDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTapeDriveByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeDriveId, tapeDriveBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
