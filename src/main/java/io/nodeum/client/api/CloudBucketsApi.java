/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.CloudBucket;
import io.nodeum.client.model.CloudBucketCollection;
import io.nodeum.client.model.CloudBucketSimpleCollection;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudBucketsApi {
    private ApiClient localVarApiClient;

    public CloudBucketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudBucketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for indexCloudBuckets
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsCall(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cloudConnectorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_connector_id", cloudConnectorId));
        }

        if (cloudPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_pool_id", cloudPoolId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCloudBucketsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexCloudBucketsCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucketCollection indexCloudBuckets(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> localVarResp = indexCloudBucketsWithHttpInfo(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price);
        return localVarResp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price) throws ApiException {
        okhttp3.Call localVarCall = indexCloudBucketsValidateBeforeCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String cloudPoolId, String name, String location, String price, final ApiCallback<CloudBucketCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCloudBucketsValidateBeforeCall(limit, offset, sortBy, id, cloudConnectorId, cloudPoolId, name, location, price, _callback);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCloudBucketsByCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsByCloudConnectorCall(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cloudPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_pool_id", cloudPoolId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCloudBucketsByCloudConnectorValidateBeforeCall(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling indexCloudBucketsByCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = indexCloudBucketsByCloudConnectorCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucketCollection indexCloudBucketsByCloudConnector(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> localVarResp = indexCloudBucketsByCloudConnectorWithHttpInfo(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price);
        return localVarResp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsByCloudConnectorWithHttpInfo(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price) throws ApiException {
        okhttp3.Call localVarCall = indexCloudBucketsByCloudConnectorValidateBeforeCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudPoolId Filter on cloud pool id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsByCloudConnectorAsync(String cloudConnectorId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudPoolId, String name, String location, String price, final ApiCallback<CloudBucketCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCloudBucketsByCloudConnectorValidateBeforeCall(cloudConnectorId, limit, offset, sortBy, id, cloudPoolId, name, location, price, _callback);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexCloudBucketsByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsByCloudPoolCall(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/cloud_buckets"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cloudConnectorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_connector_id", cloudConnectorId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexCloudBucketsByCloudPoolValidateBeforeCall(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling indexCloudBucketsByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexCloudBucketsByCloudPoolCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, _callback);
        return localVarCall;

    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return CloudBucketCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucketCollection indexCloudBucketsByCloudPool(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price) throws ApiException {
        ApiResponse<CloudBucketCollection> localVarResp = indexCloudBucketsByCloudPoolWithHttpInfo(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);
        return localVarResp.getData();
    }

    /**
     * Lists all cloud buckets.
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;CloudBucketCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucketCollection> indexCloudBucketsByCloudPoolWithHttpInfo(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price) throws ApiException {
        okhttp3.Call localVarCall = indexCloudBucketsByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, null);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all cloud buckets. (asynchronously)
     * **API Key Scope**: cloud_buckets / index
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param cloudConnectorId Filter on cloud connector id (optional)
     * @param name Filter on name (optional)
     * @param location Filter on location (optional)
     * @param price Filter on price (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cloud buckets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCloudBucketsByCloudPoolAsync(String cloudPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String cloudConnectorId, String name, String location, String price, final ApiCallback<CloudBucketCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexCloudBucketsByCloudPoolValidateBeforeCall(cloudPoolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price, _callback);
        Type localVarReturnType = new TypeToken<CloudBucketCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusCloudBucket
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketCall(String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_buckets/{cloud_bucket_id}/mount"
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusCloudBucketValidateBeforeCall(String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling mountStatusCloudBucket(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusCloudBucketCall(cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusCloudBucket(String cloudBucketId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusCloudBucketWithHttpInfo(cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusCloudBucketWithHttpInfo(String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusCloudBucketValidateBeforeCall(cloudBucketId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketAsync(String cloudBucketId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusCloudBucketValidateBeforeCall(cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusCloudBucketByCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketByCloudConnectorCall(String cloudConnectorId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusCloudBucketByCloudConnectorValidateBeforeCall(String cloudConnectorId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling mountStatusCloudBucketByCloudConnector(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling mountStatusCloudBucketByCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudConnectorCall(cloudConnectorId, cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusCloudBucketByCloudConnector(String cloudConnectorId, String cloudBucketId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusCloudBucketByCloudConnectorWithHttpInfo(String cloudConnectorId, String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketByCloudConnectorAsync(String cloudConnectorId, String cloudBucketId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusCloudBucketByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketByCloudPoolCall(String cloudPoolId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/cloud_buckets/{cloud_bucket_id}/mount"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusCloudBucketByCloudPoolValidateBeforeCall(String cloudPoolId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling mountStatusCloudBucketByCloudPool(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling mountStatusCloudBucketByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudPoolCall(cloudPoolId, cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusCloudBucketByCloudPool(String cloudPoolId, String cloudBucketId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusCloudBucketByCloudPoolWithHttpInfo(cloudPoolId, cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of Cloud bucket.
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusCloudBucketByCloudPoolWithHttpInfo(String cloudPoolId, String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of Cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / mount_status
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusCloudBucketByCloudPoolAsync(String cloudPoolId, String cloudBucketId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showCloudBucket
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketCall(String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCloudBucketValidateBeforeCall(String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucket(Async)");
        }
        

        okhttp3.Call localVarCall = showCloudBucketCall(cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucket showCloudBucket(String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> localVarResp = showCloudBucketWithHttpInfo(cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucket> showCloudBucketWithHttpInfo(String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = showCloudBucketValidateBeforeCall(cloudBucketId, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketAsync(String cloudBucketId, final ApiCallback<CloudBucket> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCloudBucketValidateBeforeCall(cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showCloudBucketByCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketByCloudConnectorCall(String cloudConnectorId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCloudBucketByCloudConnectorValidateBeforeCall(String cloudConnectorId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling showCloudBucketByCloudConnector(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucketByCloudConnector(Async)");
        }
        

        okhttp3.Call localVarCall = showCloudBucketByCloudConnectorCall(cloudConnectorId, cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucket showCloudBucketByCloudConnector(String cloudConnectorId, String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> localVarResp = showCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucket> showCloudBucketByCloudConnectorWithHttpInfo(String cloudConnectorId, String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = showCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketByCloudConnectorAsync(String cloudConnectorId, String cloudBucketId, final ApiCallback<CloudBucket> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCloudBucketByCloudConnectorValidateBeforeCall(cloudConnectorId, cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showCloudBucketByCloudPool
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketByCloudPoolCall(String cloudPoolId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_pools/{cloud_pool_id}/cloud_buckets/{cloud_bucket_id}"
            .replaceAll("\\{" + "cloud_pool_id" + "\\}", localVarApiClient.escapeString(cloudPoolId.toString()))
            .replaceAll("\\{" + "cloud_bucket_id" + "\\}", localVarApiClient.escapeString(cloudBucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCloudBucketByCloudPoolValidateBeforeCall(String cloudPoolId, String cloudBucketId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudPoolId' is set
        if (cloudPoolId == null) {
            throw new ApiException("Missing the required parameter 'cloudPoolId' when calling showCloudBucketByCloudPool(Async)");
        }
        
        // verify the required parameter 'cloudBucketId' is set
        if (cloudBucketId == null) {
            throw new ApiException("Missing the required parameter 'cloudBucketId' when calling showCloudBucketByCloudPool(Async)");
        }
        

        okhttp3.Call localVarCall = showCloudBucketByCloudPoolCall(cloudPoolId, cloudBucketId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return CloudBucket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucket showCloudBucketByCloudPool(String cloudPoolId, String cloudBucketId) throws ApiException {
        ApiResponse<CloudBucket> localVarResp = showCloudBucketByCloudPoolWithHttpInfo(cloudPoolId, cloudBucketId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific cloud bucket.
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @return ApiResponse&lt;CloudBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucket> showCloudBucketByCloudPoolWithHttpInfo(String cloudPoolId, String cloudBucketId) throws ApiException {
        okhttp3.Call localVarCall = showCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, null);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific cloud bucket. (asynchronously)
     * **API Key Scope**: cloud_buckets / show
     * @param cloudPoolId Numeric ID or name of cloud pool. (required)
     * @param cloudBucketId Numeric ID or name of cloud bucket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific cloud bucket. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showCloudBucketByCloudPoolAsync(String cloudPoolId, String cloudBucketId, final ApiCallback<CloudBucket> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCloudBucketByCloudPoolValidateBeforeCall(cloudPoolId, cloudBucketId, _callback);
        Type localVarReturnType = new TypeToken<CloudBucket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncCloudBuckets
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncCloudBucketsCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncCloudBucketsValidateBeforeCall(String cloudConnectorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling syncCloudBuckets(Async)");
        }
        

        okhttp3.Call localVarCall = syncCloudBucketsCall(cloudConnectorId, _callback);
        return localVarCall;

    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus syncCloudBuckets(String cloudConnectorId) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = syncCloudBucketsWithHttpInfo(cloudConnectorId);
        return localVarResp.getData();
    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> syncCloudBucketsWithHttpInfo(String cloudConnectorId) throws ApiException {
        okhttp3.Call localVarCall = syncCloudBucketsValidateBeforeCall(cloudConnectorId, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Synchronize internal cloud buckets with their remote equivalent. (asynchronously)
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncCloudBucketsAsync(String cloudConnectorId, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncCloudBucketsValidateBeforeCall(cloudConnectorId, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncResultCloudBuckets
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncResultCloudBucketsCall(String cloudConnectorId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", localVarApiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncResultCloudBucketsValidateBeforeCall(String cloudConnectorId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling syncResultCloudBuckets(Async)");
        }
        

        okhttp3.Call localVarCall = syncResultCloudBucketsCall(cloudConnectorId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Check result of cloud connector sync job.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @return CloudBucketSimpleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public CloudBucketSimpleCollection syncResultCloudBuckets(String cloudConnectorId, String jobId) throws ApiException {
        ApiResponse<CloudBucketSimpleCollection> localVarResp = syncResultCloudBucketsWithHttpInfo(cloudConnectorId, jobId);
        return localVarResp.getData();
    }

    /**
     * Check result of cloud connector sync job.
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;CloudBucketSimpleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudBucketSimpleCollection> syncResultCloudBucketsWithHttpInfo(String cloudConnectorId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = syncResultCloudBucketsValidateBeforeCall(cloudConnectorId, jobId, null);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check result of cloud connector sync job. (asynchronously)
     * **API Key Scope**: cloud_buckets / sync
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param jobId ID of active job (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simple list of cloud buckets. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncResultCloudBucketsAsync(String cloudConnectorId, String jobId, final ApiCallback<CloudBucketSimpleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncResultCloudBucketsValidateBeforeCall(cloudConnectorId, jobId, _callback);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
