/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CloudBucket
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T09:57:17.206Z")
public class CloudBucket {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("cloud_connector_id")
  private Integer cloudConnectorId = null;

  @SerializedName("cloud_pool_id")
  private Integer cloudPoolId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("files_count")
  private Integer filesCount = null;

  @SerializedName("files_size")
  private Integer filesSize = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("price")
  private String price = null;

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get cloudConnectorId
   * @return cloudConnectorId
  **/
  @ApiModelProperty(value = "")
  public Integer getCloudConnectorId() {
    return cloudConnectorId;
  }

   /**
   * Get cloudPoolId
   * @return cloudPoolId
  **/
  @ApiModelProperty(value = "")
  public Integer getCloudPoolId() {
    return cloudPoolId;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

   /**
   * Get filesCount
   * @return filesCount
  **/
  @ApiModelProperty(value = "")
  public Integer getFilesCount() {
    return filesCount;
  }

   /**
   * Get filesSize
   * @return filesSize
  **/
  @ApiModelProperty(value = "")
  public Integer getFilesSize() {
    return filesSize;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public String getLocation() {
    return location;
  }

   /**
   * Get price
   * @return price
  **/
  @ApiModelProperty(value = "")
  public String getPrice() {
    return price;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudBucket cloudBucket = (CloudBucket) o;
    return Objects.equals(this.id, cloudBucket.id) &&
        Objects.equals(this.cloudConnectorId, cloudBucket.cloudConnectorId) &&
        Objects.equals(this.cloudPoolId, cloudBucket.cloudPoolId) &&
        Objects.equals(this.name, cloudBucket.name) &&
        Objects.equals(this.filesCount, cloudBucket.filesCount) &&
        Objects.equals(this.filesSize, cloudBucket.filesSize) &&
        Objects.equals(this.location, cloudBucket.location) &&
        Objects.equals(this.price, cloudBucket.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, cloudConnectorId, cloudPoolId, name, filesCount, filesSize, location, price);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudBucket {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cloudConnectorId: ").append(toIndentedString(cloudConnectorId)).append("\n");
    sb.append("    cloudPoolId: ").append(toIndentedString(cloudPoolId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    filesCount: ").append(toIndentedString(filesCount)).append("\n");
    sb.append("    filesSize: ").append(toIndentedString(filesSize)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

