/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.Tape;
import io.swagger.client.model.TapeCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TapesApi
 */
@Ignore
public class TapesApiTest {

    private final TapesApi api = new TapesApi();

    
    /**
     * Lists all tapes.
     *
     * **API Key Scope**: tapes / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String tapeLibraryId = null;
        String tapePoolId = null;
        String barcode = null;
        String location = null;
        String type = null;
        String locked = null;
        String scratch = null;
        String cleaning = null;
        String writeProtect = null;
        String mounted = null;
        String ejected = null;
        String known = null;
        String mountCount = null;
        String dateIn = null;
        String dateMove = null;
        String free = null;
        String max = null;
        String lastSizeUpdate = null;
        String lastMaintenance = null;
        String lastRepack = null;
        String repackStatus = null;
        String hash = null;
        String forceImportType = null;
        String needToCheck = null;
        TapeCollection response = api.indexTapes(limit, offset, sortBy, id, tapeLibraryId, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);

        // TODO: test validations
    }
    
    /**
     * Lists all tapes.
     *
     * **API Key Scope**: tapes / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String tapePoolId = null;
        String barcode = null;
        String location = null;
        String type = null;
        String locked = null;
        String scratch = null;
        String cleaning = null;
        String writeProtect = null;
        String mounted = null;
        String ejected = null;
        String known = null;
        String mountCount = null;
        String dateIn = null;
        String dateMove = null;
        String free = null;
        String max = null;
        String lastSizeUpdate = null;
        String lastMaintenance = null;
        String lastRepack = null;
        String repackStatus = null;
        String hash = null;
        String forceImportType = null;
        String needToCheck = null;
        TapeCollection response = api.indexTapesByTapeLibrary(tapeLibraryId, limit, offset, sortBy, id, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);

        // TODO: test validations
    }
    
    /**
     * Lists all tapes.
     *
     * **API Key Scope**: tapes / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByTapePoolTest() throws ApiException {
        String tapePoolId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String tapeLibraryId = null;
        String barcode = null;
        String location = null;
        String type = null;
        String locked = null;
        String scratch = null;
        String cleaning = null;
        String writeProtect = null;
        String mounted = null;
        String ejected = null;
        String known = null;
        String mountCount = null;
        String dateIn = null;
        String dateMove = null;
        String free = null;
        String max = null;
        String lastSizeUpdate = null;
        String lastMaintenance = null;
        String lastRepack = null;
        String repackStatus = null;
        String hash = null;
        String forceImportType = null;
        String needToCheck = null;
        TapeCollection response = api.indexTapesByTapePool(tapePoolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);

        // TODO: test validations
    }
    
    /**
     * Displays a specific tape.
     *
     * **API Key Scope**: tapes / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTapeTest() throws ApiException {
        String tapeId = null;
        Tape response = api.showTape(tapeId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific tape.
     *
     * **API Key Scope**: tapes / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTapeByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        String tapeId = null;
        Tape response = api.showTapeByTapeLibrary(tapeLibraryId, tapeId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific tape.
     *
     * **API Key Scope**: tapes / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTapeByTapePoolTest() throws ApiException {
        String tapePoolId = null;
        String tapeId = null;
        Tape response = api.showTapeByTapePool(tapePoolId, tapeId);

        // TODO: test validations
    }
    
}
