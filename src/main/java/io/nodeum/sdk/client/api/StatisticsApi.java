/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.ByFileExtensionFacet;
import io.nodeum.sdk.client.model.ByGroupOwnerFacet;
import io.nodeum.sdk.client.model.ByPrimaryFacet;
import io.nodeum.sdk.client.model.BySecondaryFacet;
import io.nodeum.sdk.client.model.BySizeFacet;
import io.nodeum.sdk.client.model.ByUserOwnerFacet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient localVarApiClient;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for statisticsByFileExtension
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByFileExtensionCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_file_extension";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsByFileExtensionValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsByFileExtensionCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_file_extension
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ByFileExtensionFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ByFileExtensionFacet statisticsByFileExtension(String q, String dateAttr) throws ApiException {
        ApiResponse<ByFileExtensionFacet> localVarResp = statisticsByFileExtensionWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_file_extension
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;ByFileExtensionFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ByFileExtensionFacet> statisticsByFileExtensionWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsByFileExtensionValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<ByFileExtensionFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_file_extension
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByFileExtensionAsync(String q, String dateAttr, final ApiCallback<ByFileExtensionFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsByFileExtensionValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<ByFileExtensionFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statisticsByGroupOwner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByGroupOwnerCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_group_owner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsByGroupOwnerValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsByGroupOwnerCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_group_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ByGroupOwnerFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ByGroupOwnerFacet statisticsByGroupOwner(String q, String dateAttr) throws ApiException {
        ApiResponse<ByGroupOwnerFacet> localVarResp = statisticsByGroupOwnerWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_group_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;ByGroupOwnerFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ByGroupOwnerFacet> statisticsByGroupOwnerWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsByGroupOwnerValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<ByGroupOwnerFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_group_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByGroupOwnerAsync(String q, String dateAttr, final ApiCallback<ByGroupOwnerFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsByGroupOwnerValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<ByGroupOwnerFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statisticsByPrimaryName
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByPrimaryNameCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_primary_name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsByPrimaryNameValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsByPrimaryNameCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_primary_name
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ByPrimaryFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ByPrimaryFacet statisticsByPrimaryName(String q, String dateAttr) throws ApiException {
        ApiResponse<ByPrimaryFacet> localVarResp = statisticsByPrimaryNameWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_primary_name
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;ByPrimaryFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ByPrimaryFacet> statisticsByPrimaryNameWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsByPrimaryNameValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<ByPrimaryFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_primary_name
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByPrimaryNameAsync(String q, String dateAttr, final ApiCallback<ByPrimaryFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsByPrimaryNameValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<ByPrimaryFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statisticsBySecondaryStorage
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsBySecondaryStorageCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_secondary_storage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsBySecondaryStorageValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsBySecondaryStorageCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_secondary_storage
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return BySecondaryFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BySecondaryFacet statisticsBySecondaryStorage(String q, String dateAttr) throws ApiException {
        ApiResponse<BySecondaryFacet> localVarResp = statisticsBySecondaryStorageWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_secondary_storage
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;BySecondaryFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BySecondaryFacet> statisticsBySecondaryStorageWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsBySecondaryStorageValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<BySecondaryFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_secondary_storage
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsBySecondaryStorageAsync(String q, String dateAttr, final ApiCallback<BySecondaryFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsBySecondaryStorageValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<BySecondaryFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statisticsBySize
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsBySizeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsBySizeValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsBySizeCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_size
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return BySizeFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BySizeFacet statisticsBySize(String q, String dateAttr) throws ApiException {
        ApiResponse<BySizeFacet> localVarResp = statisticsBySizeWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_size
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;BySizeFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BySizeFacet> statisticsBySizeWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsBySizeValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<BySizeFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_size
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsBySizeAsync(String q, String dateAttr, final ApiCallback<BySizeFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsBySizeValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<BySizeFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statisticsByUserOwner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByUserOwnerCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/by_user_owner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (dateAttr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_attr", dateAttr));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticsByUserOwnerValidateBeforeCall(String q, String dateAttr, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statisticsByUserOwnerCall(q, dateAttr, _callback);
        return localVarCall;

    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_user_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ByUserOwnerFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ByUserOwnerFacet statisticsByUserOwner(String q, String dateAttr) throws ApiException {
        ApiResponse<ByUserOwnerFacet> localVarResp = statisticsByUserOwnerWithHttpInfo(q, dateAttr);
        return localVarResp.getData();
    }

    /**
     * TODO
     * **API Key Scope**: statistics / by_user_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @return ApiResponse&lt;ByUserOwnerFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ByUserOwnerFacet> statisticsByUserOwnerWithHttpInfo(String q, String dateAttr) throws ApiException {
        okhttp3.Call localVarCall = statisticsByUserOwnerValidateBeforeCall(q, dateAttr, null);
        Type localVarReturnType = new TypeToken<ByUserOwnerFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TODO (asynchronously)
     * **API Key Scope**: statistics / by_user_owner
     * @param q Solr query (optional)
     * @param dateAttr Type of date to facet on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statisticsByUserOwnerAsync(String q, String dateAttr, final ApiCallback<ByUserOwnerFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = statisticsByUserOwnerValidateBeforeCall(q, dateAttr, _callback);
        Type localVarReturnType = new TypeToken<ByUserOwnerFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
