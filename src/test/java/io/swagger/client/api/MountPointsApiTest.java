/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.MountPoint;
import io.swagger.client.model.MountPointCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MountPointsApi
 */
@Ignore
public class MountPointsApiTest {

    private final MountPointsApi api = new MountPointsApi();

    
    /**
     * Creates a new mount point.
     *
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMountPointTest() throws ApiException {
        MountPoint mountPointBody = null;
        MountPoint response = api.createMountPoint(mountPointBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific mount point.
     *
     * **API Key Scope**: mount_points / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyMountPointTest() throws ApiException {
        String mountPointId = null;
        api.destroyMountPoint(mountPointId);

        // TODO: test validations
    }
    
    /**
     * Lists all mount points.
     *
     * **API Key Scope**: mount_points / index   Optional API Key Explicit Scope: mount_points / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexMountPointsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String target = null;
        String type = null;
        String options = null;
        String username = null;
        String comment = null;
        String scanInterval = null;
        String price = null;
        MountPointCollection response = api.indexMountPoints(limit, offset, sortBy, id, name, target, type, options, username, comment, scanInterval, price);

        // TODO: test validations
    }
    
    /**
     * Displays a specific mount point&#x60;.
     *
     * **API Key Scope**: mount_points / show   Optional API Key Explicit Scope: mount_points / get_password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showMountPointTest() throws ApiException {
        String mountPointId = null;
        MountPoint response = api.showMountPoint(mountPointId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific mount point&#x60;.
     *
     * It **does not** create and mount the file structure. Use API v1 instead.  **API Key Scope**: mount_points / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMountPointTest() throws ApiException {
        String mountPointId = null;
        MountPoint mountPointBody = null;
        MountPoint response = api.updateMountPoint(mountPointId, mountPointBody);

        // TODO: test validations
    }
    
}
