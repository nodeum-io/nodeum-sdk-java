/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.TaskDestinationCollection;
import io.nodeum.client.model.TaskDestinationDown;
import io.nodeum.client.model.TaskDestinationUp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskDestinationsApi {
    private ApiClient localVarApiClient;

    public TaskDestinationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskDestinationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTaskDestination
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskDestinationCall(String taskId, TaskDestinationUp taskDestinationBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskDestinationBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_destinations"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskDestinationValidateBeforeCall(String taskId, TaskDestinationUp taskDestinationBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskDestination(Async)");
        }
        
        // verify the required parameter 'taskDestinationBody' is set
        if (taskDestinationBody == null) {
            throw new ApiException("Missing the required parameter 'taskDestinationBody' when calling createTaskDestination(Async)");
        }
        

        okhttp3.Call localVarCall = createTaskDestinationCall(taskId, taskDestinationBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new task destination.
     * **API Key Scope**: task_destinations / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationBody  (required)
     * @return TaskDestinationDown
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskDestinationDown createTaskDestination(String taskId, TaskDestinationUp taskDestinationBody) throws ApiException {
        ApiResponse<TaskDestinationDown> localVarResp = createTaskDestinationWithHttpInfo(taskId, taskDestinationBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new task destination.
     * **API Key Scope**: task_destinations / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationBody  (required)
     * @return ApiResponse&lt;TaskDestinationDown&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDestinationDown> createTaskDestinationWithHttpInfo(String taskId, TaskDestinationUp taskDestinationBody) throws ApiException {
        okhttp3.Call localVarCall = createTaskDestinationValidateBeforeCall(taskId, taskDestinationBody, null);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task destination. (asynchronously)
     * **API Key Scope**: task_destinations / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskDestinationAsync(String taskId, TaskDestinationUp taskDestinationBody, final ApiCallback<TaskDestinationDown> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskDestinationValidateBeforeCall(taskId, taskDestinationBody, _callback);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTaskDestination
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destination destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskDestinationCall(String taskId, Integer taskDestinationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_destinations/{task_destination_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_destination_id" + "\\}", localVarApiClient.escapeString(taskDestinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTaskDestinationValidateBeforeCall(String taskId, Integer taskDestinationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTaskDestination(Async)");
        }
        
        // verify the required parameter 'taskDestinationId' is set
        if (taskDestinationId == null) {
            throw new ApiException("Missing the required parameter 'taskDestinationId' when calling destroyTaskDestination(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTaskDestinationCall(taskId, taskDestinationId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific task destination.
     * **API Key Scope**: task_destinations / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destination destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTaskDestination(String taskId, Integer taskDestinationId) throws ApiException {
        destroyTaskDestinationWithHttpInfo(taskId, taskDestinationId);
    }

    /**
     * Destroys a specific task destination.
     * **API Key Scope**: task_destinations / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destination destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTaskDestinationWithHttpInfo(String taskId, Integer taskDestinationId) throws ApiException {
        okhttp3.Call localVarCall = destroyTaskDestinationValidateBeforeCall(taskId, taskDestinationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific task destination. (asynchronously)
     * **API Key Scope**: task_destinations / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destination destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskDestinationAsync(String taskId, Integer taskDestinationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTaskDestinationValidateBeforeCall(taskId, taskDestinationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTaskDestinations
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param folderId Filter on folder id (optional)
     * @param tapeId Filter on tape id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task destinations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskDestinationsCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String folderId, String tapeId, String poolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_destinations"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        if (tapeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tape_id", tapeId));
        }

        if (poolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pool_id", poolId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTaskDestinationsValidateBeforeCall(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String folderId, String tapeId, String poolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling indexTaskDestinations(Async)");
        }
        

        okhttp3.Call localVarCall = indexTaskDestinationsCall(taskId, limit, offset, sortBy, id, folderId, tapeId, poolId, _callback);
        return localVarCall;

    }

    /**
     * Lists all task destinations.
     * **API Key Scope**: task_destinations / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param folderId Filter on folder id (optional)
     * @param tapeId Filter on tape id (optional)
     * @param poolId Filter on a pool id (optional)
     * @return TaskDestinationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task destinations. </td><td>  -  </td></tr>
     </table>
     */
    public TaskDestinationCollection indexTaskDestinations(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String folderId, String tapeId, String poolId) throws ApiException {
        ApiResponse<TaskDestinationCollection> localVarResp = indexTaskDestinationsWithHttpInfo(taskId, limit, offset, sortBy, id, folderId, tapeId, poolId);
        return localVarResp.getData();
    }

    /**
     * Lists all task destinations.
     * **API Key Scope**: task_destinations / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param folderId Filter on folder id (optional)
     * @param tapeId Filter on tape id (optional)
     * @param poolId Filter on a pool id (optional)
     * @return ApiResponse&lt;TaskDestinationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task destinations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDestinationCollection> indexTaskDestinationsWithHttpInfo(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String folderId, String tapeId, String poolId) throws ApiException {
        okhttp3.Call localVarCall = indexTaskDestinationsValidateBeforeCall(taskId, limit, offset, sortBy, id, folderId, tapeId, poolId, null);
        Type localVarReturnType = new TypeToken<TaskDestinationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all task destinations. (asynchronously)
     * **API Key Scope**: task_destinations / index
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param folderId Filter on folder id (optional)
     * @param tapeId Filter on tape id (optional)
     * @param poolId Filter on a pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task destinations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskDestinationsAsync(String taskId, Integer limit, Integer offset, List<String> sortBy, String id, String folderId, String tapeId, String poolId, final ApiCallback<TaskDestinationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTaskDestinationsValidateBeforeCall(taskId, limit, offset, sortBy, id, folderId, tapeId, poolId, _callback);
        Type localVarReturnType = new TypeToken<TaskDestinationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTaskDestination
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskDestinationCall(String taskId, Integer taskDestinationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_destinations/{task_destination_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_destination_id" + "\\}", localVarApiClient.escapeString(taskDestinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskDestinationValidateBeforeCall(String taskId, Integer taskDestinationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskDestination(Async)");
        }
        
        // verify the required parameter 'taskDestinationId' is set
        if (taskDestinationId == null) {
            throw new ApiException("Missing the required parameter 'taskDestinationId' when calling showTaskDestination(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskDestinationCall(taskId, taskDestinationId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific task destination.
     * **API Key Scope**: task_destinations / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @return TaskDestinationDown
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
     </table>
     */
    public TaskDestinationDown showTaskDestination(String taskId, Integer taskDestinationId) throws ApiException {
        ApiResponse<TaskDestinationDown> localVarResp = showTaskDestinationWithHttpInfo(taskId, taskDestinationId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific task destination.
     * **API Key Scope**: task_destinations / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @return ApiResponse&lt;TaskDestinationDown&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDestinationDown> showTaskDestinationWithHttpInfo(String taskId, Integer taskDestinationId) throws ApiException {
        okhttp3.Call localVarCall = showTaskDestinationValidateBeforeCall(taskId, taskDestinationId, null);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific task destination. (asynchronously)
     * **API Key Scope**: task_destinations / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskDestinationAsync(String taskId, Integer taskDestinationId, final ApiCallback<TaskDestinationDown> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskDestinationValidateBeforeCall(taskId, taskDestinationId, _callback);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskDestination
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param taskDestinationBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskDestinationCall(String taskId, Integer taskDestinationId, TaskDestinationUp taskDestinationBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskDestinationBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_destinations/{task_destination_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()))
            .replaceAll("\\{" + "task_destination_id" + "\\}", localVarApiClient.escapeString(taskDestinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskDestinationValidateBeforeCall(String taskId, Integer taskDestinationId, TaskDestinationUp taskDestinationBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskDestination(Async)");
        }
        
        // verify the required parameter 'taskDestinationId' is set
        if (taskDestinationId == null) {
            throw new ApiException("Missing the required parameter 'taskDestinationId' when calling updateTaskDestination(Async)");
        }
        
        // verify the required parameter 'taskDestinationBody' is set
        if (taskDestinationBody == null) {
            throw new ApiException("Missing the required parameter 'taskDestinationBody' when calling updateTaskDestination(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskDestinationCall(taskId, taskDestinationId, taskDestinationBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific task destination.
     * **API Key Scope**: task_destinations / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param taskDestinationBody  (required)
     * @return TaskDestinationDown
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskDestinationDown updateTaskDestination(String taskId, Integer taskDestinationId, TaskDestinationUp taskDestinationBody) throws ApiException {
        ApiResponse<TaskDestinationDown> localVarResp = updateTaskDestinationWithHttpInfo(taskId, taskDestinationId, taskDestinationBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific task destination.
     * **API Key Scope**: task_destinations / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param taskDestinationBody  (required)
     * @return ApiResponse&lt;TaskDestinationDown&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDestinationDown> updateTaskDestinationWithHttpInfo(String taskId, Integer taskDestinationId, TaskDestinationUp taskDestinationBody) throws ApiException {
        okhttp3.Call localVarCall = updateTaskDestinationValidateBeforeCall(taskId, taskDestinationId, taskDestinationBody, null);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific task destination. (asynchronously)
     * **API Key Scope**: task_destinations / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskDestinationId Numeric ID of task destination. (required)
     * @param taskDestinationBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task destination. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskDestinationAsync(String taskId, Integer taskDestinationId, TaskDestinationUp taskDestinationBody, final ApiCallback<TaskDestinationDown> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskDestinationValidateBeforeCall(taskId, taskDestinationId, taskDestinationBody, _callback);
        Type localVarReturnType = new TypeToken<TaskDestinationDown>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
