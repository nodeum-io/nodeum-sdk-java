/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.Error;
import io.swagger.client.model.TapeDrive;
import io.swagger.client.model.TapeDriveCollection;
import io.swagger.client.model.TapeDriveDeviceCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TapeDrivesApi
 */
@Ignore
public class TapeDrivesApiTest {

    private final TapeDrivesApi api = new TapeDrivesApi();

    
    /**
     * Creates a new tape drive.
     *
     * **API Key Scope**: tape_drives / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTapeDriveByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        TapeDrive tapeDriveBody = null;
        TapeDrive response = api.createTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific tape drive.
     *
     * **API Key Scope**: tape_drives / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyTapeDriveTest() throws ApiException {
        String tapeDriveId = null;
        api.destroyTapeDrive(tapeDriveId);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific tape drive.
     *
     * **API Key Scope**: tape_drives / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyTapeDriveByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        String tapeDriveId = null;
        api.destroyTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId);

        // TODO: test validations
    }
    
    /**
     * Lists tape drives devices.
     *
     * **API Key Scope**: tape_drives / devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapeDriveDevicesTest() throws ApiException {
        String tapeLibraryId = null;
        String jobId = null;
        TapeDriveDeviceCollection response = api.indexTapeDriveDevices(tapeLibraryId, jobId);

        // TODO: test validations
    }
    
    /**
     * Lists all tape drives.
     *
     * **API Key Scope**: tape_drives / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapeDrivesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String tapeLibraryId = null;
        String name = null;
        String serial = null;
        String comment = null;
        String scsiAddress = null;
        String vendor = null;
        String product = null;
        String firmware = null;
        String device = null;
        String sgdevice = null;
        String libso = null;
        String acs = null;
        String lsm = null;
        String panel = null;
        String transport = null;
        String status = null;
        String full = null;
        String mountCount = null;
        String useTo = null;
        String useBy = null;
        String useFileProcessedSize = null;
        String useFileSizeToProcess = null;
        String useFileNameProcessed = null;
        String bandwidth = null;
        TapeDriveCollection response = api.indexTapeDrives(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);

        // TODO: test validations
    }
    
    /**
     * Lists all tape drives.
     *
     * **API Key Scope**: tape_drives / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapeDrivesByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        Integer limit = null;
        Integer offset = null;
        List<String> sortBy = null;
        String id = null;
        String name = null;
        String serial = null;
        String comment = null;
        String scsiAddress = null;
        String vendor = null;
        String product = null;
        String firmware = null;
        String device = null;
        String sgdevice = null;
        String libso = null;
        String acs = null;
        String lsm = null;
        String panel = null;
        String transport = null;
        String status = null;
        String full = null;
        String mountCount = null;
        String useTo = null;
        String useBy = null;
        String useFileProcessedSize = null;
        String useFileSizeToProcess = null;
        String useFileNameProcessed = null;
        String bandwidth = null;
        TapeDriveCollection response = api.indexTapeDrivesByTapeLibrary(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);

        // TODO: test validations
    }
    
    /**
     * Displays a specific tape drive.
     *
     * **API Key Scope**: tape_drives / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTapeDriveTest() throws ApiException {
        String tapeDriveId = null;
        TapeDrive response = api.showTapeDrive(tapeDriveId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific tape drive.
     *
     * **API Key Scope**: tape_drives / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showTapeDriveByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        String tapeDriveId = null;
        TapeDrive response = api.showTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific tape drive.
     *
     * **API Key Scope**: tape_drives / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTapeDriveTest() throws ApiException {
        String tapeDriveId = null;
        TapeDrive tapeDriveBody = null;
        TapeDrive response = api.updateTapeDrive(tapeDriveId, tapeDriveBody);

        // TODO: test validations
    }
    
    /**
     * Updates a specific tape drive.
     *
     * **API Key Scope**: tape_drives / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTapeDriveByTapeLibraryTest() throws ApiException {
        String tapeLibraryId = null;
        String tapeDriveId = null;
        TapeDrive tapeDriveBody = null;
        TapeDrive response = api.updateTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId, tapeDriveBody);

        // TODO: test validations
    }
    
}
