/*
 * Nodeum API
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.sdk.client.api;

import io.nodeum.sdk.client.ApiCallback;
import io.nodeum.sdk.client.ApiClient;
import io.nodeum.sdk.client.ApiException;
import io.nodeum.sdk.client.ApiResponse;
import io.nodeum.sdk.client.Configuration;
import io.nodeum.sdk.client.Pair;
import io.nodeum.sdk.client.ProgressRequestBody;
import io.nodeum.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.sdk.client.model.Error;
import io.nodeum.sdk.client.model.TaskSchedule;
import io.nodeum.sdk.client.model.TaskScheduleCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskSchedulesApi {
    private ApiClient localVarApiClient;

    public TaskSchedulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskSchedulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTaskSchedule
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskScheduleCall(String taskId, TaskSchedule taskScheduleBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskScheduleBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_schedule"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskScheduleValidateBeforeCall(String taskId, TaskSchedule taskScheduleBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createTaskSchedule(Async)");
        }
        
        // verify the required parameter 'taskScheduleBody' is set
        if (taskScheduleBody == null) {
            throw new ApiException("Missing the required parameter 'taskScheduleBody' when calling createTaskSchedule(Async)");
        }
        

        okhttp3.Call localVarCall = createTaskScheduleCall(taskId, taskScheduleBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new task schedule. Only one should be created.
     * **API Key Scope**: task_schedules / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @return TaskSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskSchedule createTaskSchedule(String taskId, TaskSchedule taskScheduleBody) throws ApiException {
        ApiResponse<TaskSchedule> localVarResp = createTaskScheduleWithHttpInfo(taskId, taskScheduleBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new task schedule. Only one should be created.
     * **API Key Scope**: task_schedules / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @return ApiResponse&lt;TaskSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskSchedule> createTaskScheduleWithHttpInfo(String taskId, TaskSchedule taskScheduleBody) throws ApiException {
        okhttp3.Call localVarCall = createTaskScheduleValidateBeforeCall(taskId, taskScheduleBody, null);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task schedule. Only one should be created. (asynchronously)
     * **API Key Scope**: task_schedules / create
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskScheduleAsync(String taskId, TaskSchedule taskScheduleBody, final ApiCallback<TaskSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskScheduleValidateBeforeCall(taskId, taskScheduleBody, _callback);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTaskSchedule
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task schedule destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskScheduleCall(String taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_schedule"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTaskScheduleValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTaskSchedule(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTaskScheduleCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Destroys the task schedule.
     * **API Key Scope**: task_schedules / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task schedule destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTaskSchedule(String taskId) throws ApiException {
        destroyTaskScheduleWithHttpInfo(taskId);
    }

    /**
     * Destroys the task schedule.
     * **API Key Scope**: task_schedules / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task schedule destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTaskScheduleWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = destroyTaskScheduleValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys the task schedule. (asynchronously)
     * **API Key Scope**: task_schedules / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task schedule destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskScheduleAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTaskScheduleValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTaskSchedules
     * @param withNext Display the next scheduled date, and information about missing executions. (optional, default to true)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param rrule Filter on RRule of schedule (optional)
     * @param done Filter on done schedule (optional)
     * @param taskId Filter on task id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task schedules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskSchedulesCall(Boolean withNext, Integer limit, Integer offset, List<String> sortBy, String id, String rrule, String done, String taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withNext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_next", withNext));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (rrule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rrule", rrule));
        }

        if (done != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("done", done));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTaskSchedulesValidateBeforeCall(Boolean withNext, Integer limit, Integer offset, List<String> sortBy, String id, String rrule, String done, String taskId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTaskSchedulesCall(withNext, limit, offset, sortBy, id, rrule, done, taskId, _callback);
        return localVarCall;

    }

    /**
     * Lists all task schedules.
     * **API Key Scope**: task_schedules / index
     * @param withNext Display the next scheduled date, and information about missing executions. (optional, default to true)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param rrule Filter on RRule of schedule (optional)
     * @param done Filter on done schedule (optional)
     * @param taskId Filter on task id (optional)
     * @return TaskScheduleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task schedules. </td><td>  -  </td></tr>
     </table>
     */
    public TaskScheduleCollection indexTaskSchedules(Boolean withNext, Integer limit, Integer offset, List<String> sortBy, String id, String rrule, String done, String taskId) throws ApiException {
        ApiResponse<TaskScheduleCollection> localVarResp = indexTaskSchedulesWithHttpInfo(withNext, limit, offset, sortBy, id, rrule, done, taskId);
        return localVarResp.getData();
    }

    /**
     * Lists all task schedules.
     * **API Key Scope**: task_schedules / index
     * @param withNext Display the next scheduled date, and information about missing executions. (optional, default to true)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param rrule Filter on RRule of schedule (optional)
     * @param done Filter on done schedule (optional)
     * @param taskId Filter on task id (optional)
     * @return ApiResponse&lt;TaskScheduleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task schedules. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskScheduleCollection> indexTaskSchedulesWithHttpInfo(Boolean withNext, Integer limit, Integer offset, List<String> sortBy, String id, String rrule, String done, String taskId) throws ApiException {
        okhttp3.Call localVarCall = indexTaskSchedulesValidateBeforeCall(withNext, limit, offset, sortBy, id, rrule, done, taskId, null);
        Type localVarReturnType = new TypeToken<TaskScheduleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all task schedules. (asynchronously)
     * **API Key Scope**: task_schedules / index
     * @param withNext Display the next scheduled date, and information about missing executions. (optional, default to true)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param rrule Filter on RRule of schedule (optional)
     * @param done Filter on done schedule (optional)
     * @param taskId Filter on task id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of task schedules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTaskSchedulesAsync(Boolean withNext, Integer limit, Integer offset, List<String> sortBy, String id, String rrule, String done, String taskId, final ApiCallback<TaskScheduleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTaskSchedulesValidateBeforeCall(withNext, limit, offset, sortBy, id, rrule, done, taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskScheduleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTaskSchedule
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskScheduleCall(String taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_schedule"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskScheduleValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTaskSchedule(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskScheduleCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Displays the task schedule.
     * **API Key Scope**: task_schedules / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return TaskSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
     </table>
     */
    public TaskSchedule showTaskSchedule(String taskId) throws ApiException {
        ApiResponse<TaskSchedule> localVarResp = showTaskScheduleWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Displays the task schedule.
     * **API Key Scope**: task_schedules / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;TaskSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskSchedule> showTaskScheduleWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = showTaskScheduleValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays the task schedule. (asynchronously)
     * **API Key Scope**: task_schedules / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskScheduleAsync(String taskId, final ApiCallback<TaskSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskScheduleValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskSchedule
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskScheduleCall(String taskId, TaskSchedule taskScheduleBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskScheduleBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/task_schedule"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskScheduleValidateBeforeCall(String taskId, TaskSchedule taskScheduleBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskSchedule(Async)");
        }
        
        // verify the required parameter 'taskScheduleBody' is set
        if (taskScheduleBody == null) {
            throw new ApiException("Missing the required parameter 'taskScheduleBody' when calling updateTaskSchedule(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskScheduleCall(taskId, taskScheduleBody, _callback);
        return localVarCall;

    }

    /**
     * Updates the existing task schedule.
     * **API Key Scope**: task_schedules / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @return TaskSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TaskSchedule updateTaskSchedule(String taskId, TaskSchedule taskScheduleBody) throws ApiException {
        ApiResponse<TaskSchedule> localVarResp = updateTaskScheduleWithHttpInfo(taskId, taskScheduleBody);
        return localVarResp.getData();
    }

    /**
     * Updates the existing task schedule.
     * **API Key Scope**: task_schedules / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @return ApiResponse&lt;TaskSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskSchedule> updateTaskScheduleWithHttpInfo(String taskId, TaskSchedule taskScheduleBody) throws ApiException {
        okhttp3.Call localVarCall = updateTaskScheduleValidateBeforeCall(taskId, taskScheduleBody, null);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the existing task schedule. (asynchronously)
     * **API Key Scope**: task_schedules / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskScheduleBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task schedule. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskScheduleAsync(String taskId, TaskSchedule taskScheduleBody, final ApiCallback<TaskSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskScheduleValidateBeforeCall(taskId, taskScheduleBody, _callback);
        Type localVarReturnType = new TypeToken<TaskSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
