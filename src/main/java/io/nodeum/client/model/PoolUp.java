/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.nodeum.client.model.Pool;
import io.nodeum.client.model.PoolUpAllOf;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PoolUp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-12-11T14:27:44.769Z[GMT]")
public class PoolUp {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACTIVE_ARCHIVE("active_archive"),
    
    OFFLINE_ARCHIVE("offline_archive"),
    
    DATA_EXCHANGE("data_exchange"),
    
    SCRATCH("scratch"),
    
    DATA_ENRICHMENT("data_enrichment"),
    
    PRIMARY("primary");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets content
   */
  @JsonAdapter(ContentEnum.Adapter.class)
  public enum ContentEnum {
    TAPE("tape"),
    
    CLOUD("cloud"),
    
    NAS("nas");

    private String value;

    ContentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentEnum fromValue(String value) {
      for (ContentEnum b : ContentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ContentEnum content;

  public static final String SERIALIZED_NAME_PRIMARY_ID = "primary_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ID)
  private Integer primaryId;

  public static final String SERIALIZED_NAME_TAPE_IDS = "tape_ids";
  @SerializedName(SERIALIZED_NAME_TAPE_IDS)
  private List<Integer> tapeIds = null;

  public static final String SERIALIZED_NAME_NAS_SHARE_IDS = "nas_share_ids";
  @SerializedName(SERIALIZED_NAME_NAS_SHARE_IDS)
  private List<Integer> nasShareIds = null;

  public static final String SERIALIZED_NAME_CLOUD_BUCKET_IDS = "cloud_bucket_ids";
  @SerializedName(SERIALIZED_NAME_CLOUD_BUCKET_IDS)
  private List<Integer> cloudBucketIds = null;


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "")

  public Integer getId() {
    return id;
  }




  public PoolUp name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "offline-tapes", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PoolUp comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public PoolUp type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "offline_archive", value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PoolUp content(ContentEnum content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentEnum getContent() {
    return content;
  }


  public void setContent(ContentEnum content) {
    this.content = content;
  }


   /**
   * Get primaryId
   * @return primaryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Integer getPrimaryId() {
    return primaryId;
  }




  public PoolUp tapeIds(List<Integer> tapeIds) {
    
    this.tapeIds = tapeIds;
    return this;
  }

  public PoolUp addTapeIdsItem(Integer tapeIdsItem) {
    if (this.tapeIds == null) {
      this.tapeIds = new ArrayList<Integer>();
    }
    this.tapeIds.add(tapeIdsItem);
    return this;
  }

   /**
   * Get tapeIds
   * @return tapeIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[10, 11, 12]", value = "")

  public List<Integer> getTapeIds() {
    return tapeIds;
  }


  public void setTapeIds(List<Integer> tapeIds) {
    this.tapeIds = tapeIds;
  }


  public PoolUp nasShareIds(List<Integer> nasShareIds) {
    
    this.nasShareIds = nasShareIds;
    return this;
  }

  public PoolUp addNasShareIdsItem(Integer nasShareIdsItem) {
    if (this.nasShareIds == null) {
      this.nasShareIds = new ArrayList<Integer>();
    }
    this.nasShareIds.add(nasShareIdsItem);
    return this;
  }

   /**
   * Get nasShareIds
   * @return nasShareIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[15]", value = "")

  public List<Integer> getNasShareIds() {
    return nasShareIds;
  }


  public void setNasShareIds(List<Integer> nasShareIds) {
    this.nasShareIds = nasShareIds;
  }


  public PoolUp cloudBucketIds(List<Integer> cloudBucketIds) {
    
    this.cloudBucketIds = cloudBucketIds;
    return this;
  }

  public PoolUp addCloudBucketIdsItem(Integer cloudBucketIdsItem) {
    if (this.cloudBucketIds == null) {
      this.cloudBucketIds = new ArrayList<Integer>();
    }
    this.cloudBucketIds.add(cloudBucketIdsItem);
    return this;
  }

   /**
   * Get cloudBucketIds
   * @return cloudBucketIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[15]", value = "")

  public List<Integer> getCloudBucketIds() {
    return cloudBucketIds;
  }


  public void setCloudBucketIds(List<Integer> cloudBucketIds) {
    this.cloudBucketIds = cloudBucketIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolUp poolUp = (PoolUp) o;
    return Objects.equals(this.id, poolUp.id) &&
        Objects.equals(this.name, poolUp.name) &&
        Objects.equals(this.comment, poolUp.comment) &&
        Objects.equals(this.type, poolUp.type) &&
        Objects.equals(this.content, poolUp.content) &&
        Objects.equals(this.primaryId, poolUp.primaryId) &&
        Objects.equals(this.tapeIds, poolUp.tapeIds) &&
        Objects.equals(this.nasShareIds, poolUp.nasShareIds) &&
        Objects.equals(this.cloudBucketIds, poolUp.cloudBucketIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, comment, type, content, primaryId, tapeIds, nasShareIds, cloudBucketIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolUp {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    primaryId: ").append(toIndentedString(primaryId)).append("\n");
    sb.append("    tapeIds: ").append(toIndentedString(tapeIds)).append("\n");
    sb.append("    nasShareIds: ").append(toIndentedString(nasShareIds)).append("\n");
    sb.append("    cloudBucketIds: ").append(toIndentedString(cloudBucketIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

