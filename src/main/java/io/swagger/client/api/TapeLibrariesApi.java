/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.Error;
import io.swagger.client.model.TapeLibrary;
import io.swagger.client.model.TapeLibraryCollection;
import io.swagger.client.model.TapeLibraryDeviceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapeLibrariesApi {
    private ApiClient apiClient;

    public TapeLibrariesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapeLibrariesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTapeLibrary
     * @param tapeLibraryBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTapeLibraryCall(TapeLibrary tapeLibraryBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tapeLibraryBody;

        // create path and map variables
        String localVarPath = "/tape_libraries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTapeLibraryValidateBeforeCall(TapeLibrary tapeLibraryBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryBody' is set
        if (tapeLibraryBody == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryBody' when calling createTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = createTapeLibraryCall(tapeLibraryBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new tape library.
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeLibrary createTapeLibrary(TapeLibrary tapeLibraryBody) throws ApiException {
        ApiResponse<TapeLibrary> resp = createTapeLibraryWithHttpInfo(tapeLibraryBody);
        return resp.getData();
    }

    /**
     * Creates a new tape library.
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeLibrary> createTapeLibraryWithHttpInfo(TapeLibrary tapeLibraryBody) throws ApiException {
        com.squareup.okhttp.Call call = createTapeLibraryValidateBeforeCall(tapeLibraryBody, null, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / create
     * @param tapeLibraryBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTapeLibraryAsync(TapeLibrary tapeLibraryBody, final ApiCallback<TapeLibrary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTapeLibraryValidateBeforeCall(tapeLibraryBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyTapeLibraryCall(String tapeLibraryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyTapeLibraryValidateBeforeCall(String tapeLibraryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling destroyTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyTapeLibraryCall(tapeLibraryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific tape library.
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyTapeLibrary(String tapeLibraryId) throws ApiException {
        destroyTapeLibraryWithHttpInfo(tapeLibraryId);
    }

    /**
     * Destroys a specific tape library.
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyTapeLibraryWithHttpInfo(String tapeLibraryId) throws ApiException {
        com.squareup.okhttp.Call call = destroyTapeLibraryValidateBeforeCall(tapeLibraryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / destroy
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyTapeLibraryAsync(String tapeLibraryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyTapeLibraryValidateBeforeCall(tapeLibraryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexTapeLibraries
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapeLibrariesCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (serial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serial", serial));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (protocol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocol", protocol));
        if (vendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor", vendor));
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product", product));
        if (firmware != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("firmware", firmware));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (libso != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("libso", libso));
        if (acs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acs", acs));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (storageSlots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage_slots", storageSlots));
        if (storageSlotsAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage_slots_address", storageSlotsAddress));
        if (ioSlots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("io_slots", ioSlots));
        if (ioSlotsAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("io_slots_address", ioSlotsAddress));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapeLibrariesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTapeLibrariesCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tape libraries.
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @return TapeLibraryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeLibraryCollection indexTapeLibraries(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price) throws ApiException {
        ApiResponse<TapeLibraryCollection> resp = indexTapeLibrariesWithHttpInfo(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price);
        return resp.getData();
    }

    /**
     * Lists all tape libraries.
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @return ApiResponse&lt;TapeLibraryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeLibraryCollection> indexTapeLibrariesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price) throws ApiException {
        com.squareup.okhttp.Call call = indexTapeLibrariesValidateBeforeCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, null, null);
        Type localVarReturnType = new TypeToken<TapeLibraryCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tape libraries. (asynchronously)
     * **API Key Scope**: tape_libraries / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param serial Filter on serial (optional)
     * @param comment Filter on comment (optional)
     * @param protocol Filter on protocol (optional)
     * @param vendor Filter on vendor (optional)
     * @param product Filter on product (optional)
     * @param firmware Filter on firmware (optional)
     * @param device Filter on device (optional)
     * @param libso Filter on libso (optional)
     * @param acs Filter on acs (optional)
     * @param status Filter on status (optional)
     * @param storageSlots Filter on storage slots (optional)
     * @param storageSlotsAddress Filter on storage slots address (optional)
     * @param ioSlots Filter on io slots (optional)
     * @param ioSlotsAddress Filter on io slots address (optional)
     * @param price Filter on price (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapeLibrariesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String serial, String comment, String protocol, String vendor, String product, String firmware, String device, String libso, String acs, String status, String storageSlots, String storageSlotsAddress, String ioSlots, String ioSlotsAddress, String price, final ApiCallback<TapeLibraryCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapeLibrariesValidateBeforeCall(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeLibraryCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTapeLibraryDevices
     * @param jobId ID of active job (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapeLibraryDevicesCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/-/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapeLibraryDevicesValidateBeforeCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTapeLibraryDevicesCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists tape libraries devices.
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (optional)
     * @return TapeLibraryDeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeLibraryDeviceCollection indexTapeLibraryDevices(String jobId) throws ApiException {
        ApiResponse<TapeLibraryDeviceCollection> resp = indexTapeLibraryDevicesWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * Lists tape libraries devices.
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;TapeLibraryDeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeLibraryDeviceCollection> indexTapeLibraryDevicesWithHttpInfo(String jobId) throws ApiException {
        com.squareup.okhttp.Call call = indexTapeLibraryDevicesValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<TapeLibraryDeviceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists tape libraries devices. (asynchronously)
     * **API Key Scope**: tape_libraries / devices
     * @param jobId ID of active job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapeLibraryDevicesAsync(String jobId, final ApiCallback<TapeLibraryDeviceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapeLibraryDevicesValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeLibraryDeviceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeLibraryCall(String tapeLibraryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeLibraryValidateBeforeCall(String tapeLibraryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeLibraryCall(tapeLibraryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape library.
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeLibrary showTapeLibrary(String tapeLibraryId) throws ApiException {
        ApiResponse<TapeLibrary> resp = showTapeLibraryWithHttpInfo(tapeLibraryId);
        return resp.getData();
    }

    /**
     * Displays a specific tape library.
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeLibrary> showTapeLibraryWithHttpInfo(String tapeLibraryId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeLibraryValidateBeforeCall(tapeLibraryId, null, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeLibraryAsync(String tapeLibraryId, final ApiCallback<TapeLibrary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeLibraryValidateBeforeCall(tapeLibraryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTapeLibraryCall(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tapeLibraryBody;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTapeLibraryValidateBeforeCall(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling updateTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeLibraryBody' is set
        if (tapeLibraryBody == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryBody' when calling updateTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTapeLibraryCall(tapeLibraryId, tapeLibraryBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific tape library.
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @return TapeLibrary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeLibrary updateTapeLibrary(String tapeLibraryId, TapeLibrary tapeLibraryBody) throws ApiException {
        ApiResponse<TapeLibrary> resp = updateTapeLibraryWithHttpInfo(tapeLibraryId, tapeLibraryBody);
        return resp.getData();
    }

    /**
     * Updates a specific tape library.
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @return ApiResponse&lt;TapeLibrary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeLibrary> updateTapeLibraryWithHttpInfo(String tapeLibraryId, TapeLibrary tapeLibraryBody) throws ApiException {
        com.squareup.okhttp.Call call = updateTapeLibraryValidateBeforeCall(tapeLibraryId, tapeLibraryBody, null, null);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific tape library. (asynchronously)
     * **API Key Scope**: tape_libraries / update
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeLibraryBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTapeLibraryAsync(String tapeLibraryId, TapeLibrary tapeLibraryBody, final ApiCallback<TapeLibrary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTapeLibraryValidateBeforeCall(tapeLibraryId, tapeLibraryBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeLibrary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
