/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ApiKeyCollection;
import io.nodeum.client.model.ApiKeyFull;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createApiKey
     * @param apiKeyBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyCall(ApiKeyFull apiKeyBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apiKeyBody;

        // create path and map variables
        String localVarPath = "/users/me/api_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(ApiKeyFull apiKeyBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKeyBody' is set
        if (apiKeyBody == null) {
            throw new ApiException("Missing the required parameter 'apiKeyBody' when calling createApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = createApiKeyCall(apiKeyBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new API Key for current user.
     * **API Key Scope**: api_keys / create
     * @param apiKeyBody  (required)
     * @return ApiKeyFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyFull createApiKey(ApiKeyFull apiKeyBody) throws ApiException {
        ApiResponse<ApiKeyFull> localVarResp = createApiKeyWithHttpInfo(apiKeyBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new API Key for current user.
     * **API Key Scope**: api_keys / create
     * @param apiKeyBody  (required)
     * @return ApiResponse&lt;ApiKeyFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyFull> createApiKeyWithHttpInfo(ApiKeyFull apiKeyBody) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(apiKeyBody, null);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new API Key for current user. (asynchronously)
     * **API Key Scope**: api_keys / create
     * @param apiKeyBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyAsync(ApiKeyFull apiKeyBody, final ApiCallback<ApiKeyFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(apiKeyBody, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyApiKey
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> API Key destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyApiKeyCall(Integer apiKeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/api_keys/{api_key_id}"
            .replaceAll("\\{" + "api_key_id" + "\\}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyApiKeyValidateBeforeCall(Integer apiKeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling destroyApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = destroyApiKeyCall(apiKeyId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific API Key.
     * **API Key Scope**: api_keys / destroy
     * @param apiKeyId Numeric ID of API Key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> API Key destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyApiKey(Integer apiKeyId) throws ApiException {
        destroyApiKeyWithHttpInfo(apiKeyId);
    }

    /**
     * Destroys a specific API Key.
     * **API Key Scope**: api_keys / destroy
     * @param apiKeyId Numeric ID of API Key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> API Key destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyApiKeyWithHttpInfo(Integer apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = destroyApiKeyValidateBeforeCall(apiKeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific API Key. (asynchronously)
     * **API Key Scope**: api_keys / destroy
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> API Key destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyApiKeyAsync(Integer apiKeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyApiKeyValidateBeforeCall(apiKeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexApiKeys
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API Keys. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexApiKeysCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/api_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexApiKeysValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexApiKeysCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Lists all API keys of current user.
     * **API Key Scope**: api_keys / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @return ApiKeyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API Keys. </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyCollection indexApiKeys(Integer limit, Integer offset) throws ApiException {
        ApiResponse<ApiKeyCollection> localVarResp = indexApiKeysWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Lists all API keys of current user.
     * **API Key Scope**: api_keys / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @return ApiResponse&lt;ApiKeyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API Keys. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyCollection> indexApiKeysWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = indexApiKeysValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all API keys of current user. (asynchronously)
     * **API Key Scope**: api_keys / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API Keys. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexApiKeysAsync(Integer limit, Integer offset, final ApiCallback<ApiKeyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexApiKeysValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showApiKey
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showApiKeyCall(Integer apiKeyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/api_keys/{api_key_id}"
            .replaceAll("\\{" + "api_key_id" + "\\}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showApiKeyValidateBeforeCall(Integer apiKeyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling showApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = showApiKeyCall(apiKeyId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific API Key with its scopes.
     * **API Key Scope**: api_keys / show
     * @param apiKeyId Numeric ID of API Key. (required)
     * @return ApiKeyFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyFull showApiKey(Integer apiKeyId) throws ApiException {
        ApiResponse<ApiKeyFull> localVarResp = showApiKeyWithHttpInfo(apiKeyId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific API Key with its scopes.
     * **API Key Scope**: api_keys / show
     * @param apiKeyId Numeric ID of API Key. (required)
     * @return ApiResponse&lt;ApiKeyFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyFull> showApiKeyWithHttpInfo(Integer apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = showApiKeyValidateBeforeCall(apiKeyId, null);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific API Key with its scopes. (asynchronously)
     * **API Key Scope**: api_keys / show
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showApiKeyAsync(Integer apiKeyId, final ApiCallback<ApiKeyFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = showApiKeyValidateBeforeCall(apiKeyId, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiKey
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param apiKeyBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyCall(Integer apiKeyId, ApiKeyFull apiKeyBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apiKeyBody;

        // create path and map variables
        String localVarPath = "/users/me/api_keys/{api_key_id}"
            .replaceAll("\\{" + "api_key_id" + "\\}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiKeyValidateBeforeCall(Integer apiKeyId, ApiKeyFull apiKeyBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling updateApiKey(Async)");
        }
        
        // verify the required parameter 'apiKeyBody' is set
        if (apiKeyBody == null) {
            throw new ApiException("Missing the required parameter 'apiKeyBody' when calling updateApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = updateApiKeyCall(apiKeyId, apiKeyBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific API Key.
     * **API Key Scope**: api_keys / update
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param apiKeyBody  (required)
     * @return ApiKeyFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeyFull updateApiKey(Integer apiKeyId, ApiKeyFull apiKeyBody) throws ApiException {
        ApiResponse<ApiKeyFull> localVarResp = updateApiKeyWithHttpInfo(apiKeyId, apiKeyBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific API Key.
     * **API Key Scope**: api_keys / update
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param apiKeyBody  (required)
     * @return ApiResponse&lt;ApiKeyFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeyFull> updateApiKeyWithHttpInfo(Integer apiKeyId, ApiKeyFull apiKeyBody) throws ApiException {
        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(apiKeyId, apiKeyBody, null);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific API Key. (asynchronously)
     * **API Key Scope**: api_keys / update
     * @param apiKeyId Numeric ID of API Key. (required)
     * @param apiKeyBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyAsync(Integer apiKeyId, ApiKeyFull apiKeyBody, final ApiCallback<ApiKeyFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(apiKeyId, apiKeyBody, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
