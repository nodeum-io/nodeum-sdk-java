/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Container;
import io.swagger.client.model.ContainerCollection;
import io.swagger.client.model.ContainerPrivilege;
import io.swagger.client.model.ContainerPrivilegeCollection;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContainersApi {
    private ApiClient apiClient;

    public ContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContainersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContainer
     * @param containerBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContainerCall(Container containerBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerBody;

        // create path and map variables
        String localVarPath = "/containers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContainerValidateBeforeCall(Container containerBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerBody' is set
        if (containerBody == null) {
            throw new ApiException("Missing the required parameter 'containerBody' when calling createContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = createContainerCall(containerBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Container createContainer(Container containerBody) throws ApiException {
        ApiResponse<Container> resp = createContainerWithHttpInfo(containerBody);
        return resp.getData();
    }

    /**
     * Creates a new container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Container> createContainerWithHttpInfo(Container containerBody) throws ApiException {
        com.squareup.okhttp.Call call = createContainerValidateBeforeCall(containerBody, null, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new container. (asynchronously)
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
     * @param containerBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContainerAsync(Container containerBody, final ApiCallback<Container> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContainerValidateBeforeCall(containerBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContainerPrivilegeCall(String containerId, ContainerPrivilege containerPrivilegeBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerPrivilegeBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContainerPrivilegeValidateBeforeCall(String containerId, ContainerPrivilege containerPrivilegeBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeBody' is set
        if (containerPrivilegeBody == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeBody' when calling createContainerPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = createContainerPrivilegeCall(containerId, containerPrivilegeBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new privilege on the container.
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerPrivilege createContainerPrivilege(String containerId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        ApiResponse<ContainerPrivilege> resp = createContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeBody);
        return resp.getData();
    }

    /**
     * Creates a new privilege on the container.
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerPrivilege> createContainerPrivilegeWithHttpInfo(String containerId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        com.squareup.okhttp.Call call = createContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeBody, null, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new privilege on the container. (asynchronously)
     * **API Key Scope**: container_privileges / create
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContainerPrivilegeAsync(String containerId, ContainerPrivilege containerPrivilegeBody, final ApiCallback<ContainerPrivilege> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyContainerCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyContainerValidateBeforeCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling destroyContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyContainerCall(containerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific container.
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyContainer(String containerId) throws ApiException {
        destroyContainerWithHttpInfo(containerId);
    }

    /**
     * Destroys a specific container.
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyContainerWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = destroyContainerValidateBeforeCall(containerId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific container. (asynchronously)
     * **API Key Scope**: containers / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyContainerAsync(String containerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyContainerValidateBeforeCall(containerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for destroyContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", apiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling destroyContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling destroyContainerPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyContainerPrivilegeCall(containerId, containerPrivilegeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific privilege.
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyContainerPrivilege(String containerId, Integer containerPrivilegeId) throws ApiException {
        destroyContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
    }

    /**
     * Destroys a specific privilege.
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId) throws ApiException {
        com.squareup.okhttp.Call call = destroyContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / destroy
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexContainerPrivileges
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexContainerPrivilegesCall(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (privilege != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("privilege", privilege));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexContainerPrivilegesValidateBeforeCall(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling indexContainerPrivileges(Async)");
        }
        

        com.squareup.okhttp.Call call = indexContainerPrivilegesCall(containerId, limit, offset, sortBy, id, name, privilege, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all privilege on the container.
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @return ContainerPrivilegeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerPrivilegeCollection indexContainerPrivileges(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type) throws ApiException {
        ApiResponse<ContainerPrivilegeCollection> resp = indexContainerPrivilegesWithHttpInfo(containerId, limit, offset, sortBy, id, name, privilege, type);
        return resp.getData();
    }

    /**
     * Lists all privilege on the container.
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;ContainerPrivilegeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerPrivilegeCollection> indexContainerPrivilegesWithHttpInfo(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type) throws ApiException {
        com.squareup.okhttp.Call call = indexContainerPrivilegesValidateBeforeCall(containerId, limit, offset, sortBy, id, name, privilege, type, null, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilegeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all privilege on the container. (asynchronously)
     * **API Key Scope**: container_privileges / index
     * @param containerId Numeric ID or name of container. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param privilege Filter on privilege (optional)
     * @param type Filter on type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexContainerPrivilegesAsync(String containerId, Integer limit, Integer offset, List<String> sortBy, String id, String name, String privilege, String type, final ApiCallback<ContainerPrivilegeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexContainerPrivilegesValidateBeforeCall(containerId, limit, offset, sortBy, id, name, privilege, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerPrivilegeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexContainers
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexContainersCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (quotaTotalSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quota_total_size", quotaTotalSize));
        if (quotaOnCache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quota_on_cache", quotaOnCache));
        if (statTotalFiles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat_total_files", statTotalFiles));
        if (statTotalSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat_total_size", statTotalSize));
        if (statSizeOnCache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat_size_on_cache", statSizeOnCache));
        if (guestRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("guest_right", guestRight));
        if (lastUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_update", lastUpdate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexContainersValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexContainersCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all containers.
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @return ContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerCollection indexContainers(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate) throws ApiException {
        ApiResponse<ContainerCollection> resp = indexContainersWithHttpInfo(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);
        return resp.getData();
    }

    /**
     * Lists all containers.
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @return ApiResponse&lt;ContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerCollection> indexContainersWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate) throws ApiException {
        com.squareup.okhttp.Call call = indexContainersValidateBeforeCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, null, null);
        Type localVarReturnType = new TypeToken<ContainerCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all containers. (asynchronously)
     * **API Key Scope**: containers / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param quotaTotalSize Filter on quota total size (optional)
     * @param quotaOnCache Filter on quota on cache (optional)
     * @param statTotalFiles Filter on stat total files (optional)
     * @param statTotalSize Filter on stat total size (optional)
     * @param statSizeOnCache Filter on stat size on cache (optional)
     * @param guestRight Filter on guest right (optional)
     * @param lastUpdate Filter on last update (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexContainersAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String quotaTotalSize, String quotaOnCache, String statTotalFiles, String statTotalSize, String statSizeOnCache, String guestRight, String lastUpdate, final ApiCallback<ContainerCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexContainersValidateBeforeCall(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showContainerCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showContainerValidateBeforeCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = showContainerCall(containerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific container.
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Container showContainer(String containerId) throws ApiException {
        ApiResponse<Container> resp = showContainerWithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * Displays a specific container.
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Container> showContainerWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = showContainerValidateBeforeCall(containerId, null, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific container. (asynchronously)
     * **API Key Scope**: containers / show
     * @param containerId Numeric ID or name of container. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showContainerAsync(String containerId, final ApiCallback<Container> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showContainerValidateBeforeCall(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", apiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling showContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling showContainerPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = showContainerPrivilegeCall(containerId, containerPrivilegeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific privilege.
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerPrivilege showContainerPrivilege(String containerId, Integer containerPrivilegeId) throws ApiException {
        ApiResponse<ContainerPrivilege> resp = showContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
        return resp.getData();
    }

    /**
     * Displays a specific privilege.
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerPrivilege> showContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId) throws ApiException {
        com.squareup.okhttp.Call call = showContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, null, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / show
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, final ApiCallback<ContainerPrivilege> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContainer
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContainerCall(String containerId, Container containerBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContainerValidateBeforeCall(String containerId, Container containerBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainer(Async)");
        }
        
        // verify the required parameter 'containerBody' is set
        if (containerBody == null) {
            throw new ApiException("Missing the required parameter 'containerBody' when calling updateContainer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContainerCall(containerId, containerBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Container updateContainer(String containerId, Container containerBody) throws ApiException {
        ApiResponse<Container> resp = updateContainerWithHttpInfo(containerId, containerBody);
        return resp.getData();
    }

    /**
     * Updates a specific container.
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Container> updateContainerWithHttpInfo(String containerId, Container containerBody) throws ApiException {
        com.squareup.okhttp.Call call = updateContainerValidateBeforeCall(containerId, containerBody, null, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific container. (asynchronously)
     * It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContainerAsync(String containerId, Container containerBody, final ApiCallback<Container> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContainerValidateBeforeCall(containerId, containerBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContainerPrivilege
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContainerPrivilegeCall(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerPrivilegeBody;

        // create path and map variables
        String localVarPath = "/containers/{container_id}/container_privileges/{container_privilege_id}"
            .replaceAll("\\{" + "container_id" + "\\}", apiClient.escapeString(containerId.toString()))
            .replaceAll("\\{" + "container_privilege_id" + "\\}", apiClient.escapeString(containerPrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContainerPrivilegeValidateBeforeCall(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeId' is set
        if (containerPrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeId' when calling updateContainerPrivilege(Async)");
        }
        
        // verify the required parameter 'containerPrivilegeBody' is set
        if (containerPrivilegeBody == null) {
            throw new ApiException("Missing the required parameter 'containerPrivilegeBody' when calling updateContainerPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContainerPrivilegeCall(containerId, containerPrivilegeId, containerPrivilegeBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific privilege.
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @return ContainerPrivilege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerPrivilege updateContainerPrivilege(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        ApiResponse<ContainerPrivilege> resp = updateContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId, containerPrivilegeBody);
        return resp.getData();
    }

    /**
     * Updates a specific privilege.
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @return ApiResponse&lt;ContainerPrivilege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerPrivilege> updateContainerPrivilegeWithHttpInfo(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody) throws ApiException {
        com.squareup.okhttp.Call call = updateContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, containerPrivilegeBody, null, null);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific privilege. (asynchronously)
     * **API Key Scope**: container_privileges / update
     * @param containerId Numeric ID or name of container. (required)
     * @param containerPrivilegeId Numeric ID of container privilege. (required)
     * @param containerPrivilegeBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContainerPrivilegeAsync(String containerId, Integer containerPrivilegeId, ContainerPrivilege containerPrivilegeBody, final ApiCallback<ContainerPrivilege> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContainerPrivilegeValidateBeforeCall(containerId, containerPrivilegeId, containerPrivilegeBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerPrivilege>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
