/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Tape;
import io.swagger.client.model.TapeCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapesApi {
    private ApiClient apiClient;

    public TapesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for indexTapes
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapesCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (tapeLibraryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tape_library_id", tapeLibraryId));
        if (tapePoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tape_pool_id", tapePoolId));
        if (barcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barcode", barcode));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (locked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locked", locked));
        if (scratch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scratch", scratch));
        if (cleaning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cleaning", cleaning));
        if (writeProtect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("write_protect", writeProtect));
        if (mounted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mounted", mounted));
        if (ejected != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ejected", ejected));
        if (known != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("known", known));
        if (mountCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mount_count", mountCount));
        if (dateIn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_in", dateIn));
        if (dateMove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_move", dateMove));
        if (free != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("free", free));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (lastSizeUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_size_update", lastSizeUpdate));
        if (lastMaintenance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_maintenance", lastMaintenance));
        if (lastRepack != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_repack", lastRepack));
        if (repackStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repack_status", repackStatus));
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hash", hash));
        if (forceImportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_import_type", forceImportType));
        if (needToCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("need_to_check", needToCheck));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexTapesCall(limit, offset, sortBy, id, tapeLibraryId, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeCollection indexTapes(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> resp = indexTapesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return resp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeCollection> indexTapesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        com.squareup.okhttp.Call call = indexTapesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapesValidateBeforeCall(limit, offset, sortBy, id, tapeLibraryId, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTapesByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapesByTapeLibraryCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (tapePoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tape_pool_id", tapePoolId));
        if (barcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barcode", barcode));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (locked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locked", locked));
        if (scratch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scratch", scratch));
        if (cleaning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cleaning", cleaning));
        if (writeProtect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("write_protect", writeProtect));
        if (mounted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mounted", mounted));
        if (ejected != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ejected", ejected));
        if (known != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("known", known));
        if (mountCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mount_count", mountCount));
        if (dateIn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_in", dateIn));
        if (dateMove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_move", dateMove));
        if (free != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("free", free));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (lastSizeUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_size_update", lastSizeUpdate));
        if (lastMaintenance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_maintenance", lastMaintenance));
        if (lastRepack != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_repack", lastRepack));
        if (repackStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repack_status", repackStatus));
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hash", hash));
        if (forceImportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_import_type", forceImportType));
        if (needToCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("need_to_check", needToCheck));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapesByTapeLibraryValidateBeforeCall(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling indexTapesByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTapesByTapeLibraryCall(tapeLibraryId, limit, offset, sortBy, id, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeCollection indexTapesByTapeLibrary(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> resp = indexTapesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return resp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeCollection> indexTapesByTapeLibraryWithHttpInfo(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        com.squareup.okhttp.Call call = indexTapesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapePoolId Filter on tape pool id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapesByTapeLibraryAsync(String tapeLibraryId, Integer limit, Integer offset, List<String> sortBy, String id, String tapePoolId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapesByTapeLibraryValidateBeforeCall(tapeLibraryId, limit, offset, sortBy, id, tapePoolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexTapesByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexTapesByTapePoolCall(String tapePoolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/tapes"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", apiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (tapeLibraryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tape_library_id", tapeLibraryId));
        if (barcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("barcode", barcode));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (locked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locked", locked));
        if (scratch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scratch", scratch));
        if (cleaning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cleaning", cleaning));
        if (writeProtect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("write_protect", writeProtect));
        if (mounted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mounted", mounted));
        if (ejected != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ejected", ejected));
        if (known != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("known", known));
        if (mountCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mount_count", mountCount));
        if (dateIn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_in", dateIn));
        if (dateMove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date_move", dateMove));
        if (free != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("free", free));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (lastSizeUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_size_update", lastSizeUpdate));
        if (lastMaintenance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_maintenance", lastMaintenance));
        if (lastRepack != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_repack", lastRepack));
        if (repackStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repack_status", repackStatus));
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hash", hash));
        if (forceImportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_import_type", forceImportType));
        if (needToCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("need_to_check", needToCheck));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexTapesByTapePoolValidateBeforeCall(String tapePoolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling indexTapesByTapePool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexTapesByTapePoolCall(tapePoolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return TapeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeCollection indexTapesByTapePool(String tapePoolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        ApiResponse<TapeCollection> resp = indexTapesByTapePoolWithHttpInfo(tapePoolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
        return resp.getData();
    }

    /**
     * Lists all tapes.
     * **API Key Scope**: tapes / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @return ApiResponse&lt;TapeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeCollection> indexTapesByTapePoolWithHttpInfo(String tapePoolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck) throws ApiException {
        com.squareup.okhttp.Call call = indexTapesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, null, null);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all tapes. (asynchronously)
     * **API Key Scope**: tapes / index
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param tapeLibraryId Filter on tape library id (optional)
     * @param barcode Filter on barcode (optional)
     * @param location Filter on location (optional)
     * @param type Filter on type (optional)
     * @param locked Filter on locked (optional)
     * @param scratch Filter on scratch (optional)
     * @param cleaning Filter on cleaning (optional)
     * @param writeProtect Filter on write protect (optional)
     * @param mounted Filter on mounted (optional)
     * @param ejected Filter on ejected (optional)
     * @param known Filter on known (optional)
     * @param mountCount Filter on mount count (optional)
     * @param dateIn Filter on date in (optional)
     * @param dateMove Filter on date move (optional)
     * @param free Filter on free (optional)
     * @param max Filter on max (optional)
     * @param lastSizeUpdate Filter on last size update (optional)
     * @param lastMaintenance Filter on last maintenance (optional)
     * @param lastRepack Filter on last repack (optional)
     * @param repackStatus Filter on repack status (optional)
     * @param hash Filter on hash (optional)
     * @param forceImportType Filter on force import type (optional)
     * @param needToCheck Filter on need to check (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexTapesByTapePoolAsync(String tapePoolId, Integer limit, Integer offset, List<String> sortBy, String id, String tapeLibraryId, String barcode, String location, String type, String locked, String scratch, String cleaning, String writeProtect, String mounted, String ejected, String known, String mountCount, String dateIn, String dateMove, String free, String max, String lastSizeUpdate, String lastMaintenance, String lastRepack, String repackStatus, String hash, String forceImportType, String needToCheck, final ApiCallback<TapeCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexTapesByTapePoolValidateBeforeCall(tapePoolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTape
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeCall(String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tapes/{tape_id}"
            .replaceAll("\\{" + "tape_id" + "\\}", apiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeValidateBeforeCall(String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTape(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeCall(tapeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tape showTape(String tapeId) throws ApiException {
        ApiResponse<Tape> resp = showTapeWithHttpInfo(tapeId);
        return resp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tape> showTapeWithHttpInfo(String tapeId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeValidateBeforeCall(tapeId, null, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeAsync(String tapeId, final ApiCallback<Tape> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeValidateBeforeCall(tapeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTapeByTapeLibrary
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeByTapeLibraryCall(String tapeLibraryId, String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_libraries/{tape_library_id}/tapes/{tape_id}"
            .replaceAll("\\{" + "tape_library_id" + "\\}", apiClient.escapeString(tapeLibraryId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", apiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeByTapeLibraryValidateBeforeCall(String tapeLibraryId, String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapeLibraryId' is set
        if (tapeLibraryId == null) {
            throw new ApiException("Missing the required parameter 'tapeLibraryId' when calling showTapeByTapeLibrary(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeByTapeLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeByTapeLibraryCall(tapeLibraryId, tapeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tape showTapeByTapeLibrary(String tapeLibraryId, String tapeId) throws ApiException {
        ApiResponse<Tape> resp = showTapeByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
        return resp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tape> showTapeByTapeLibraryWithHttpInfo(String tapeLibraryId, String tapeId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, null, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param tapeLibraryId Numeric ID, serial, or name of tape library. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeByTapeLibraryAsync(String tapeLibraryId, String tapeId, final ApiCallback<Tape> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeByTapeLibraryValidateBeforeCall(tapeLibraryId, tapeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTapeByTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTapeByTapePoolCall(String tapePoolId, String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}/tapes/{tape_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", apiClient.escapeString(tapePoolId.toString()))
            .replaceAll("\\{" + "tape_id" + "\\}", apiClient.escapeString(tapeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTapeByTapePoolValidateBeforeCall(String tapePoolId, String tapeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling showTapeByTapePool(Async)");
        }
        
        // verify the required parameter 'tapeId' is set
        if (tapeId == null) {
            throw new ApiException("Missing the required parameter 'tapeId' when calling showTapeByTapePool(Async)");
        }
        

        com.squareup.okhttp.Call call = showTapeByTapePoolCall(tapePoolId, tapeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return Tape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tape showTapeByTapePool(String tapePoolId, String tapeId) throws ApiException {
        ApiResponse<Tape> resp = showTapeByTapePoolWithHttpInfo(tapePoolId, tapeId);
        return resp.getData();
    }

    /**
     * Displays a specific tape.
     * **API Key Scope**: tapes / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @return ApiResponse&lt;Tape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tape> showTapeByTapePoolWithHttpInfo(String tapePoolId, String tapeId) throws ApiException {
        com.squareup.okhttp.Call call = showTapeByTapePoolValidateBeforeCall(tapePoolId, tapeId, null, null);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific tape. (asynchronously)
     * **API Key Scope**: tapes / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapeId Numeric ID, or barcode of tape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTapeByTapePoolAsync(String tapePoolId, String tapeId, final ApiCallback<Tape> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTapeByTapePoolValidateBeforeCall(tapePoolId, tapeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tape>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
