/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.CloudBucketSimpleCollection;
import io.swagger.client.model.CloudConnector;
import io.swagger.client.model.CloudConnectorCollection;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudConnectorsApi {
    private ApiClient apiClient;

    public CloudConnectorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudConnectorsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCloudConnector
     * @param cloudConnectorBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCloudConnectorCall(CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCloudConnectorValidateBeforeCall(CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling createCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = createCloudConnectorCall(cloudConnectorBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new cloud connector.
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudConnector createCloudConnector(CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<CloudConnector> resp = createCloudConnectorWithHttpInfo(cloudConnectorBody);
        return resp.getData();
    }

    /**
     * Creates a new cloud connector.
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudConnector> createCloudConnectorWithHttpInfo(CloudConnector cloudConnectorBody) throws ApiException {
        com.squareup.okhttp.Call call = createCloudConnectorValidateBeforeCall(cloudConnectorBody, null, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / create
     * @param cloudConnectorBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCloudConnectorAsync(CloudConnector cloudConnectorBody, final ApiCallback<CloudConnector> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCloudConnectorValidateBeforeCall(cloudConnectorBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyCloudConnectorCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyCloudConnectorValidateBeforeCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling destroyCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyCloudConnectorCall(cloudConnectorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific cloud connector.
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyCloudConnector(String cloudConnectorId) throws ApiException {
        destroyCloudConnectorWithHttpInfo(cloudConnectorId);
    }

    /**
     * Destroys a specific cloud connector.
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyCloudConnectorWithHttpInfo(String cloudConnectorId) throws ApiException {
        com.squareup.okhttp.Call call = destroyCloudConnectorValidateBeforeCall(cloudConnectorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / destroy
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyCloudConnectorAsync(String cloudConnectorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyCloudConnectorValidateBeforeCall(cloudConnectorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexCloudConnectors
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexCloudConnectorsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (urlProxy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url_proxy", urlProxy));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (accessKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_key", accessKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexCloudConnectorsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexCloudConnectorsCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all cloud connectors.
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @return CloudConnectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudConnectorCollection indexCloudConnectors(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey) throws ApiException {
        ApiResponse<CloudConnectorCollection> resp = indexCloudConnectorsWithHttpInfo(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey);
        return resp.getData();
    }

    /**
     * Lists all cloud connectors.
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @return ApiResponse&lt;CloudConnectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudConnectorCollection> indexCloudConnectorsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey) throws ApiException {
        com.squareup.okhttp.Call call = indexCloudConnectorsValidateBeforeCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, null, null);
        Type localVarReturnType = new TypeToken<CloudConnectorCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all cloud connectors. (asynchronously)
     * **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param url Filter on url (optional)
     * @param urlProxy Filter on url proxy (optional)
     * @param provider Filter on provider (optional)
     * @param region Filter on region (optional)
     * @param accessKey Filter on access key (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexCloudConnectorsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String url, String urlProxy, String provider, String region, String accessKey, final ApiCallback<CloudConnectorCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexCloudConnectorsValidateBeforeCall(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudConnectorCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showCloudConnectorCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showCloudConnectorValidateBeforeCall(String cloudConnectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling showCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = showCloudConnectorCall(cloudConnectorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific cloud connector.
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudConnector showCloudConnector(String cloudConnectorId) throws ApiException {
        ApiResponse<CloudConnector> resp = showCloudConnectorWithHttpInfo(cloudConnectorId);
        return resp.getData();
    }

    /**
     * Displays a specific cloud connector.
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudConnector> showCloudConnectorWithHttpInfo(String cloudConnectorId) throws ApiException {
        com.squareup.okhttp.Call call = showCloudConnectorValidateBeforeCall(cloudConnectorId, null, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showCloudConnectorAsync(String cloudConnectorId, final ApiCallback<CloudConnector> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showCloudConnectorValidateBeforeCall(cloudConnectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for testCloudConnector
     * @param cloudConnectorBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testCloudConnectorCall(CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors/-/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testCloudConnectorValidateBeforeCall(CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling testCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = testCloudConnectorCall(cloudConnectorBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test an unsaved cloud connector.
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActiveJobStatus testCloudConnector(CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<ActiveJobStatus> resp = testCloudConnectorWithHttpInfo(cloudConnectorBody);
        return resp.getData();
    }

    /**
     * Test an unsaved cloud connector.
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActiveJobStatus> testCloudConnectorWithHttpInfo(CloudConnector cloudConnectorBody) throws ApiException {
        com.squareup.okhttp.Call call = testCloudConnectorValidateBeforeCall(cloudConnectorBody, null, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test an unsaved cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / test
     * @param cloudConnectorBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testCloudConnectorAsync(CloudConnector cloudConnectorBody, final ApiCallback<ActiveJobStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testCloudConnectorValidateBeforeCall(cloudConnectorBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for testResultCloudConnector
     * @param jobId ID of active job (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testResultCloudConnectorCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloud_connectors/-/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testResultCloudConnectorValidateBeforeCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = testResultCloudConnectorCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check result of cloud connector test job.
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (optional)
     * @return CloudBucketSimpleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudBucketSimpleCollection testResultCloudConnector(String jobId) throws ApiException {
        ApiResponse<CloudBucketSimpleCollection> resp = testResultCloudConnectorWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * Check result of cloud connector test job.
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;CloudBucketSimpleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudBucketSimpleCollection> testResultCloudConnectorWithHttpInfo(String jobId) throws ApiException {
        com.squareup.okhttp.Call call = testResultCloudConnectorValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check result of cloud connector test job. (asynchronously)
     * **API Key Scope**: cloud_connectors / test
     * @param jobId ID of active job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testResultCloudConnectorAsync(String jobId, final ApiCallback<CloudBucketSimpleCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testResultCloudConnectorValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudBucketSimpleCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCloudConnector
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCloudConnectorCall(String cloudConnectorId, CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloudConnectorBody;

        // create path and map variables
        String localVarPath = "/cloud_connectors/{cloud_connector_id}"
            .replaceAll("\\{" + "cloud_connector_id" + "\\}", apiClient.escapeString(cloudConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCloudConnectorValidateBeforeCall(String cloudConnectorId, CloudConnector cloudConnectorBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cloudConnectorId' is set
        if (cloudConnectorId == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorId' when calling updateCloudConnector(Async)");
        }
        
        // verify the required parameter 'cloudConnectorBody' is set
        if (cloudConnectorBody == null) {
            throw new ApiException("Missing the required parameter 'cloudConnectorBody' when calling updateCloudConnector(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCloudConnectorCall(cloudConnectorId, cloudConnectorBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific cloud connector.
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @return CloudConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudConnector updateCloudConnector(String cloudConnectorId, CloudConnector cloudConnectorBody) throws ApiException {
        ApiResponse<CloudConnector> resp = updateCloudConnectorWithHttpInfo(cloudConnectorId, cloudConnectorBody);
        return resp.getData();
    }

    /**
     * Updates a specific cloud connector.
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @return ApiResponse&lt;CloudConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudConnector> updateCloudConnectorWithHttpInfo(String cloudConnectorId, CloudConnector cloudConnectorBody) throws ApiException {
        com.squareup.okhttp.Call call = updateCloudConnectorValidateBeforeCall(cloudConnectorId, cloudConnectorBody, null, null);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific cloud connector. (asynchronously)
     * **API Key Scope**: cloud_connectors / update
     * @param cloudConnectorId Numeric ID or name of cloud connector. (required)
     * @param cloudConnectorBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCloudConnectorAsync(String cloudConnectorId, CloudConnector cloudConnectorBody, final ApiCallback<CloudConnector> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCloudConnectorValidateBeforeCall(cloudConnectorId, cloudConnectorBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudConnector>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
