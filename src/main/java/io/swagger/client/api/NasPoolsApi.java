/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.NasPool;
import io.swagger.client.model.NasPoolCollection;
import io.swagger.client.model.NasPoolUp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasPoolsApi {
    private ApiClient apiClient;

    public NasPoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasPoolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNasPool
     * @param nasPoolBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNasPoolCall(NasPoolUp nasPoolBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasPoolBody;

        // create path and map variables
        String localVarPath = "/nas_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNasPoolValidateBeforeCall(NasPoolUp nasPoolBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolBody' is set
        if (nasPoolBody == null) {
            throw new ApiException("Missing the required parameter 'nasPoolBody' when calling createNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = createNasPoolCall(nasPoolBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new NAS pool.
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasPool createNasPool(NasPoolUp nasPoolBody) throws ApiException {
        ApiResponse<NasPool> resp = createNasPoolWithHttpInfo(nasPoolBody);
        return resp.getData();
    }

    /**
     * Creates a new NAS pool.
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasPool> createNasPoolWithHttpInfo(NasPoolUp nasPoolBody) throws ApiException {
        com.squareup.okhttp.Call call = createNasPoolValidateBeforeCall(nasPoolBody, null, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNasPoolAsync(NasPoolUp nasPoolBody, final ApiCallback<NasPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNasPoolValidateBeforeCall(nasPoolBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyNasPoolCall(String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyNasPoolValidateBeforeCall(String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling destroyNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyNasPoolCall(nasPoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific NAS pool.
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyNasPool(String nasPoolId) throws ApiException {
        destroyNasPoolWithHttpInfo(nasPoolId);
    }

    /**
     * Destroys a specific NAS pool.
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyNasPoolWithHttpInfo(String nasPoolId) throws ApiException {
        com.squareup.okhttp.Call call = destroyNasPoolValidateBeforeCall(nasPoolId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyNasPoolAsync(String nasPoolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyNasPoolValidateBeforeCall(nasPoolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexNasPools
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexNasPoolsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (comment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment", comment));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexNasPoolsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexNasPoolsCall(limit, offset, sortBy, id, name, comment, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all NAS pools.
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return NasPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasPoolCollection indexNasPools(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        ApiResponse<NasPoolCollection> resp = indexNasPoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type);
        return resp.getData();
    }

    /**
     * Lists all NAS pools.
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;NasPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasPoolCollection> indexNasPoolsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        com.squareup.okhttp.Call call = indexNasPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, null, null);
        Type localVarReturnType = new TypeToken<NasPoolCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all NAS pools. (asynchronously)
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexNasPoolsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback<NasPoolCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexNasPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasPoolCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showNasPoolCall(String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showNasPoolValidateBeforeCall(String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = showNasPoolCall(nasPoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific NAS pool.
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasPool showNasPool(String nasPoolId) throws ApiException {
        ApiResponse<NasPool> resp = showNasPoolWithHttpInfo(nasPoolId);
        return resp.getData();
    }

    /**
     * Displays a specific NAS pool.
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasPool> showNasPoolWithHttpInfo(String nasPoolId) throws ApiException {
        com.squareup.okhttp.Call call = showNasPoolValidateBeforeCall(nasPoolId, null, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showNasPoolAsync(String nasPoolId, final ApiCallback<NasPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showNasPoolValidateBeforeCall(nasPoolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNasPoolCall(String nasPoolId, NasPoolUp nasPoolBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasPoolBody;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNasPoolValidateBeforeCall(String nasPoolId, NasPoolUp nasPoolBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling updateNasPool(Async)");
        }
        
        // verify the required parameter 'nasPoolBody' is set
        if (nasPoolBody == null) {
            throw new ApiException("Missing the required parameter 'nasPoolBody' when calling updateNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNasPoolCall(nasPoolId, nasPoolBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific NAS pool.
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasPool updateNasPool(String nasPoolId, NasPoolUp nasPoolBody) throws ApiException {
        ApiResponse<NasPool> resp = updateNasPoolWithHttpInfo(nasPoolId, nasPoolBody);
        return resp.getData();
    }

    /**
     * Updates a specific NAS pool.
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasPool> updateNasPoolWithHttpInfo(String nasPoolId, NasPoolUp nasPoolBody) throws ApiException {
        com.squareup.okhttp.Call call = updateNasPoolValidateBeforeCall(nasPoolId, nasPoolBody, null, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNasPoolAsync(String nasPoolId, NasPoolUp nasPoolBody, final ApiCallback<NasPool> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNasPoolValidateBeforeCall(nasPoolId, nasPoolBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
