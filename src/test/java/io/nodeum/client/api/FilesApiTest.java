/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.ImportFileCollection;
import io.nodeum.client.model.ImportFileWithPath;
import io.nodeum.client.model.NodeumFileCollection;
import io.nodeum.client.model.NodeumFileWithPath;
import io.nodeum.client.model.OnTapesFile;
import io.nodeum.client.model.OnTapesFileCollection;
import io.nodeum.client.model.TapeCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Ignore
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenTest() throws ApiException {
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildren(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenByContainerTest() throws ApiException {
        String containerId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildrenByContainer(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildrenByPool(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenByTaskTest() throws ApiException {
        String taskId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildrenByTask(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenByTaskExecutionTest() throws ApiException {
        String taskExecutionId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildrenByTaskExecution(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesChildrenByTaskExecutionByTaskTest() throws ApiException {
        String taskId = null;
        String taskExecutionId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.filesChildrenByTaskExecutionByTask(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder on tape of pools, specific for Data Exchange.
     *
     * **API Key Scope**: import_files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFilesChildrenByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        ImportFileCollection response = api.importFilesChildrenByPool(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFiles(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesByContainerTest() throws ApiException {
        String containerId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFilesByContainer(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesByPoolTest() throws ApiException {
        String poolId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFilesByPool(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesByTaskTest() throws ApiException {
        String taskId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFilesByTask(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesByTaskExecutionTest() throws ApiException {
        String taskExecutionId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFilesByTaskExecution(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root.
     *
     * **API Key Scope**: files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexFilesByTaskExecutionByTaskTest() throws ApiException {
        String taskId = null;
        String taskExecutionId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        NodeumFileCollection response = api.indexFilesByTaskExecutionByTask(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root of tape of pools, specific for Data Exchange.
     *
     * **API Key Scope**: import_files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexImportFilesByPoolTest() throws ApiException {
        String poolId = null;
        Integer limit = null;
        Integer offset = null;
        String fileId = null;
        String name = null;
        String type = null;
        String permission = null;
        String size = null;
        String changeDate = null;
        String modificationDate = null;
        String accessDate = null;
        String gid = null;
        String uid = null;
        ImportFileCollection response = api.indexImportFilesByPool(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);

        // TODO: test validations
    }
    
    /**
     * Lists files on root of tape of pools, specific for Active and Offline.
     *
     * **API Key Scope**: on_tapes_files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexOnTapesFilesByPoolTest() throws ApiException {
        String poolId = null;
        Integer limit = null;
        Integer offset = null;
        String name = null;
        String type = null;
        String size = null;
        OnTapesFileCollection response = api.indexOnTapesFilesByPool(poolId, limit, offset, name, type, size);

        // TODO: test validations
    }
    
    /**
     * Displays tapes containing specific file, related to the specific pool.
     *
     * **API Key Scope**: files / tapes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByFileByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileId = null;
        TapeCollection response = api.indexTapesByFileByPool(poolId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays tapes containing specific file, related to the specific task.
     *
     * **API Key Scope**: files / tapes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByFileByTaskTest() throws ApiException {
        String taskId = null;
        Integer fileId = null;
        TapeCollection response = api.indexTapesByFileByTask(taskId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays tapes containing specific file, related to the specific task.
     *
     * **API Key Scope**: files / tapes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByFileByTaskExecutionTest() throws ApiException {
        String taskExecutionId = null;
        Integer fileId = null;
        TapeCollection response = api.indexTapesByFileByTaskExecution(taskExecutionId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays tapes containing specific file, related to the specific task.
     *
     * **API Key Scope**: files / tapes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexTapesByFileByTaskExecutionByTaskTest() throws ApiException {
        String taskId = null;
        String taskExecutionId = null;
        Integer fileId = null;
        TapeCollection response = api.indexTapesByFileByTaskExecutionByTask(taskId, taskExecutionId, fileId);

        // TODO: test validations
    }
    
    /**
     * Lists files under a specific folder on tape of pools, specific for Active and Offline.
     *
     * **API Key Scope**: on_tapes_files / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void onTapesFilesChildrenByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileParentId = null;
        Integer limit = null;
        Integer offset = null;
        String name = null;
        String type = null;
        String size = null;
        OnTapesFileCollection response = api.onTapesFilesChildrenByPool(poolId, fileParentId, limit, offset, name, type, size);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileTest() throws ApiException {
        Integer fileId = null;
        NodeumFileWithPath response = api.showFile(fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileByContainerTest() throws ApiException {
        String containerId = null;
        Integer fileId = null;
        NodeumFileWithPath response = api.showFileByContainer(containerId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileId = null;
        NodeumFileWithPath response = api.showFileByPool(poolId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileByTaskTest() throws ApiException {
        String taskId = null;
        Integer fileId = null;
        NodeumFileWithPath response = api.showFileByTask(taskId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileByTaskExecutionTest() throws ApiException {
        String taskExecutionId = null;
        Integer fileId = null;
        NodeumFileWithPath response = api.showFileByTaskExecution(taskExecutionId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file.
     *
     * **API Key Scope**: files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showFileByTaskExecutionByTaskTest() throws ApiException {
        String taskId = null;
        String taskExecutionId = null;
        Integer fileId = null;
        NodeumFileWithPath response = api.showFileByTaskExecutionByTask(taskId, taskExecutionId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file on tape of pools, specific for Data Exchange.
     *
     * **API Key Scope**: import_files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showImportFileByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileId = null;
        ImportFileWithPath response = api.showImportFileByPool(poolId, fileId);

        // TODO: test validations
    }
    
    /**
     * Displays a specific file on tape of pools, specific for Active and Offline.
     *
     * **API Key Scope**: on_tapes_files / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showOnTapeFileByPoolTest() throws ApiException {
        String poolId = null;
        Integer fileId = null;
        OnTapesFile response = api.showOnTapeFileByPool(poolId, fileId);

        // TODO: test validations
    }
    
}
