/*
 * Nodeum API
 * Nodeum API  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActiveJobStatus;
import io.swagger.client.model.Error;
import io.swagger.client.model.NasShare;
import io.swagger.client.model.NasShareCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasSharesApi {
    private ApiClient apiClient;

    public NasSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasSharesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNasShareByNasCall(String nasId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNasShareByNasValidateBeforeCall(String nasId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling createNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling createNasShareByNas(Async)");
        }
        

        com.squareup.okhttp.Call call = createNasShareByNasCall(nasId, nasShareBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare createNasShareByNas(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> resp = createNasShareByNasWithHttpInfo(nasId, nasShareBody);
        return resp.getData();
    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> createNasShareByNasWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        com.squareup.okhttp.Call call = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNasShareByNasAsync(String nasId, NasShare nasShareBody, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for destroyNasShare
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareCall(Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyNasShareValidateBeforeCall(Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShare(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyNasShareCall(nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyNasShare(Integer nasShareId) throws ApiException {
        destroyNasShareWithHttpInfo(nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyNasShareWithHttpInfo(Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = destroyNasShareValidateBeforeCall(nasShareId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareAsync(Integer nasShareId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyNasShareValidateBeforeCall(nasShareId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for destroyNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareByNasCall(String nasId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling destroyNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByNas(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyNasShareByNasCall(nasId, nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyNasShareByNas(String nasId, Integer nasShareId) throws ApiException {
        destroyNasShareByNasWithHttpInfo(nasId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyNasShareByNasWithHttpInfo(String nasId, Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareByNasAsync(String nasId, Integer nasShareId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for destroyNasShareByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareByNasPoolCall(String nasPoolId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call destroyNasShareByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling destroyNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = destroyNasShareByNasPoolCall(nasPoolId, nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void destroyNasShareByNasPool(String nasPoolId, Integer nasShareId) throws ApiException {
        destroyNasShareByNasPoolWithHttpInfo(nasPoolId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> destroyNasShareByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = destroyNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call destroyNasShareByNasPoolAsync(String nasPoolId, Integer nasShareId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = destroyNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for indexNasShares
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesCall(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (nasId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nas_id", nasId));
        if (nasPoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nas_pool_id", nasPoolId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexNasSharesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = indexNasSharesCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShareCollection indexNasShares(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId) throws ApiException {
        ApiResponse<NasShareCollection> resp = indexNasSharesWithHttpInfo(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId);
        return resp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShareCollection> indexNasSharesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId) throws ApiException {
        com.squareup.okhttp.Call call = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, null, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ApiCallback<NasShareCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexNasSharesByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesByNasCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (nasPoolId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nas_pool_id", nasPoolId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexNasSharesByNasValidateBeforeCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling indexNasSharesByNas(Async)");
        }
        

        com.squareup.okhttp.Call call = indexNasSharesByNasCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShareCollection indexNasSharesByNas(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId) throws ApiException {
        ApiResponse<NasShareCollection> resp = indexNasSharesByNasWithHttpInfo(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId);
        return resp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShareCollection> indexNasSharesByNasWithHttpInfo(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId) throws ApiException {
        com.squareup.okhttp.Call call = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, null, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesByNasAsync(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ApiCallback<NasShareCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexNasSharesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesByNasPoolCall(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sortBy != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "sort_by", sortBy));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (nasId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nas_id", nasId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexNasSharesByNasPoolValidateBeforeCall(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling indexNasSharesByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = indexNasSharesByNasPoolCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShareCollection indexNasSharesByNasPool(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId) throws ApiException {
        ApiResponse<NasShareCollection> resp = indexNasSharesByNasPoolWithHttpInfo(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId);
        return resp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShareCollection> indexNasSharesByNasPoolWithHttpInfo(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId) throws ApiException {
        com.squareup.okhttp.Call call = indexNasSharesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, null, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexNasSharesByNasPoolAsync(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ApiCallback<NasShareCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexNasSharesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showNasShareByNasCall(String nasId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling showNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShareByNas(Async)");
        }
        

        com.squareup.okhttp.Call call = showNasShareByNasCall(nasId, nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare showNasShareByNas(String nasId, Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> resp = showNasShareByNasWithHttpInfo(nasId, nasShareId);
        return resp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> showNasShareByNasWithHttpInfo(String nasId, Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = showNasShareByNasValidateBeforeCall(nasId, nasShareId, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showNasShareByNasAsync(String nasId, Integer nasShareId, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showNasShareByNasValidateBeforeCall(nasId, nasShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showNasShares
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showNasSharesCall(Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showNasSharesValidateBeforeCall(Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShares(Async)");
        }
        

        com.squareup.okhttp.Call call = showNasSharesCall(nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare showNasShares(Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> resp = showNasSharesWithHttpInfo(nasShareId);
        return resp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> showNasSharesWithHttpInfo(Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = showNasSharesValidateBeforeCall(nasShareId, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showNasSharesAsync(Integer nasShareId, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showNasSharesValidateBeforeCall(nasShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showNasSharesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showNasSharesByNasPoolCall(String nasPoolId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showNasSharesByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showNasSharesByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasSharesByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = showNasSharesByNasPoolCall(nasPoolId, nasShareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare showNasSharesByNasPool(String nasPoolId, Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> resp = showNasSharesByNasPoolWithHttpInfo(nasPoolId, nasShareId);
        return resp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> showNasSharesByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId) throws ApiException {
        com.squareup.okhttp.Call call = showNasSharesByNasPoolValidateBeforeCall(nasPoolId, nasShareId, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showNasSharesByNasPoolAsync(String nasPoolId, Integer nasShareId, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showNasSharesByNasPoolValidateBeforeCall(nasPoolId, nasShareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for testNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testNasShareCall(String nasId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testNasShareValidateBeforeCall(String nasId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling testNasShare(Async)");
        }
        

        com.squareup.okhttp.Call call = testNasShareCall(nasId, nasShareBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActiveJobStatus testNasShare(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<ActiveJobStatus> resp = testNasShareWithHttpInfo(nasId, nasShareBody);
        return resp.getData();
    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActiveJobStatus> testNasShareWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        com.squareup.okhttp.Call call = testNasShareValidateBeforeCall(nasId, nasShareBody, null, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test an unsaved NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testNasShareAsync(String nasId, NasShare nasShareBody, final ApiCallback<ActiveJobStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testNasShareValidateBeforeCall(nasId, nasShareBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for testResultNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testResultNasShareCall(String nasId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testResultNasShareValidateBeforeCall(String nasId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testResultNasShare(Async)");
        }
        

        com.squareup.okhttp.Call call = testResultNasShareCall(nasId, jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActiveJobStatus testResultNasShare(String nasId, String jobId) throws ApiException {
        ApiResponse<ActiveJobStatus> resp = testResultNasShareWithHttpInfo(nasId, jobId);
        return resp.getData();
    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActiveJobStatus> testResultNasShareWithHttpInfo(String nasId, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = testResultNasShareValidateBeforeCall(nasId, jobId, null, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check result of a NAS Share test job. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testResultNasShareAsync(String nasId, String jobId, final ApiCallback<ActiveJobStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testResultNasShareValidateBeforeCall(nasId, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNasShare
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNasShareCall(Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNasShareValidateBeforeCall(Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShare(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNasShareCall(nasShareId, nasShareBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare updateNasShare(Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> resp = updateNasShareWithHttpInfo(nasShareId, nasShareBody);
        return resp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> updateNasShareWithHttpInfo(Integer nasShareId, NasShare nasShareBody) throws ApiException {
        com.squareup.okhttp.Call call = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNasShareAsync(Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNasShareByNasCall(String nasId, Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", apiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByNas(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNasShareByNasCall(nasId, nasShareId, nasShareBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare updateNasShareByNas(String nasId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> resp = updateNasShareByNasWithHttpInfo(nasId, nasShareId, nasShareBody);
        return resp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> updateNasShareByNasWithHttpInfo(String nasId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        com.squareup.okhttp.Call call = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNasShareByNasAsync(String nasId, Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNasShareByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNasShareByNasPoolCall(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", apiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", apiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNasShareByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling updateNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByNasPool(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNasShareByNasPoolCall(nasPoolId, nasShareId, nasShareBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NasShare updateNasShareByNasPool(String nasPoolId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> resp = updateNasShareByNasPoolWithHttpInfo(nasPoolId, nasShareId, nasShareBody);
        return resp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NasShare> updateNasShareByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        com.squareup.okhttp.Call call = updateNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, nasShareBody, null, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNasShareByNasPoolAsync(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, nasShareBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
