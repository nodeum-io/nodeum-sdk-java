/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.ActiveJobStatus;
import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;
import io.nodeum.client.model.NasShare;
import io.nodeum.client.model.NasShareCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasSharesApi {
    private ApiClient localVarApiClient;

    public NasSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasSharesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasShareByNasCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNasShareByNasValidateBeforeCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling createNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling createNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = createNasShareByNasCall(nasId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare createNasShareByNas(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = createNasShareByNasWithHttpInfo(nasId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new NAS share.
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> createNasShareByNasWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / create
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasShareByNasAsync(String nasId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNasShareByNasValidateBeforeCall(nasId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShare
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareValidateBeforeCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShare(Integer nasShareId) throws ApiException {
        destroyNasShareWithHttpInfo(nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareWithHttpInfo(Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareValidateBeforeCall(nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareAsync(Integer nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareValidateBeforeCall(nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling destroyNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShareByNas(String nasId, Integer nasShareId) throws ApiException {
        destroyNasShareByNasWithHttpInfo(nasId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareByNasWithHttpInfo(String nasId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasAsync(String nasId, Integer nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasShareByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasPoolCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasShareByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling destroyNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling destroyNasShareByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasShareByNasPoolCall(nasPoolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasShareByNasPool(String nasPoolId, Integer nasShareId) throws ApiException {
        destroyNasShareByNasPoolWithHttpInfo(nasPoolId, nasShareId);
    }

    /**
     * Destroys a specific NAS share.
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasShareByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS share destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasShareByNasPoolAsync(String nasPoolId, Integer nasShareId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasShares
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesCall(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (nasId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_id", nasId));
        }

        if (nasPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_pool_id", nasPoolId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexNasSharesCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasShares(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesWithHttpInfo(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesAsync(Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, String nasPoolId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesValidateBeforeCall(limit, offset, sortBy, id, path, options, username, nasId, nasPoolId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasSharesByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (nasPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_pool_id", nasPoolId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesByNasValidateBeforeCall(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling indexNasSharesByNas(Async)");
        }
        

        okhttp3.Call localVarCall = indexNasSharesByNasCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasSharesByNas(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesByNasWithHttpInfo(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesByNasWithHttpInfo(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasPoolId Filter on NAS pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasAsync(String nasId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasPoolId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesByNasValidateBeforeCall(nasId, limit, offset, sortBy, id, path, options, username, nasPoolId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasSharesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasPoolCall(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (nasId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nas_id", nasId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasSharesByNasPoolValidateBeforeCall(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling indexNasSharesByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = indexNasSharesByNasPoolCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return NasShareCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public NasShareCollection indexNasSharesByNasPool(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId) throws ApiException {
        ApiResponse<NasShareCollection> localVarResp = indexNasSharesByNasPoolWithHttpInfo(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS shares.
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @return ApiResponse&lt;NasShareCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShareCollection> indexNasSharesByNasPoolWithHttpInfo(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId) throws ApiException {
        okhttp3.Call localVarCall = indexNasSharesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, null);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS shares. (asynchronously)
     * **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param path Filter on path (optional)
     * @param options Filter on options (optional)
     * @param username Filter on username (optional)
     * @param nasId Filter on NAS id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS shares. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasSharesByNasPoolAsync(String nasPoolId, Integer limit, Integer offset, List<String> sortBy, String id, String path, String options, String username, String nasId, final ApiCallback<NasShareCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasSharesByNasPoolValidateBeforeCall(nasPoolId, limit, offset, sortBy, id, path, options, username, nasId, _callback);
        Type localVarReturnType = new TypeToken<NasShareCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShare
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareValidateBeforeCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShare(Integer nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareWithHttpInfo(nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareWithHttpInfo(Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareValidateBeforeCall(nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareAsync(Integer nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareValidateBeforeCall(nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling mountStatusNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShareByNas(String nasId, Integer nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareByNasWithHttpInfo(nasId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareByNasWithHttpInfo(String nasId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasAsync(String nasId, Integer nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasShareByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasPoolCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}/mount"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasShareByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling mountStatusNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling mountStatusNasShareByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasShareByNasPoolCall(nasPoolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasShareByNasPool(String nasPoolId, Integer nasShareId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasShareByNasPoolWithHttpInfo(nasPoolId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS Share.
     * **API Key Scope**: nas_shares / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasShareByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasShareByNasPoolAsync(String nasPoolId, Integer nasShareId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByNasCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling showNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = showNasShareByNasCall(nasId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasShareByNas(String nasId, Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasShareByNasWithHttpInfo(nasId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasShareByNasWithHttpInfo(String nasId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasShareByNasValidateBeforeCall(nasId, nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasShareByNasAsync(String nasId, Integer nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasShareByNasValidateBeforeCall(nasId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasShares
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasSharesCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasSharesValidateBeforeCall(Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasShares(Async)");
        }
        

        okhttp3.Call localVarCall = showNasSharesCall(nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasShares(Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasSharesWithHttpInfo(nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasSharesWithHttpInfo(Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasSharesValidateBeforeCall(nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasSharesAsync(Integer nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasSharesValidateBeforeCall(nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasSharesByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasSharesByNasPoolCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasSharesByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showNasSharesByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling showNasSharesByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = showNasSharesByNasPoolCall(nasPoolId, nasShareId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare showNasSharesByNasPool(String nasPoolId, Integer nasShareId) throws ApiException {
        ApiResponse<NasShare> localVarResp = showNasSharesByNasPoolWithHttpInfo(nasPoolId, nasShareId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS share.
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> showNasSharesByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId) throws ApiException {
        okhttp3.Call localVarCall = showNasSharesByNasPoolValidateBeforeCall(nasPoolId, nasShareId, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasSharesByNasPoolAsync(String nasPoolId, Integer nasShareId, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasSharesByNasPoolValidateBeforeCall(nasPoolId, nasShareId, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testNasShareCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testNasShareValidateBeforeCall(String nasId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling testNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = testNasShareCall(nasId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus testNasShare(String nasId, NasShare nasShareBody) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = testNasShareWithHttpInfo(nasId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Test an unsaved NAS Share.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> testNasShareWithHttpInfo(String nasId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = testNasShareValidateBeforeCall(nasId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test an unsaved NAS Share. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testNasShareAsync(String nasId, NasShare nasShareBody, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = testNasShareValidateBeforeCall(nasId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testResultNasShare
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultNasShareCall(String nasId, String jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/-/test"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_id", jobId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "queued", "working", "failed"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testResultNasShareValidateBeforeCall(String nasId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling testResultNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = testResultNasShareCall(nasId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @return ActiveJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActiveJobStatus testResultNasShare(String nasId, String jobId) throws ApiException {
        ApiResponse<ActiveJobStatus> localVarResp = testResultNasShareWithHttpInfo(nasId, jobId);
        return localVarResp.getData();
    }

    /**
     * Check result of a NAS Share test job.
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @return ApiResponse&lt;ActiveJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveJobStatus> testResultNasShareWithHttpInfo(String nasId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = testResultNasShareValidateBeforeCall(nasId, jobId, null);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check result of a NAS Share test job. (asynchronously)
     * **API Key Scope**: nas_shares / test
     * @param nasId Numeric ID or name of NAS. (required)
     * @param jobId ID of active job (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> An active job that may be queued, working, completed or failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testResultNasShareAsync(String nasId, String jobId, final ApiCallback<ActiveJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = testResultNasShareValidateBeforeCall(nasId, jobId, _callback);
        Type localVarReturnType = new TypeToken<ActiveJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShare
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareCall(Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareValidateBeforeCall(Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShare(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShare(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareCall(nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShare(Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareWithHttpInfo(nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareWithHttpInfo(Integer nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareAsync(Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareValidateBeforeCall(nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShareByNas
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasCall(String nasId, Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas/{nas_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_id" + "\\}", localVarApiClient.escapeString(nasId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareByNasValidateBeforeCall(String nasId, Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasId' is set
        if (nasId == null) {
            throw new ApiException("Missing the required parameter 'nasId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByNas(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByNas(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareByNasCall(nasId, nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShareByNas(String nasId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareByNasWithHttpInfo(nasId, nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareByNasWithHttpInfo(String nasId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasId Numeric ID or name of NAS. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasAsync(String nasId, Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareByNasValidateBeforeCall(nasId, nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasShareByNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasPoolCall(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasShareBody;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/nas_shares/{nas_share_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()))
            .replaceAll("\\{" + "nas_share_id" + "\\}", localVarApiClient.escapeString(nasShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasShareByNasPoolValidateBeforeCall(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling updateNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareId' is set
        if (nasShareId == null) {
            throw new ApiException("Missing the required parameter 'nasShareId' when calling updateNasShareByNasPool(Async)");
        }
        
        // verify the required parameter 'nasShareBody' is set
        if (nasShareBody == null) {
            throw new ApiException("Missing the required parameter 'nasShareBody' when calling updateNasShareByNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasShareByNasPoolCall(nasPoolId, nasShareId, nasShareBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return NasShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasShare updateNasShareByNasPool(String nasPoolId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        ApiResponse<NasShare> localVarResp = updateNasShareByNasPoolWithHttpInfo(nasPoolId, nasShareId, nasShareBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS share.
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @return ApiResponse&lt;NasShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasShare> updateNasShareByNasPoolWithHttpInfo(String nasPoolId, Integer nasShareId, NasShare nasShareBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, nasShareBody, null);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS share. (asynchronously)
     * **API Key Scope**: nas_shares / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasShareId Numeric ID of NAS share. (required)
     * @param nasShareBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS share. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasShareByNasPoolAsync(String nasPoolId, Integer nasShareId, NasShare nasShareBody, final ApiCallback<NasShare> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasShareByNasPoolValidateBeforeCall(nasPoolId, nasShareId, nasShareBody, _callback);
        Type localVarReturnType = new TypeToken<NasShare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
