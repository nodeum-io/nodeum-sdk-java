/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.MountStatus;
import io.nodeum.client.model.NasPool;
import io.nodeum.client.model.NasPoolCollection;
import io.nodeum.client.model.NasPoolUp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NasPoolsApi {
    private ApiClient localVarApiClient;

    public NasPoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NasPoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createNasPool
     * @param nasPoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasPoolCall(NasPoolUp nasPoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasPoolBody;

        // create path and map variables
        String localVarPath = "/nas_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNasPoolValidateBeforeCall(NasPoolUp nasPoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolBody' is set
        if (nasPoolBody == null) {
            throw new ApiException("Missing the required parameter 'nasPoolBody' when calling createNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = createNasPoolCall(nasPoolBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new NAS pool.
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasPool createNasPool(NasPoolUp nasPoolBody) throws ApiException {
        ApiResponse<NasPool> localVarResp = createNasPoolWithHttpInfo(nasPoolBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new NAS pool.
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasPool> createNasPoolWithHttpInfo(NasPoolUp nasPoolBody) throws ApiException {
        okhttp3.Call localVarCall = createNasPoolValidateBeforeCall(nasPoolBody, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / create
     * @param nasPoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNasPoolAsync(NasPoolUp nasPoolBody, final ApiCallback<NasPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNasPoolValidateBeforeCall(nasPoolBody, _callback);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasPoolCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyNasPoolValidateBeforeCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling destroyNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyNasPoolCall(nasPoolId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific NAS pool.
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyNasPool(String nasPoolId) throws ApiException {
        destroyNasPoolWithHttpInfo(nasPoolId);
    }

    /**
     * Destroys a specific NAS pool.
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyNasPoolWithHttpInfo(String nasPoolId) throws ApiException {
        okhttp3.Call localVarCall = destroyNasPoolValidateBeforeCall(nasPoolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / destroy
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NAS pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyNasPoolAsync(String nasPoolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyNasPoolValidateBeforeCall(nasPoolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexNasPools
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasPoolsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexNasPoolsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexNasPoolsCall(limit, offset, sortBy, id, name, comment, type, _callback);
        return localVarCall;

    }

    /**
     * Lists all NAS pools.
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return NasPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS pools. </td><td>  -  </td></tr>
     </table>
     */
    public NasPoolCollection indexNasPools(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        ApiResponse<NasPoolCollection> localVarResp = indexNasPoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type);
        return localVarResp.getData();
    }

    /**
     * Lists all NAS pools.
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;NasPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS pools. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasPoolCollection> indexNasPoolsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        okhttp3.Call localVarCall = indexNasPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, null);
        Type localVarReturnType = new TypeToken<NasPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all NAS pools. (asynchronously)
     * **API Key Scope**: nas_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of NAS pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexNasPoolsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback<NasPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexNasPoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, _callback);
        Type localVarReturnType = new TypeToken<NasPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mountStatusNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasPoolCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}/mount"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mountStatusNasPoolValidateBeforeCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling mountStatusNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = mountStatusNasPoolCall(nasPoolId, _callback);
        return localVarCall;

    }

    /**
     * Get mount status of NAS pool.
     * **API Key Scope**: nas_pools / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return MountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public MountStatus mountStatusNasPool(String nasPoolId) throws ApiException {
        ApiResponse<MountStatus> localVarResp = mountStatusNasPoolWithHttpInfo(nasPoolId);
        return localVarResp.getData();
    }

    /**
     * Get mount status of NAS pool.
     * **API Key Scope**: nas_pools / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return ApiResponse&lt;MountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MountStatus> mountStatusNasPoolWithHttpInfo(String nasPoolId) throws ApiException {
        okhttp3.Call localVarCall = mountStatusNasPoolValidateBeforeCall(nasPoolId, null);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mount status of NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / mount_status
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mount status of storage. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. The detailed error will be of type &#x60;not_found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mountStatusNasPoolAsync(String nasPoolId, final ApiCallback<MountStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = mountStatusNasPoolValidateBeforeCall(nasPoolId, _callback);
        Type localVarReturnType = new TypeToken<MountStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasPoolCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showNasPoolValidateBeforeCall(String nasPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling showNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = showNasPoolCall(nasPoolId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific NAS pool.
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
     </table>
     */
    public NasPool showNasPool(String nasPoolId) throws ApiException {
        ApiResponse<NasPool> localVarResp = showNasPoolWithHttpInfo(nasPoolId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific NAS pool.
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasPool> showNasPoolWithHttpInfo(String nasPoolId) throws ApiException {
        okhttp3.Call localVarCall = showNasPoolValidateBeforeCall(nasPoolId, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / show
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showNasPoolAsync(String nasPoolId, final ApiCallback<NasPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = showNasPoolValidateBeforeCall(nasPoolId, _callback);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNasPool
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasPoolCall(String nasPoolId, NasPoolUp nasPoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nasPoolBody;

        // create path and map variables
        String localVarPath = "/nas_pools/{nas_pool_id}"
            .replaceAll("\\{" + "nas_pool_id" + "\\}", localVarApiClient.escapeString(nasPoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNasPoolValidateBeforeCall(String nasPoolId, NasPoolUp nasPoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nasPoolId' is set
        if (nasPoolId == null) {
            throw new ApiException("Missing the required parameter 'nasPoolId' when calling updateNasPool(Async)");
        }
        
        // verify the required parameter 'nasPoolBody' is set
        if (nasPoolBody == null) {
            throw new ApiException("Missing the required parameter 'nasPoolBody' when calling updateNasPool(Async)");
        }
        

        okhttp3.Call localVarCall = updateNasPoolCall(nasPoolId, nasPoolBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific NAS pool.
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @return NasPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public NasPool updateNasPool(String nasPoolId, NasPoolUp nasPoolBody) throws ApiException {
        ApiResponse<NasPool> localVarResp = updateNasPoolWithHttpInfo(nasPoolId, nasPoolBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific NAS pool.
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @return ApiResponse&lt;NasPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NasPool> updateNasPoolWithHttpInfo(String nasPoolId, NasPoolUp nasPoolBody) throws ApiException {
        okhttp3.Call localVarCall = updateNasPoolValidateBeforeCall(nasPoolId, nasPoolBody, null);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific NAS pool. (asynchronously)
     * **API Key Scope**: nas_pools / update
     * @param nasPoolId Numeric ID or name of NAS pool. (required)
     * @param nasPoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific NAS pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNasPoolAsync(String nasPoolId, NasPoolUp nasPoolBody, final ApiCallback<NasPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNasPoolValidateBeforeCall(nasPoolId, nasPoolBody, _callback);
        Type localVarReturnType = new TypeToken<NasPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
