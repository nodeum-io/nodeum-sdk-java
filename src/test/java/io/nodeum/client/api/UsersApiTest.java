/*
 * Nodeum API
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiException;
import io.nodeum.client.model.ApiKeyCollection;
import io.nodeum.client.model.ApiKeyFull;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Creates a new API Key for current user.
     *
     * **API Key Scope**: api_keys / create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        ApiKeyFull apiKeyBody = null;
        ApiKeyFull response = api.createApiKey(apiKeyBody);

        // TODO: test validations
    }
    
    /**
     * Destroys a specific API Key.
     *
     * **API Key Scope**: api_keys / destroy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroyApiKeyTest() throws ApiException {
        Integer apiKeyId = null;
        api.destroyApiKey(apiKeyId);

        // TODO: test validations
    }
    
    /**
     * Lists all API keys of current user.
     *
     * **API Key Scope**: api_keys / index
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexApiKeysTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        ApiKeyCollection response = api.indexApiKeys(limit, offset);

        // TODO: test validations
    }
    
    /**
     * Displays a specific API Key with its scopes.
     *
     * **API Key Scope**: api_keys / show
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showApiKeyTest() throws ApiException {
        Integer apiKeyId = null;
        ApiKeyFull response = api.showApiKey(apiKeyId);

        // TODO: test validations
    }
    
    /**
     * Updates a specific API Key.
     *
     * **API Key Scope**: api_keys / update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        Integer apiKeyId = null;
        ApiKeyFull apiKeyBody = null;
        ApiKeyFull response = api.updateApiKey(apiKeyId, apiKeyBody);

        // TODO: test validations
    }
    
}
