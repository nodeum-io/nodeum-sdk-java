/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.TapePool;
import io.nodeum.client.model.TapePoolCollection;
import io.nodeum.client.model.TapePoolUp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TapePoolsApi {
    private ApiClient localVarApiClient;

    public TapePoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TapePoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTapePool
     * @param tapePoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapePoolCall(TapePoolUp tapePoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapePoolBody;

        // create path and map variables
        String localVarPath = "/tape_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTapePoolValidateBeforeCall(TapePoolUp tapePoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolBody' is set
        if (tapePoolBody == null) {
            throw new ApiException("Missing the required parameter 'tapePoolBody' when calling createTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = createTapePoolCall(tapePoolBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new tape pool.
     * **API Key Scope**: tape_pools / create
     * @param tapePoolBody  (required)
     * @return TapePool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapePool createTapePool(TapePoolUp tapePoolBody) throws ApiException {
        ApiResponse<TapePool> localVarResp = createTapePoolWithHttpInfo(tapePoolBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new tape pool.
     * **API Key Scope**: tape_pools / create
     * @param tapePoolBody  (required)
     * @return ApiResponse&lt;TapePool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapePool> createTapePoolWithHttpInfo(TapePoolUp tapePoolBody) throws ApiException {
        okhttp3.Call localVarCall = createTapePoolValidateBeforeCall(tapePoolBody, null);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new tape pool. (asynchronously)
     * **API Key Scope**: tape_pools / create
     * @param tapePoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTapePoolAsync(TapePoolUp tapePoolBody, final ApiCallback<TapePool> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTapePoolValidateBeforeCall(tapePoolBody, _callback);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapePoolCall(String tapePoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTapePoolValidateBeforeCall(String tapePoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling destroyTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTapePoolCall(tapePoolId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific tape pool.
     * **API Key Scope**: tape_pools / destroy
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTapePool(String tapePoolId) throws ApiException {
        destroyTapePoolWithHttpInfo(tapePoolId);
    }

    /**
     * Destroys a specific tape pool.
     * **API Key Scope**: tape_pools / destroy
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTapePoolWithHttpInfo(String tapePoolId) throws ApiException {
        okhttp3.Call localVarCall = destroyTapePoolValidateBeforeCall(tapePoolId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific tape pool. (asynchronously)
     * **API Key Scope**: tape_pools / destroy
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tape pool destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTapePoolAsync(String tapePoolId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTapePoolValidateBeforeCall(tapePoolId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTapePools
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapePoolsCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTapePoolsValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTapePoolsCall(limit, offset, sortBy, id, name, comment, type, _callback);
        return localVarCall;

    }

    /**
     * Lists all tape pools.
     * **API Key Scope**: tape_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return TapePoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape pools. </td><td>  -  </td></tr>
     </table>
     */
    public TapePoolCollection indexTapePools(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        ApiResponse<TapePoolCollection> localVarResp = indexTapePoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type);
        return localVarResp.getData();
    }

    /**
     * Lists all tape pools.
     * **API Key Scope**: tape_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @return ApiResponse&lt;TapePoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape pools. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapePoolCollection> indexTapePoolsWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type) throws ApiException {
        okhttp3.Call localVarCall = indexTapePoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, null);
        Type localVarReturnType = new TypeToken<TapePoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tape pools. (asynchronously)
     * **API Key Scope**: tape_pools / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tape pools. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTapePoolsAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, final ApiCallback<TapePoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTapePoolsValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, _callback);
        Type localVarReturnType = new TypeToken<TapePoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapePoolCall(String tapePoolId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTapePoolValidateBeforeCall(String tapePoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling showTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = showTapePoolCall(tapePoolId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific tape pool.
     * **API Key Scope**: tape_pools / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @return TapePool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
     </table>
     */
    public TapePool showTapePool(String tapePoolId) throws ApiException {
        ApiResponse<TapePool> localVarResp = showTapePoolWithHttpInfo(tapePoolId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific tape pool.
     * **API Key Scope**: tape_pools / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @return ApiResponse&lt;TapePool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapePool> showTapePoolWithHttpInfo(String tapePoolId) throws ApiException {
        okhttp3.Call localVarCall = showTapePoolValidateBeforeCall(tapePoolId, null);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific tape pool. (asynchronously)
     * **API Key Scope**: tape_pools / show
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTapePoolAsync(String tapePoolId, final ApiCallback<TapePool> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTapePoolValidateBeforeCall(tapePoolId, _callback);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTapePool
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapePoolBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapePoolCall(String tapePoolId, TapePoolUp tapePoolBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tapePoolBody;

        // create path and map variables
        String localVarPath = "/tape_pools/{tape_pool_id}"
            .replaceAll("\\{" + "tape_pool_id" + "\\}", localVarApiClient.escapeString(tapePoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTapePoolValidateBeforeCall(String tapePoolId, TapePoolUp tapePoolBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tapePoolId' is set
        if (tapePoolId == null) {
            throw new ApiException("Missing the required parameter 'tapePoolId' when calling updateTapePool(Async)");
        }
        
        // verify the required parameter 'tapePoolBody' is set
        if (tapePoolBody == null) {
            throw new ApiException("Missing the required parameter 'tapePoolBody' when calling updateTapePool(Async)");
        }
        

        okhttp3.Call localVarCall = updateTapePoolCall(tapePoolId, tapePoolBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific tape pool.
     * **API Key Scope**: tape_pools / update
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapePoolBody  (required)
     * @return TapePool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public TapePool updateTapePool(String tapePoolId, TapePoolUp tapePoolBody) throws ApiException {
        ApiResponse<TapePool> localVarResp = updateTapePoolWithHttpInfo(tapePoolId, tapePoolBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific tape pool.
     * **API Key Scope**: tape_pools / update
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapePoolBody  (required)
     * @return ApiResponse&lt;TapePool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TapePool> updateTapePoolWithHttpInfo(String tapePoolId, TapePoolUp tapePoolBody) throws ApiException {
        okhttp3.Call localVarCall = updateTapePoolValidateBeforeCall(tapePoolId, tapePoolBody, null);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific tape pool. (asynchronously)
     * **API Key Scope**: tape_pools / update
     * @param tapePoolId Numeric ID, or name of tape pool. (required)
     * @param tapePoolBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific tape pool. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTapePoolAsync(String tapePoolId, TapePoolUp tapePoolBody, final ApiCallback<TapePool> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTapePoolValidateBeforeCall(tapePoolId, tapePoolBody, _callback);
        Type localVarReturnType = new TypeToken<TapePool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
