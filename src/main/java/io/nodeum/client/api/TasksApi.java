/*
 * Nodeum API Reference
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nodeum.client.api;

import io.nodeum.client.ApiCallback;
import io.nodeum.client.ApiClient;
import io.nodeum.client.ApiException;
import io.nodeum.client.ApiResponse;
import io.nodeum.client.Configuration;
import io.nodeum.client.Pair;
import io.nodeum.client.ProgressRequestBody;
import io.nodeum.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nodeum.client.model.Error;
import io.nodeum.client.model.Task;
import io.nodeum.client.model.TaskCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTask
     * @param taskBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskCall(Task taskBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskBody;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskValidateBeforeCall(Task taskBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskBody' is set
        if (taskBody == null) {
            throw new ApiException("Missing the required parameter 'taskBody' when calling createTask(Async)");
        }
        

        okhttp3.Call localVarCall = createTaskCall(taskBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a new task.
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Task createTask(Task taskBody) throws ApiException {
        ApiResponse<Task> localVarResp = createTaskWithHttpInfo(taskBody);
        return localVarResp.getData();
    }

    /**
     * Creates a new task.
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> createTaskWithHttpInfo(Task taskBody) throws ApiException {
        okhttp3.Call localVarCall = createTaskValidateBeforeCall(taskBody, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task. (asynchronously)
     * **API Key Scope**: tasks / create
     * @param taskBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskAsync(Task taskBody, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskValidateBeforeCall(taskBody, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskCall(String taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyTaskValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling destroyTask(Async)");
        }
        

        okhttp3.Call localVarCall = destroyTaskCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Destroys a specific task.
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public void destroyTask(String taskId) throws ApiException {
        destroyTaskWithHttpInfo(taskId);
    }

    /**
     * Destroys a specific task.
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyTaskWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = destroyTaskValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Destroys a specific task. (asynchronously)
     * **API Key Scope**: tasks / destroy
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task destroyed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyTaskAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyTaskValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for indexTasks
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tasks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTasksCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipe", "sort_by", sortBy));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (conflictResolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conflict_resolution", conflictResolution));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (activate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate", activate));
        }

        if (creationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation_date", creationDate));
        }

        if (creationUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creation_username", creationUsername));
        }

        if (modificationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_date", modificationDate));
        }

        if (modificationUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modification_username", modificationUsername));
        }

        if (jobStarted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_started", jobStarted));
        }

        if (jobFinished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_finished", jobFinished));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (processedSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processed_size", processedSize));
        }

        if (toProcessSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_process_size", toProcessSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexTasksValidateBeforeCall(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = indexTasksCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, _callback);
        return localVarCall;

    }

    /**
     * Lists all tasks.
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @return TaskCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tasks. </td><td>  -  </td></tr>
     </table>
     */
    public TaskCollection indexTasks(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize) throws ApiException {
        ApiResponse<TaskCollection> localVarResp = indexTasksWithHttpInfo(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize);
        return localVarResp.getData();
    }

    /**
     * Lists all tasks.
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @return ApiResponse&lt;TaskCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tasks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskCollection> indexTasksWithHttpInfo(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize) throws ApiException {
        okhttp3.Call localVarCall = indexTasksValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, null);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all tasks. (asynchronously)
     * **API Key Scope**: tasks / index
     * @param limit The number of items to display for pagination. (optional)
     * @param offset The number of items to skip for pagination. (optional)
     * @param sortBy Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
     * @param id Filter on id (optional)
     * @param name Filter on name (optional)
     * @param comment Filter on comment (optional)
     * @param type Filter on type (optional)
     * @param priority Filter on priority (optional)
     * @param conflictResolution Filter on conflict resolution (optional)
     * @param action Filter on action (optional)
     * @param activate Filter on activate (optional)
     * @param creationDate Filter on creation date (optional)
     * @param creationUsername Filter on creation username (optional)
     * @param modificationDate Filter on modification date (optional)
     * @param modificationUsername Filter on modification username (optional)
     * @param jobStarted Filter on job started (optional)
     * @param jobFinished Filter on job finished (optional)
     * @param status Filter on status (optional)
     * @param processedSize Filter on processed size (optional)
     * @param toProcessSize Filter on to process size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tasks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexTasksAsync(Integer limit, Integer offset, List<String> sortBy, String id, String name, String comment, String type, String priority, String conflictResolution, String action, String activate, String creationDate, String creationUsername, String modificationDate, String modificationUsername, String jobStarted, String jobFinished, String status, String processedSize, String toProcessSize, final ApiCallback<TaskCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexTasksValidateBeforeCall(limit, offset, sortBy, id, name, comment, type, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, _callback);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskCall(String taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showTaskValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling showTask(Async)");
        }
        

        okhttp3.Call localVarCall = showTaskCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Displays a specific task.
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
     </table>
     */
    public Task showTask(String taskId) throws ApiException {
        ApiResponse<Task> localVarResp = showTaskWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Displays a specific task.
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> showTaskWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = showTaskValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Displays a specific task. (asynchronously)
     * **API Key Scope**: tasks / show
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showTaskAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = showTaskValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTask
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskCall(String taskId, Task taskBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskBody;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replaceAll("\\{" + "task_id" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskValidateBeforeCall(String taskId, Task taskBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskBody' is set
        if (taskBody == null) {
            throw new ApiException("Missing the required parameter 'taskBody' when calling updateTask(Async)");
        }
        

        okhttp3.Call localVarCall = updateTaskCall(taskId, taskBody, _callback);
        return localVarCall;

    }

    /**
     * Updates a specific task.
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public Task updateTask(String taskId, Task taskBody) throws ApiException {
        ApiResponse<Task> localVarResp = updateTaskWithHttpInfo(taskId, taskBody);
        return localVarResp.getData();
    }

    /**
     * Updates a specific task.
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> updateTaskWithHttpInfo(String taskId, Task taskBody) throws ApiException {
        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(taskId, taskBody, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific task. (asynchronously)
     * **API Key Scope**: tasks / update
     * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
     * @param taskBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A specific task. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The received resource was not correctly formatted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskAsync(String taskId, Task taskBody, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(taskId, taskBody, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
